,method,name
408,  protected Consumer<Integer> <extra_id_0>() {    return value::set;  }  @Override,setter
213,  public static void <extra_id_0>() {    skeleton = null;  }  @Test,tearDown
1944,"  public boolean <extra_id_0>(int currentId, String content) {    var nextInstance = this.findNextInstance(currentId);    var electionMessage = new Message(MessageType.ELECTION, content);    nextInstance.onMessage(electionMessage);    return true;  }  /**   * Send leader message to the next instance.   *   * @param currentId Instance ID of which sends this message.   * @param leaderId  Leader message content.   * @return {@code true} if the leader message is accepted by the target instance.   */  @Override",sendElectionMessage
1353,"  void <extra_id_0> () throws Exception {        this.mockMvc.perform(get(""/user"")                .param(""name"", ""Lily"")                .param(""email"", ""Lily@email.com""))        .andExpect(status().isOk())        .andExpect(model().attribute(""name"", ""Lily""))        .andExpect(model().attribute(""email"", ""Lily@email.com""))        .andReturn();  }",testGetUserPath
1839,  public int <extra_id_0>() {    return time;  },getTime
899,"  public static void <extra_id_0>(String[] args) {    CustomerRegistry customerRegistry = CustomerRegistry.getInstance();    var john = new Customer(""1"", ""John"");    customerRegistry.addCustomer(john);    var julia = new Customer(""2"", ""Julia"");    customerRegistry.addCustomer(julia);    LOGGER.info(""John {}"", customerRegistry.getCustomer(""1""));    LOGGER.info(""Julia {}"", customerRegistry.getCustomer(""2""));  }",main
3525,  public static List<String> <extra_id_0>(List<Car> cars) {    return cars.stream().filter(car -> car.getYear() > 2000)        .sorted(Comparator.comparing(Car::getYear))        .map(Car::getModel).toList();  }  /**   * Method to group cars by category using groupingBy.   *   * @param cars {@link List} of {@link Car} to be used for grouping   * @return {@link Map} with category as key and cars belonging to that category as value   */,getModelsAfter2000
364,"  void <extra_id_0>() {    appender.stop();  }  /**   * Test if executing the strategy gives the correct response.   */  @ParameterizedTest  @MethodSource(""dataProvider"")",tearDown
3136,"  public Optional<Customer> <extra_id_0>(int id) throws Exception {    ResultSet resultSet = null;    try (var connection = getConnection();         var statement = connection.prepareStatement(""SELECT * FROM CUSTOMERS WHERE ID = ?"")) {      statement.setInt(1, id);      resultSet = statement.executeQuery();      if (resultSet.next()) {        return Optional.of(createCustomer(resultSet));      } else {        return Optional.empty();      }    } catch (SQLException ex) {      throw new CustomException(ex.getMessage(), ex);    } finally {      if (resultSet != null) {        resultSet.close();      }    }  }  /**   * {@inheritDoc}   */  @Override",getById
757,  public void <extra_id_0>() {    isDrunk = true;  },getDrink
2357,"  private static MongodConfig <extra_id_0>() {    return MongodConfig.builder()            .version(Version.Main.PRODUCTION)            .net(new de.flapdoodle.embed.mongo.config.Net(TEST_HOST, TEST_PORT, true))            .build();  }",buildMongoConfig
623,  Fatigue <extra_id_0>() {    return model.getFatigue();  },getFatigue
2661,"  public void <extra_id_0>() {    var accountFrom = Optional.ofNullable(AccountAggregate.getAccount(accountNoFrom))        .orElseThrow(() -> new RuntimeException(""Account not found "" + accountNoFrom));    var accountTo = Optional.ofNullable(AccountAggregate.getAccount(accountNoTo))        .orElseThrow(() -> new RuntimeException(""Account not found "" + accountNoTo));    accountFrom.handleTransferFromEvent(this);    accountTo.handleTransferToEvent(this);  }",process
3624,"  <T> AsyncResult<T> <extra_id_0>(Callable<T> task, AsyncCallback<T> callback);  /**   * Ends processing of an async task. Blocks the current thread if necessary and returns the   * evaluated value of the completed task.   *   * @param asyncResult async result of a task   * @return evaluated value of the completed task   * @throws ExecutionException   if execution has failed, containing the root cause   * @throws InterruptedException if the execution is interrupted   */",startProcess
727,  private boolean <extra_id_0>() {    return MaintenanceLock.getInstance().isLock();  },isDownForMaintenance
692,"  void <extra_id_0>(Creature testedCreature, String name, Size size, Movement movement,                   Color color, Mass mass) {    assertEquals(mass, testedCreature.getMass());  }  @ParameterizedTest  @MethodSource(""dataProvider"")",testGetMass
3439,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObjectNoPaymentException1();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoExceptionShortMsgDuration
644,"  void <extra_id_0>() {    assertNull(ServiceLocator.getService(""fantastic/unicorn/service""));    assertNull(ServiceLocator.getService(""another/fantastic/unicorn/service""));  }  /**   * Verify if we get the same cached instance when requesting the same service twice   */  @Test",testGetNonExistentService
3678,  public void <extra_id_0>(final UserAccount userAccount) {    if (cache.contains(userAccount.getUserId())) {      dbManager.updateDb(userAccount);      // Cache data has been updated -- remove older      cache.invalidate(userAccount.getUserId());      // version from cache.    } else {      dbManager.writeToDb(userAccount);    }  }  /**   * Get user account using read-through cache with write-back policy.   * @param userId {@link String}   * @return {@link UserAccount}   */,writeAround
876,"  void <extra_id_0>(AbstractNioChannel channel, Object readObject, SelectionKey key);  /**   * Stops dispatching events and cleans up any acquired resources such as threads.   *   * @throws InterruptedException if interrupted while stopping dispatcher.   */",onChannelReadEvent
346,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1473,  void <extra_id_0>() {    albumListPage.navigateToPage();  }  @Test,setUp
1065,"  public String <extra_id_0>() {    return ""init an order"";  }",getName
1826,"  public void <extra_id_0>(Result<?> data, Worker w) {    //check if can receive..if yes:    collectResult(data, w.getWorkerId());  }",receiveData
3511,"  public void <extra_id_0>() {    this.handled = true;  }  /**   * Indicates if this request is handled or not.   *   * @return <tt>true</tt> when the request is handled, <tt>false</tt> if not   */",markHandled
171,  public static void <extra_id_0>(String[] args) throws Exception {    final var dataSource = createDataSource();    deleteSchema(dataSource);    createSchema(dataSource);    final var dao = new HotelDaoImpl(dataSource);    // Add rooms    addRooms(dao);    // Print room booking status    getRoomStatus(dao);    var hotel = new Hotel(dao);    // Book rooms    hotel.bookRoom(1);    hotel.bookRoom(2);    hotel.bookRoom(3);    hotel.bookRoom(4);    hotel.bookRoom(5);    hotel.bookRoom(6);    // Cancel booking for a few rooms    hotel.cancelRoomBooking(1);    hotel.cancelRoomBooking(3);    hotel.cancelRoomBooking(5);    getRoomStatus(dao);    deleteSchema(dataSource);  },main
50,"  public static void <extra_id_0>(String[] args) {    var commander = new Commander(        new Sergeant(new Soldier(), new Soldier(), new Soldier()),        new Sergeant(new Soldier(), new Soldier(), new Soldier())    );    commander.accept(new SoldierVisitor());    commander.accept(new SergeantVisitor());    commander.accept(new CommanderVisitor());  }",main
1320,  public boolean <extra_id_0>(Stats stat) {    return get(stat) != null;  }  @Override,has
660,"  public AbstractSelect<extra_id_0><T> or(AbstractSelector<T> other) {    return new DisjunctionSelector<>(this, other);  }",or
3161,    void <extra_id_0>() throws Exception {      assertFalse(dao.getById(getNonExistingCustomerId()).isPresent());    }  }  /**   * Represents the scenario when the DAO operations are being performed on an already existing   * customer.   */  @Nested,retrieveShouldReturnNoCustomer
1921,  void <extra_id_0>() {    assertDoesNotThrow(() -> BullyApp.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2639,"  void <extra_id_0>() {    assertThrows(IllegalArgumentException.class, () -> {      new PropertiesFeatureToggleVersion(null);    });  }  @Test",testNullPropertiesPassed
2705,"  public String <extra_id_0>() {    return ""Dwarf gold digger"";  }",name
2359,"  void <extra_id_0>() {    assertEquals(0, bank.getFunds(""foo""));    bank.setFunds(""foo"", 100);    assertEquals(100, bank.getFunds(""foo""));    bank.setFunds(""bar"", 150);    assertEquals(150, bank.getFunds(""bar""));    assertTrue(bank.transferFunds(50, ""bar"", ""foo""));    assertEquals(150, bank.getFunds(""foo""));    assertEquals(100, bank.getFunds(""bar""));  }",testInit
3655,"  public static void <extra_id_0>(String[] args) {    var vm = new VirtualMachine(        new Wizard(45, 7, 11, 0, 0),        new Wizard(36, 18, 8, 0, 0));    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));    vm.execute(InstructionConverterUtil.convertToByteCode(String.format(HEALTH_PATTERN, ""GET"")));    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));    vm.execute(InstructionConverterUtil.convertToByteCode(GET_AGILITY));    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_0));    vm.execute(InstructionConverterUtil.convertToByteCode(GET_WISDOM));    vm.execute(InstructionConverterUtil.convertToByteCode(ADD));    vm.execute(InstructionConverterUtil.convertToByteCode(LITERAL_2));    vm.execute(InstructionConverterUtil.convertToByteCode(DIVIDE));    vm.execute(InstructionConverterUtil.convertToByteCode(ADD));    vm.execute(InstructionConverterUtil.convertToByteCode(String.format(HEALTH_PATTERN, ""SET"")));  }",main
3383,  public static void <extra_id_0>(String[] args) throws Exception {    var amfc = new AppMessagingFailCases();    //amfc.messagingDatabaseUnavailableCasePaymentSuccess();    //amfc.messagingDatabaseUnavailableCasePaymentError();     //amfc.messagingDatabaseUnavailableCasePaymentFailure();     amfc.messagingSuccessCase();  },main
1040,"  public ChapterResult<K> <extra_id_0>(K value) {    LOGGER.info(""The chapter '{}' has been started. ""            + ""The data {} has been stored or calculated successfully"",        getName(), value);    return ChapterResult.success(value);  }  @Override",process
2544,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
34,"  void <extra_id_0>() {    assertTimeout(ofMillis(5000), () -> {      final var ballThread = new BallThread();      final var exceptionHandler = mock(UncaughtExceptionHandler.class);      ballThread.setUncaughtExceptionHandler(exceptionHandler);      ballThread.setTwin(mock(BallItem.class));      ballThread.start();      ballThread.interrupt();      ballThread.join();      verify(exceptionHandler).uncaughtException(eq(ballThread), any(RuntimeException.class));      verifyNoMoreInteractions(exceptionHandler);    });  }",testInterrupt
1640,"  public static void <extra_id_0>(String[] args) throws InterruptedException {    var bank = new Bank(ACCOUNT_NUM, BASE_AMOUNT);    var latch = new CountDownLatch(NUMBER_OF_THREADS);    var executorService = Executors.newFixedThreadPool(NUMBER_OF_THREADS);    for (int i = 0; i < NUMBER_OF_THREADS; i++) {      executorService.execute(() -> runner(bank, latch));    }    latch.await();  }",main
3008,"  public static void <extra_id_0>(String[] args) {    final var scene = new Scene();    var drawPixels1 = List.of(        new MutablePair<>(1, 1),        new MutablePair<>(5, 6),        new MutablePair<>(3, 2)    );    scene.draw(drawPixels1);    var buffer1 = scene.getBuffer();    printBlackPixelCoordinate(buffer1);    var drawPixels2 = List.of(        new MutablePair<>(3, 7),        new MutablePair<>(6, 1)    );    scene.draw(drawPixels2);    var buffer2 = scene.getBuffer();    printBlackPixelCoordinate(buffer2);  }",main
1974,"  void <extra_id_0>() {    final var target = mock(Target.class);    final var filterManager = new FilterManager();    verifyNoMoreInteractions(target);    final var filter = mock(Filter.class);    when(filter.execute(any(Order.class))).thenReturn(""filter"");    filterManager.addFilter(filter);    final Order order = mock(Order.class);    assertEquals(""filter"", filterManager.filterRequest(order));    verify(filter, times(1)).execute(any(Order.class));    verifyNoMoreInteractions(target, filter, order);  }",testAddFilter
3594,  public void <extra_id_0>(String movie) {    VideoStreamingService videoStreamingService = lookupService.getBusinessService(movie);    videoStreamingService.doProcessing();  },playbackMovie
2437,  public Content <extra_id_0>() {    return content;  },getContent
1638,"  void <extra_id_0>() {    bank.transfer(0, 1, 1000);    assertEquals(0, bank.getBalance(0));    assertEquals(2000, bank.getBalance(1));  }",ReturnBalanceWhenGivenAccountNumber
1316,      public void <extra_id_0>(Stats stat) {        // Does Nothing.      }    };  },remove
1421,  public void <extra_id_0>(O observer) {    this.observers.add(observer);  },addObserver
1624,  void <extra_id_0>() {    assertDoesNotThrow(() -> Mute.mute(this::methodNotThrowingAnyException));  }  @Test,muteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException
982,"  void <extra_id_0>() {    var core = new CustomerCore();    core.addRole(Role.Borrower);    var bRole = core.getRole(Role.Borrower, BorrowerRole.class);    assertTrue(bRole.isPresent());    assertTrue(core.remRole(Role.Borrower));    var empt = core.getRole(Role.Borrower, BorrowerRole.class);    assertFalse(empt.isPresent());  }  @Test",remRole
3498,"  public String <extra_id_0>() {    return ""Orc officer"";  }",name
1079,  public Object <extra_id_0>() {    return chapters.get(pos).getInValue();  }  /**   * set value to current chapter.   *   * @param value to set   */,getCurrentValue
2852,"  void <extra_id_0>() {    testCollision(        new SpaceStationMir(1, 1, 3, 4),        true, false,        false, false    );  }",testCollideSpaceStationMir
934,    public void <extra_id_0>() {      throw new UnsupportedOperationException();    }    @Override,lockInterruptibly
3725,  void <extra_id_0>() {    assertNotNull(app);    app.useReadAndWriteThroughStrategy();  }  @Test,testReadAndWriteThroughStrategy
3252,  BigInteger <extra_id_0>(String username);,getAuthorBooksCount
3761,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3414,"  public PaymentRequest <extra_id_0>(PaymentRequest r) {    return data.put(r.transactionId, r);  }  @Override",add
3704,  void <extra_id_0>();  /**   * Disconnect from DB.   */,connect
2866,"  void <extra_id_0>() {    Logger commanderLogger = (Logger) LoggerFactory.getLogger(Commander.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    commanderLogger.addAppender(listAppender);    final var commander = new Commander(new CommanderUnit(""CommanderUnitTest""));    commander.commanderReady();    List<ILoggingEvent> logsList = listAppender.list;    assertEquals(""[Commander] "" + commander.getUnit().getName() + "" is ready!"", logsList.get(0)        .getMessage());    assertEquals(Level.INFO, logsList.get(0)        .getLevel());  }",shouldExecuteCommanderReady
512,  public boolean <extra_id_0>(final int shardId) {    if (shardMap.containsKey(shardId)) {      shardMap.remove(shardId);      return true;    } else {      return false;    }  }  /**   * Get shard instance by provided shardId.   *   * @param shardId id of shard instance to get   * @return required shard instance   */,removeShardById
2869,"  void <extra_id_0>() {    final var unit = new SergeantUnit(""SergeantUnitName"");    assertNull(unit.getUnitExtension(""SoldierExtension""));    assertNotNull(unit.getUnitExtension(""SergeantExtension""));    assertNull(unit.getUnitExtension(""CommanderExtension""));  }",getUnitExtension
2345,"  void <extra_id_0>() {    var ticketId1 = new LotteryTicketId();    var ticketId2 = new LotteryTicketId();    var ticketId3 = new LotteryTicketId();    assertNotEquals(ticketId1, ticketId2);    assertNotEquals(ticketId2, ticketId3);    var ticketId4 = new LotteryTicketId(ticketId1.getId());    assertEquals(ticketId1, ticketId4);  }",testEquals
2559,    void <extra_id_0>() {        assertDoesNotThrow(() -> App.main(new String[]{}));    },shouldLaunchApp
1573,  void <extra_id_0>() {    assertDoesNotThrow((Executable) App::main);  },shouldExecuteWithoutException
1072,  String <extra_id_0>();  /**   * The operation executed in general case.   *   * @param saga incoming saga   * @return result {@link Saga}   */,getName
2708,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
857,  public abstract void <extra_id_0>() throws IOException;  /**   * Reads the data using the key and returns the read data. The underlying channel should be   * fetched using {@link SelectionKey#channel()}.   *   * @param key the key on which read event occurred.   * @return data read.   * @throws IOException if any I/O error occurs.   */,bind
1803,"  public static boolean <extra_id_0>(int[] a1, int[] a2) {    //compares if 2 arrays have the same value    if (a1.length != a2.length) {      return false;    } else {      var answer = false;      for (var i = 0; i < a1.length; i++) {        if (a1[i] == a2[i]) {          answer = true;        } else {          answer = false;          break;        }      }      return answer;    }  }  /**   * Method matricesSame compares 2 matrices @param m1 and @param m2 and @return whether their   * values are equal (boolean).   */",arraysSame
3168,"  void <extra_id_0>() {    customer = new Customer(ID, FIRSTNAME, LASTNAME);  }  @Test",setUp
1740,  void <extra_id_0>() {    viewModel.handleAction(new SubtractionCalculatorAction());  }  /**   * Handle multiplication action.   */,subtract
2766,"  public void <extra_id_0>() {    eventPool.entrySet().forEach(entry -> ((AsyncEvent) ((Map.Entry) entry).getValue()).stop());  }  /**   * Returns a pseudo-random number between min and max, inclusive. The difference between min and   * max can be at most   * <code>Integer.MAX_VALUE - 1</code>.   */",shutdown
804,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3533,"  void <extra_id_0>() {    Callback callback = () -> callingCount++;    var task = new SimpleTask();    assertEquals(Integer.valueOf(0), callingCount, ""Initial calling count of 0"");    task.executeWith(callback);    assertEquals(Integer.valueOf(1), callingCount, ""Callback called once"");    task.executeWith(callback);    assertEquals(Integer.valueOf(2), callingCount, ""Callback called twice"");  }",test
1462,"  public synchronized String <extra_id_0>() {    return String.format(""Pool available=%d inUse=%d"", available.size(), inUse.size());  }",toString
2952,"      public String <extra_id_0>() {        return ""Public{""            + ""id=""            + id            + "", name='""            + name            + '\''            + "", price=""            + price            + '}';      }    }    /**     * This is Private dto class for API response with the highest data security.     */    public static final class Private implements Id, Name, Price, Cost {      private Long id;      private String name;      private Double price;      private Double cost;      @Override      public Long getId() {        return id;      }      public Private setId(Long id) {        this.id = id;        return this;      }      @Override      public String getName() {        return name;      }      public Private setName(String name) {        this.name = name;        return this;      }      @Override      public Double getPrice() {        return price;      }      public Private setPrice(Double price) {        this.price = price;        return this;      }      @Override      public Double getCost() {        return cost;      }      public Private setCost(Double cost) {        this.cost = cost;        return this;      }      @Override      public String toString() {        return ""Private{""            +            ""id=""            + id            +            "", name='""            + name            + '\''            +            "", price=""            + price            +            "", cost=""            + cost            +            '}';      }    }  }  /**   * Use this interface whenever you want to provide the product Id in your DTO.   */  private interface Id {    /**     * Unique identifier of the product.     *     * @return : id of the product.     */    Long getId();  }  /**   * Use this interface whenever you want to provide the product Name in your DTO.   */  private interface Name {    /**     * The name of the product.     *     * @return : name of the product.     */    String getName();  }  /**   * Use this interface whenever you want to provide the product Price in your DTO.   */  private interface Price {    /**     * The amount we sell a product for.     * <b>This data is not confidential</b>     *     * @return : price of the product.     */    Double getPrice();  }  /**   * Use this interface whenever you want to provide the product Cost in your DTO.   */  private interface Cost {    /**     * The amount that it costs us to purchase this product     * For the amount we sell a product for, see the {@link Price Price} parameter.     * <b>This data is confidential</b>     *     * @return : cost of the product.     */    Double getCost();  }  /**   * Use this interface whenever you want to provide the product Supplier in your DTO.   */  private interface Supplier {    /**     * The name of supplier of the product or its manufacturer.     * <b>This data is highly confidential</b>     *     * @return : supplier of the product.     */    String getSupplier();  }}",toString
546,  public void <extra_id_0>(Spell spell) {    spell.setSpellbook(this);    spells.add(spell);  }  @Override,addSpell
1510,"  public AlbumPage <extra_id_0>() {    var saveButton = (HtmlSubmitInput) page.getElementById(""saveButton"");    try {      saveButton.click();    } catch (IOException e) {      LOGGER.error(""An error occurred on saveChanges."", e);    }    return this;  }",saveChanges
424,"  void <extra_id_0>() {    assertFalse((new User(1, ""janedoe"", ""iloveyou""))            .canEqual(""Other""));  }  @Test",testCanEqual
3448,  public static void <extra_id_0>(Queue<PrinterItem> printerItemsCollection) {    for (PrinterItem nextItem : printerQueue.getPrinterQueue()) {      if (nextItem.paperSize.equals(PaperSizes.A3)) {        // Encoding the policy into a Boolean: the A3 paper cannot be coloured and double-sided at the same time        var isNotColouredAndSingleSided = !nextItem.isColour && !nextItem.isDoubleSided;        if (isNotColouredAndSingleSided) {          printerItemsCollection.add(nextItem);        }      }    }  }  /**   * Adds A2 document jobs to the collecting parameter according to some policy that can be whatever the client   * (the print center) wants. The code is similar to the 'addA4Papers' method. The code can be changed to accommodate   * the wants of the client.   *   * @param printerItemsCollection the collecting parameter   */,addValidA3Papers
3590,"  public VideoStreamingService <extra_id_0>(String movie) {    if (movie.toLowerCase(Locale.ROOT).contains(""die hard"")) {      return netflixService;    } else {      return youTubeService;    }  }",getBusinessService
1015,  private ServiceDiscoveryService <extra_id_0>() {    return new ServiceDiscoveryService()        .discover(new Service1())        .discover(new Service2())        .discover(new Service3())        .discover(new Service4());  },serviceDiscovery
3438,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObject(false);            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderShortDuration2
1612,  public List<Book> <extra_id_0>() {    return designPatternBooks;  },load
2312,  public void <extra_id_0>() {    repository.deleteAll();  },resetLottery
3324,"  void <extra_id_0>() {    Server server = new Server(""localhost"", 8080);    Session session = server.getSession(""Session"");    assertEquals(""Session"", session.getClientName());  }",checkGetSession
1106,"  void <extra_id_0>() {    var stringPriorityMessageQueue = new PriorityMessageQueue<>(new Integer[2]);    stringPriorityMessageQueue.add(1);    stringPriorityMessageQueue.add(5);    stringPriorityMessageQueue.add(10);    stringPriorityMessageQueue.add(3);    assertEquals(10, (int) stringPriorityMessageQueue.remove());  }  @Test",add
1793,"  protected void <extra_id_0>() {    LOGGER.info(""Pretend nothing happened and just leave"");  }",doNothing
597,"  void <extra_id_0>() {    final var wizardDao = mock(WizardDao.class);    final var spellbookDao = mock(SpellbookDao.class);    final var spellDao = mock(SpellDao.class);    final var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    verifyNoInteractions(wizardDao, spellbookDao, spellDao);    service.findAllSpellbooks();    verify(spellbookDao).findAll();    verifyNoMoreInteractions(wizardDao, spellbookDao, spellDao);  }  @Test",testFindAllSpellbooks
3575,"  private void <extra_id_0>(HttpResponse<String> httpResponse) {    if (isSuccessResponse(httpResponse.statusCode())) {      LOGGER.info(""Image path received successfully"");    } else {      LOGGER.warn(""Image path request failed"");    }  }",logResponse
2528,"  public String <extra_id_0>() {    return ""an elven "" + weaponType;  }",toString
3044,"  public static void <extra_id_0>(String[] args) throws Exception {    // Create data source and create the customers, products and purchases tables    final var dataSource = createDataSource();    deleteSchema(dataSource);    createSchema(dataSource);    // create customer    var customerDao = new CustomerDaoImpl(dataSource);    var tom =        Customer.builder()            .name(""Tom"")            .money(Money.of(USD, 30))            .customerDao(customerDao)            .build();    tom.save();    // create products    var productDao = new ProductDaoImpl(dataSource);    var eggs =        Product.builder()            .name(""Eggs"")            .price(Money.of(USD, 10.0))            .expirationDate(LocalDate.now().plusDays(7))            .productDao(productDao)            .build();    var butter =        Product.builder()            .name(""Butter"")            .price(Money.of(USD, 20.00))            .expirationDate(LocalDate.now().plusDays(9))            .productDao(productDao)            .build();    var cheese =        Product.builder()            .name(""Cheese"")            .price(Money.of(USD, 25.0))            .expirationDate(LocalDate.now().plusDays(2))            .productDao(productDao)            .build();    eggs.save();    butter.save();    cheese.save();    // show money balance of customer after each purchase    tom.showBalance();    tom.showPurchases();    // buy eggs    tom.buyProduct(eggs);    tom.showBalance();    // buy butter    tom.buyProduct(butter);    tom.showBalance();    // trying to buy cheese, but receive a refusal    // because he didn't have enough money    tom.buyProduct(cheese);    tom.showBalance();    // return butter and get money back    tom.returnProduct(butter);    tom.showBalance();    // Tom can buy cheese now because he has enough money    // and there is a discount on cheese because it expires in 2 days    tom.buyProduct(cheese);    tom.save();    // show money balance and purchases after shopping    tom.showBalance();    tom.showPurchases();  }",main
3759,  void <extra_id_0>() {    final var sword = spy(new Sword(mock(FlyingEnchantment.class)));    testBasicWeaponActions(sword);  },testSword
2033,"  void <extra_id_0>() {    CompletableFuture<Health> future = new CompletableFuture<>();    when(asynchronousHealthChecker.performCheck(any(Supplier.class), eq(timeoutInSeconds)))        .thenReturn(future);    // Simulate a database exception during the transaction    doThrow(new RuntimeException(""DB exception""))        .when(healthCheckRepository)        .performTestTransaction();    // Complete the future exceptionally to simulate a failure in the health check    future.completeExceptionally(new RuntimeException(""DB exception""));    Health health = healthIndicator.health();    // Check that the health status is DOWN    assertEquals(Status.DOWN, health.getStatus());  }  /**   * Test case for the `health()` method when the health check times out.   *   * <p>Asserts that when the `health()` method is called and the health check times out, it returns   * a Health object with Status.DOWN.   */  @Test",whenDatabaseTransactionFails_thenHealthIsDown
258,"  public boolean <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic check zero {}"", VERSION);    return !source.ifNonZero(nums);  }",ifHasZero
3531,"  public static List<Car> <extra_id_0>(List<Person> persons) {    List<Car> cars = new ArrayList<>();    for (Person person : persons) {      cars.addAll(person.getCars());    }    List<Car> sedanCars = new ArrayList<>();    for (Car car : cars) {      if (Category.SEDAN.equals(car.getCategory())) {        sedanCars.add(car);      }    }    sedanCars.sort(new Comparator<Car>() {      @Override      public int compare(Car o1, Car o2) {        return o1.getYear() - o2.getYear();      }    });    return sedanCars;  }",getSedanCarsOwnedSortedByDate
3867,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(App.class, args);  }",main
2702,"  public void <extra_id_0>() {    LOGGER.info(""{} moves gold chunks out of the mine."", name());  }  @Override",work
326,    SpellStep <extra_id_0>(String wizardClass);  }  /**   * This step is in charge of the weapon. Weapon choice : Next Step available : AbilityStep No   * weapon choice : Next Step available : BuildStep   */,wizardClass
92,  void <extra_id_0>(T entity);  /**   * All UnitOfWork operations batched together executed in commit only.   */,registerDeleted
1184,  public Warlord <extra_id_0>() {    return warlord.copy();  }  /**   * Create beast.   */,createWarlord
2779,  public final void <extra_id_0>(final ThreadCompleteListener listener) {    this.eventListener = listener;  },addListener
2194,"  void <extra_id_0>() {    var iter = new BstIterator<>(nonEmptyRoot);    assertEquals(Integer.valueOf(1), iter.next().getVal(), ""First Node is 1."");    assertEquals(Integer.valueOf(3), iter.next().getVal(), ""Second Node is 3."");    assertEquals(Integer.valueOf(4), iter.next().getVal(), ""Third Node is 4."");    assertEquals(Integer.valueOf(5), iter.next().getVal(), ""Fourth Node is 5."");    assertEquals(Integer.valueOf(6), iter.next().getVal(), ""Fifth Node is 6."");    assertEquals(Integer.valueOf(7), iter.next().getVal(), ""Sixth Node is 7."");  }  @Test",nextOverEntirePopulatedTree
1498,"  void <extra_id_0>() {    var albumListPage = loginPage        .enterUsername(""admin"")        .enterPassword(""password"")        .login();    albumListPage.navigateToPage();    assertTrue(albumListPage.isAt());  }",testLogin
3386,  protected String <extra_id_0>() {    StringBuilder random = new StringBuilder();    while (random.length() < 12) { // length of the random string.      int index = (int) (RANDOM.nextFloat() * ALL_CHARS.length());      random.append(ALL_CHARS.charAt(index));    }    String id = random.toString();    if (USED_IDS.get(id) != null) {      while (USED_IDS.get(id)) {        id = generateId();      }    }    return id;  },generateId
2712,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
1331,"  public char[] <extra_id_0>(String input) {    var characters = input.toCharArray();    var string = Arrays.toString(characters);    LOGGER.info(        String.format(""Current handler: %s, input is %s of type %s, output is %s, of type %s"",            ConvertToCharArrayHandler.class, input, String.class, string, Character[].class)    );    return characters;  }",process
3313,"  LetterComposite <extra_id_0>() {    var words = List.of(        new Word('M', 'u', 'c', 'h'),        new Word('w', 'i', 'n', 'd'),        new Word('p', 'o', 'u', 'r', 's'),        new Word('f', 'r', 'o', 'm'),        new Word('y', 'o', 'u', 'r'),        new Word('m', 'o', 'u', 't', 'h')    );    return new Sentence(words);  }",messageFromElves
2867,"  void <extra_id_0>() {    final var unit = new SoldierUnit(""SoldierUnitName"");    assertNotNull(unit.getUnitExtension(""SoldierExtension""));    assertNull(unit.getUnitExtension(""SergeantExtension""));    assertNull(unit.getUnitExtension(""CommanderExtension""));  }",getUnitExtension
3074,"    void <extra_id_0>() {        product.setPrice(Money.of(USD, 200.0));        customer.buyProduct(product);        assertEquals(customer.getPurchases(), new ArrayList<>());        assertEquals(customer.getMoney(), Money.of(USD,100));        product.setPrice(Money.of(USD, 100.0));        customer.buyProduct(product);        assertEquals(new ArrayList<>(Arrays.asList(product)), customer.getPurchases());        assertEquals(Money.zero(USD), customer.getMoney());    }    @Test",shouldAddProductToPurchases
662,  public boolean <extra_id_0>(Creature t) {    return t.getSize().equals(size);  },test
2814,"  public void <extra_id_0>(SpaceStationIss iss) {    LOGGER.info(AppConstants.HITS, "" {} is damaged!"", iss.getClass().getSimpleName(),        this.getClass().getSimpleName(), this.getClass().getSimpleName());    setDamaged(true);  }",collisionResolve
2392,  public Stream<Arguments> <extra_id_0>() {    return prepareParameters(Integer::sum);  }  /**   * Create a new test instance using the given test parameters and expected result   */,expressionProvider
3557,  void <extra_id_0>(State state);  // Attempt to fetch response from the remote service.,setState
493,    protected int <extra_id_0>(Data data) {      return 0;    }  }},allocateShard
272,"  void <extra_id_0>() {    assertEquals(0, source.accumulateMul(-1, 0, 1));  }",testAccumulateMul
1601,"  void <extra_id_0>() {    assertEquals(testBook, testBookTwo);  }  @Test",testEquals
3106,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
441,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""iloveyou"");    assertEquals(String.format(""User(id=%s, username=%s, password=%s)"",            user.getId(), user.getUsername(), user.getPassword()),            user.toString());  }",testToString
3124,"  void <extra_id_0>() {    layerA.addAccountInfo(SERVICE);    var layerB = new LayerB(layerA);    var layerC = new LayerC(layerB);    layerC.addSearchInfo(SERVICE);    ServiceContext context = layerC.getContext();    assertEquals(SERVICE, context.getAccountService());    assertNull(context.getSessionService());    assertEquals(SERVICE, context.getSearchService());  }  @Test",testScopedDataPassedBetweenLayers
2798,  boolean <extra_id_0>() throws Exception;,deleteSchema
1434,  public String <extra_id_0>() {    return type;  },getType
53,  void <extra_id_0>(Commander commander);,visit
935,    public boolean <extra_id_0>() {      throw new UnsupportedOperationException();    }    @Override,tryLock
3144,  boolean <extra_id_0>(Customer customer) throws Exception;,delete
1125,  private T <extra_id_0>(int parentIndex) {    return queue[leftChildIndex(parentIndex)];  },left
3003,"  void <extra_id_0>() throws Exception {    var printerController = new PrinterController(new EpsonPrinter());    printerController.print(MESSAGE);    assertEquals(""Epson Printer : Test Message Printed"", appender.getLastMessage());  }  /**   * Logging Appender   */",testEpsonPrinter
1966,"  void <extra_id_0>() {    var g = new GuardedQueue();    var executorService = Executors.newFixedThreadPool(2);    executorService.submit(() -> value = g.get());    executorService.submit(() -> g.put(10));    executorService.shutdown();    try {      executorService.awaitTermination(30, TimeUnit.SECONDS);    } catch (InterruptedException e) {      e.printStackTrace();    }    assertEquals(Integer.valueOf(10), value);  }  @Test",testGet
1221,"  public static DisplayedAlbums <extra_id_0>() {    var titleList = new String[]{""HQ"", ""The Rough Dancer and Cyclical Night"",                                 ""The Black Light"", ""Symphony No.5""};    var artistList = new String[]{""Roy Harper"", ""Astor Piazzola"",                                  ""The Black Light"", ""CBSO""};    var isClassicalList = new boolean[]{false, false, false, true};    var composerList = new String[]{null, null, null, ""Sibelius""};    var result = new DisplayedAlbums();    for (var i = 1; i <= titleList.length; i++) {      result.addAlbums(titleList[i - 1], artistList[i - 1],              isClassicalList[i - 1], composerList[i - 1]);    }    return result;  }  /**   * constructor method.   *   * @param dataOfAlbums the data of all the albums   */",albumDataSet
895,"  void <extra_id_0>() throws IOException, InterruptedException {    LOGGER.info(""testAppUsingSameThreadDispatcher start"");    var app = new App(new SameThreadDispatcher());    app.start();    assertNotNull(app);    var client = new AppClient();    client.start();    assertNotNull(client);    // allow clients to send requests. Artificial delay.    try {      Thread.sleep(2000);    } catch (InterruptedException e) {      LOGGER.error(""sleep interrupted"", e);    }    client.stop();    app.stop();    LOGGER.info(""testAppUsingSameThreadDispatcher stop"");  }",testAppUsingSameThreadDispatcher
779,"  void <extra_id_0>() {    final var royalty = mock(Royalty.class);    final var servant = new Servant(""test"");    servant.giveWine(royalty);    verify(royalty).getDrink();    verifyNoMoreInteractions(royalty);  }  @Test",testGiveWine
2309,    public int <extra_id_0>() {      return randomIterator.nextInt();    }  }},nextInt
231,  private void <extra_id_0>() {    try {      int lag = new SecureRandom().nextInt(200) + 50;      Thread.sleep(lag);    } catch (InterruptedException e) {      LOGGER.error(e.getMessage());      Thread.currentThread().interrupt();    }  }  /**   * Update internal status. The update method pattern invoke update method for   * each entity in the game.   */,processInput
1526,"  void <extra_id_0>() {    var drunkKing = RoyaltyObjectMother.createDrunkKing();    var happyDrunkKing = RoyaltyObjectMother.createHappyDrunkKing();    var happyKing = RoyaltyObjectMother.createHappyKing();    var soberUnhappyKing = RoyaltyObjectMother.createSoberUnhappyKing();    assertEquals(drunkKing.getClass(), King.class);    assertEquals(happyDrunkKing.getClass(), King.class);    assertEquals(happyKing.getClass(), King.class);    assertEquals(soberUnhappyKing.getClass(), King.class);  }",testKingType
1038,    public String <extra_id_0>() {      return name;    }  }},getName
3328,"  public static GameObject <extra_id_0>() {    return new GameObject(            new DemoInputComponent(),        new ObjectPhysicComponent(),        new ObjectGraphicComponent(),        ""npc"");  }  /**   * Updates the three components of the NPC object used in the demo in App.java   * note that this is simply a duplicate of update() without the key event for   * demonstration purposes.   *   * <p>This method is usually used in games if the player becomes inactive.   */",createNpc
2837,"  void <extra_id_0>() {    testCollision(        new Meteoroid(1, 1, 3, 4),        false, false,        false, false    );  }  /**   * Test what happens we collide with ISS   */  @Test",testCollideMeteoroid
3839,"  public String <extra_id_0>() {    return ""Zoom modem"";  }",toString
2621,"  private static Class<?> <extra_id_0>(String request) {    try {      return Class.forName(""com.iluwatar.front.controller."" + request + ""Command"");    } catch (ClassNotFoundException e) {      return UnknownCommand.class;    }  }",getCommandClass
2320,"  public int <extra_id_0>(String bankAccount) {    return accounts.getOrDefault(bankAccount, 0);  }  @Override",getFunds
3047,  private static void <extra_id_0>(DataSource dataSource) throws SQLException {    try (var connection = dataSource.getConnection();        var statement = connection.createStatement()) {      statement.execute(CREATE_SCHEMA_SQL);    }  },createSchema
1166,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2416,  public static Dispatcher <extra_id_0>() {    return instance;  },getInstance
1284,  public static void <extra_id_0>(String[] args) throws InterruptedException {    var app = new App();    try {      app.promiseUsage();    } finally {      app.stop();    }  },main
1139,  public String <extra_id_0>() {    return body;  },getBody
3748,  void <extra_id_0>();,onDeactivate
1943,  public boolean <extra_id_0>(int leaderId) {    var leaderInstance = instanceMap.get(leaderId);    var alive = leaderInstance.isAlive();    return alive;  }  /**   * Send election message to the next instance.   *   * @param currentId currentID   * @param content   list contains all the IDs of instances which have received this election   *                  message.   * @return {@code true} if the election message is accepted by the target instance.   */  @Override,sendHeartbeatMessage
1172,"  void <extra_id_0>() {    assertThrows(UnsupportedOperationException.class, POISON_PILL::getHeaders);  }  @Test",testGetHeaders
3589,"  public static void <extra_id_0>(String[] args) {    // prepare the objects    var businessDelegate = new BusinessDelegate();    var businessLookup = new BusinessLookup();    businessLookup.setNetflixService(new NetflixService());    businessLookup.setYouTubeService(new YouTubeService());    businessDelegate.setLookupService(businessLookup);    // create the client and use the business delegate    var client = new MobileClient(businessDelegate);    client.playbackMovie(""Die Hard 2"");    client.playbackMovie(""Maradona: The Greatest Ever"");  }",main
3643,"  void <extra_id_0>() {    var instruction = """";    var bytecode = InstructionConverterUtil.convertToByteCode(instruction);    Assertions.assertEquals(0, bytecode.length);  }  @Test",testEmptyInstruction
503,"  public static void <extra_id_0>(String[] args) {    var data1 = new Data(1, ""data1"", Data.DataType.TYPE_1);    var data2 = new Data(2, ""data2"", Data.DataType.TYPE_2);    var data3 = new Data(3, ""data3"", Data.DataType.TYPE_3);    var data4 = new Data(4, ""data4"", Data.DataType.TYPE_1);    var shard1 = new Shard(1);    var shard2 = new Shard(2);    var shard3 = new Shard(3);    var manager = new LookupShardManager();    manager.addNewShard(shard1);    manager.addNewShard(shard2);    manager.addNewShard(shard3);    manager.storeData(data1);    manager.storeData(data2);    manager.storeData(data3);    manager.storeData(data4);    shard1.clearData();    shard2.clearData();    shard3.clearData();    var rangeShardManager = new RangeShardManager();    rangeShardManager.addNewShard(shard1);    rangeShardManager.addNewShard(shard2);    rangeShardManager.addNewShard(shard3);    rangeShardManager.storeData(data1);    rangeShardManager.storeData(data2);    rangeShardManager.storeData(data3);    rangeShardManager.storeData(data4);    shard1.clearData();    shard2.clearData();    shard3.clearData();    var hashShardManager = new HashShardManager();    hashShardManager.addNewShard(shard1);    hashShardManager.addNewShard(shard2);    hashShardManager.addNewShard(shard3);    hashShardManager.storeData(data1);    hashShardManager.storeData(data2);    hashShardManager.storeData(data3);    hashShardManager.storeData(data4);    shard1.clearData();    shard2.clearData();    shard3.clearData();  }",main
158,  void <extra_id_0>() throws Exception {    hotel.bookRoom(1);    assertTrue(dao.getById(1).get().isBooked());  }  @Test(),bookingRoomShouldChangeBookedStatusToTrue
3422,"    private Commander <extra_id_0>() {        PaymentService paymentService = new PaymentService                (new PaymentDatabase());        var shippingService = new ShippingService(new ShippingDatabase());        var messagingService = new MessagingService(new MessagingDatabase());        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new IllegalStateException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new IllegalStateException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectNoPaymentException1
1727,  void <extra_id_0>() {    stub.setFileName(null);    presenter.start();    presenter.fileNameChanged();    presenter.confirmed();    assertFalse(loader.isLoaded());    assertFalse(stub.dataDisplayed());  },testNullFile
375,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
760,  public boolean <extra_id_0>() {    return isHappy;  },getMood
2263,"  public Map<LotteryTicketId, LotteryTicket> <extra_id_0>() {    return ticketsCollection        .find(new Document())        .into(new ArrayList<>())        .stream()        .map(this::docToTicket)        .collect(Collectors.toMap(LotteryTicket::getId, Function.identity()));  }  @Override",findAll
355,"  public void <extra_id_0>() {    LOGGER.info(""You cast the spell of disintegration and the dragon vaporizes in a pile of dust!"");  }",execute
2536,  public final List<Potion> <extra_id_0>() {    return List.copyOf(this.bottomShelf);  }  /**   * Drink all the potions.   */,getBottomShelf
307,  public static void <extra_id_0>(String[] args) {    var thief = new HalflingThief(new HitAndRunMethod());    thief.steal();    thief.changeMethod(new SubtleMethod());    thief.steal();  },main
1484,"  public LoginPage <extra_id_0>(String password) {    var passwordInputPasswordField = (HtmlPasswordInput) page.getElementById(""password"");    passwordInputPasswordField.setText(password);    return this;  }  /**   * Clicking on the login button to 'login'   *   * @return {@link AlbumListPage} - this is the page that user gets navigated to once successfully   *     logged in   */",enterPassword
3051,"  public Optional<Customer> <extra_id_0>(String name) throws SQLException {    var sql = ""select * from CUSTOMERS where name = ?;"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, name);      ResultSet rs = preparedStatement.executeQuery();      if (rs.next()) {        return Optional.of(            Customer.builder()                .name(rs.getString(""name""))                .money(Money.of(USD, rs.getBigDecimal(""money"")))                .customerDao(this)                .build());      } else {        return Optional.empty();      }    }  }  @Override",findByName
2083,  void <extra_id_0>() {    appender = new InMemoryAppender(CakeViewImpl.class);  }  @AfterEach,setUp
1087,  boolean <extra_id_0>() {    return pos >= 0 && pos < chapters.size();  },isPresent
3056,  public void <extra_id_0>() {    try {      Optional<Product> product = productDao.findByName(name);      if (product.isPresent()) {        productDao.update(this);      } else {        productDao.save(this);      }    } catch (SQLException ex) {      LOGGER.error(ex.getMessage());    }  }  /**   * Calculate sale price of product with discount.   */,save
1738,"  void <extra_id_0>() {    LOGGER.info(        ""Total value = {}"",        viewModel.getCalculatorModel().getOutput().toString()    );  }  /**   * Handle addition action.   */",displayTotal
2501,          public E <extra_id_0>() {            initialize();            while (currentIndex < stopIndex && fromIterator.hasNext()) {              currentIndex++;              fromIterator.next();            }            if (currentIndex >= stopIndex && fromIterator.hasNext()) {              return fromIterator.next();            }            return null;          },computeNext
1728,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
545,  public void <extra_id_0>(Set<Spell> spells) {    this.spells = spells;  },setSpells
1467,"  void <extra_id_0>() {    assertTimeout(ofMillis(5000), () -> {      final var pool = new OliphauntPool();      assertEquals(pool.toString(), ""Pool available=0 inUse=0"");      final var firstOliphaunt = pool.checkOut();      assertEquals(pool.toString(), ""Pool available=0 inUse=1"");      final var secondOliphaunt = pool.checkOut();      assertEquals(pool.toString(), ""Pool available=0 inUse=2"");      assertNotSame(firstOliphaunt, secondOliphaunt);      assertEquals(firstOliphaunt.getId() + 1, secondOliphaunt.getId());      // After checking in the second, we should get the same when checking out a new oliphaunt ...      pool.checkIn(secondOliphaunt);      assertEquals(pool.toString(), ""Pool available=1 inUse=1"");      final var oliphaunt3 = pool.checkOut();      assertEquals(pool.toString(), ""Pool available=0 inUse=2"");      assertSame(secondOliphaunt, oliphaunt3);      // ... and the same applies for the first one      pool.checkIn(firstOliphaunt);      assertEquals(pool.toString(), ""Pool available=1 inUse=1"");      final var oliphaunt4 = pool.checkOut();      assertEquals(pool.toString(), ""Pool available=0 inUse=2"");      assertSame(firstOliphaunt, oliphaunt4);      // When both oliphaunt return to the pool, we should still get the same instances      pool.checkIn(firstOliphaunt);      assertEquals(pool.toString(), ""Pool available=1 inUse=1"");      pool.checkIn(secondOliphaunt);      assertEquals(pool.toString(), ""Pool available=2 inUse=0"");      // The order of the returned instances is not determined, so just put them in a list      // and verify if both expected instances are in there.      final var oliphaunts = List.of(pool.checkOut(), pool.checkOut());      assertEquals(pool.toString(), ""Pool available=0 inUse=2"");      assertTrue(oliphaunts.contains(firstOliphaunt));      assertTrue(oliphaunts.contains(secondOliphaunt));    });  }",testConcurrentCheckinCheckout
3811,  public Castle <extra_id_0>() {    return new OrcCastle();  }  @Override,createCastle
3115,"  private static User <extra_id_0>(UserDto dto) {    return new User(dto.getFirstName(), dto.getLastName(), dto.isActive(), dto.getEmail());  }",convertToEntity
1466,"  void <extra_id_0>() {    assertTimeout(ofMillis(5000), () -> {      final var pool = new OliphauntPool();      assertEquals(""Pool available=0 inUse=0"", pool.toString());      final var expectedOliphaunt = pool.checkOut();      assertEquals(""Pool available=0 inUse=1"", pool.toString());      pool.checkIn(expectedOliphaunt);      assertEquals(""Pool available=1 inUse=0"", pool.toString());      for (int i = 0; i < 100; i++) {        final var oliphaunt = pool.checkOut();        assertEquals(""Pool available=0 inUse=1"", pool.toString());        assertSame(expectedOliphaunt, oliphaunt);        assertEquals(expectedOliphaunt.getId(), oliphaunt.getId());        assertEquals(expectedOliphaunt.toString(), oliphaunt.toString());        pool.checkIn(oliphaunt);        assertEquals(""Pool available=1 inUse=0"", pool.toString());      }    });  }  /**   * Use the same object 100 times subsequently. This should not take much time since the heavy   * object instantiation is done only once. Verify if we get the same object each time.   */  @Test",testSubsequentCheckinCheckout
2529,  Weapon <extra_id_0>(WeaponType weaponType);,manufactureWeapon
2010,  public String <extra_id_0>() {    return address;  },getAddress
1731,  private CalculatorModel <extra_id_0>(List<CalculatorAction> actions) {    CalculatorViewModel viewModel = new CalculatorViewModel();    for (CalculatorAction action : actions) {      viewModel.handleAction(action);    }    return viewModel.getCalculatorModel();  }  @Test,modelAfterExecutingActions
1403,"  void <extra_id_0>() {    appender.stop();  }  /**   * Add a {@link WeatherObserver}, verify if it gets notified of a weather change, remove the   * observer again and verify that there are no more notifications.   */  @Test",tearDown
2899,  int <extra_id_0>();,getAttackPower
790,  void <extra_id_0>() {    final var queen = new Queen();    queen.setFlirtiness(false);    queen.changeMood();    assertFalse(queen.getMood());  }  @Test,testNotFlirtyUncomplemented
633,  int <extra_id_0>();  /*   * The workflow method that defines what this service does   */,getId
3288,  public static DataBus <extra_id_0>() {    return INSTANCE;  }  /**   * Register a member with the data-bus to start receiving events.   *   * @param member The member to register   */,getInstance
1760,  public String <extra_id_0>() {    return NAME;  },getName
2085,"  void <extra_id_0>() {    final var layers = List.of(            new CakeLayerInfo(""layer1"", 1000),            new CakeLayerInfo(""layer2"", 2000),            new CakeLayerInfo(""layer3"", 3000));    final var cake = new CakeInfo(new CakeToppingInfo(""topping"", 1000), layers);    final var cakes = List.of(cake);    final var bakingService = mock(CakeBakingService.class);    when(bakingService.getAllCakes()).thenReturn(cakes);    final var cakeView = new CakeViewImpl(bakingService);    assertEquals(0, appender.getLogSize());    cakeView.render();    assertEquals(cake.toString(), appender.getLastMessage());  }",testRender
2946,      public Long <extra_id_0>() {        return id;      },getId
1785,"  void <extra_id_0>() {    elf = new Elf(""Elf test"");    orc = new Orc(""Orc test"");    sword = new SwordOfAragorn();  }  @Test",init
2200,"  void <extra_id_0>() {    controller.moveBullet(1.5f);    assertEquals(1.5f, controller.bullet.getPosition(), 0);  }  @Test",testMoveBullet
2657,  public static void <extra_id_0>() {    accounts = new HashMap<>();  },resetState
1327,  void <extra_id_0>(Stats stat);,remove
700,"  void <extra_id_0>() {    final Logger LOGGER = (Logger) LoggerFactory.getLogger(InsufficientFunds.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    LOGGER.addAppender(listAppender);    receipt = applicationServices.loggedInUserPurchase(""ignite1771"", ""car"");    receipt.show();    List<ILoggingEvent> loggingEventList = listAppender.list;    assertEquals(""Insufficient funds: 1000.0 of user: ignite1771 for buying item: car""        , loggingEventList.get(0).getMessage());    assertEquals(Level.INFO, loggingEventList.get(0).getLevel());  }  @Test",testInsufficientFunds
1222,"  public void <extra_id_0>(final int albumNumber) {    LOGGER.info(""Change select number from {} to {}"",            this.selectedAlbumNumber, albumNumber);    this.selectedAlbumNumber = albumNumber;    this.selectedAlbum = data.getAlbums().get(this.selectedAlbumNumber - 1);  }  /**   * get the title of selected album.   *   * @return the tile of selected album.   */",setSelectedAlbumNumber
460,"  void <extra_id_0>() {    assertThrows(InvalidParameterException.class, () -> {      new BarCustomer(""sirBrave"", -1, new CallsCount());    });  }",constructorTest
2571,  List<? extends ProbableThreat> <extra_id_0>();  /**   * {@inheritDoc}   * @return {@link Filterer}   */  @Override,threats
693,"  void <extra_id_0>(Creature testedCreature, String name, Size size, Movement movement,                    Color color, Mass mass) {    final var toString = testedCreature.toString();    assertNotNull(toString);    assertEquals(String        .format(""%s [size=%s, movement=%s, color=%s, mass=%s]"", name, size, movement, color, mass), toString);  }",testToString
1877,  public String <extra_id_0>() {    return title;  },toString
1908,"  void <extra_id_0>() {    var instance1 = new RingInstance(null, 1, 1);    Map<Integer, Instance> instanceMap = Map.of(1, instance1);    var messageManager = new RingMessageManager(instanceMap);    assertTrue(messageManager.sendHeartbeatMessage(1));  }  @Test",testSendHeartbeatMessage
481,"  void <extra_id_0>() {    // Create several instances in the same calling thread    var instance1 = this.singletonInstanceMethod.get();    var instance2 = this.singletonInstanceMethod.get();    var instance3 = this.singletonInstanceMethod.get();    // now check they are equal    assertSame(instance1, instance2);    assertSame(instance1, instance3);    assertSame(instance2, instance3);  }  /**   * Test singleton instance in a concurrent setting.   */  @Test",testMultipleCallsReturnTheSameObjectInSameThread
2411,  String <extra_id_0>();,getDescription
1240,"  void <extra_id_0>() {    final var stew = new Stew(1, 2, 3, 4);    stew.mix();    assertEquals(""Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers"", appender        .getLastMessage());    stew.taste();    assertEquals(""Tasting the stew"", appender.getLastMessage());    stew.mix();    assertEquals(""Mixing the stew we find: 0 potatoes, 1 carrots, 2 meat and 3 peppers"", appender        .getLastMessage());  }",testDrink
1749,  public String <extra_id_0>() {    return TAG;  },tag
2283,"  public void <extra_id_0>(PlayerDetails details, int prizeAmount) {    LOGGER.info(""Lottery ticket for {} has won! The bank account {} was deposited with {} credits."",        details.getEmail(), details.getBankAccount(), prizeAmount);  }  @Override",ticketWon
2694,"  public <E extends Event> void <extra_id_0>(      Class<E> eventType,      Handler<E> handler  ) {    handlers.put(eventType, handler);  }  /**   * Dispatches an {@link Event} depending on its type.   *   * @param event The {@link Event} to be dispatched   */  @SuppressWarnings(""unchecked"")",registerHandler
1151,  String <extra_id_0>(Headers header);,getHeader
3127,  public void <extra_id_0>(String searchService) {    context.setSearchService(searchService);  },addSearchInfo
3207,"    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertEquals(""DEFAULT_NAME"", newBean.getName());        newBean.setName(""TEST_NAME_ONE"");        assertEquals(""TEST_NAME_ONE"", newBean.getName());    }    @Test",testNameGetterSetter
1483,"  public LoginPage <extra_id_0>(String username) {    var usernameInputTextField = (HtmlTextInput) page.getElementById(""username"");    usernameInputTextField.setText(username);    return this;  }  /**   * Enters the password into the password input password field   *   * @param password the password to enter   * @return {@link LoginPage}   */",enterUsername
1223,  public String <extra_id_0>() {    return selectedAlbum.getTitle();  }  /**   * set the title of selected album.   *   * @param value the title which user want to user.   */,getTitle
425,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""iloveyou"");    assertTrue(user.canEqual(new User(1, ""janedoe"",            ""iloveyou"")));  }  @Test",testCanEqual2
2772,  void <extra_id_0>();,start
3400,"  public MessageRequest <extra_id_0>(MessageRequest r) {    return data.put(r.reqId, r);  }  @Override",add
1150,"  void <extra_id_0>(Headers header, String value);",addHeader
562,  public void <extra_id_0>(String name) {    this.name = name;  },setName
1671,  public void <extra_id_0>(Nourishment nourishment) {    this.giant.setNourishment(nourishment);  },setNourishment
2361,"  public void <extra_id_0>(Person person) {    Optional<Person> elem = personList.stream().filter(p -> p.getPersonNationalId() == person.getPersonNationalId()).findFirst();    if (elem.isPresent()) {      LOGGER.info(""Record already exists."");      return;    }    personList.add(person);  }  @Override",insert
585,"  void <extra_id_0>() {    for (int i = 0; i < INITIAL_COUNT; i++) {      final var className = dao.persistentClass.getSimpleName();      final var entityName = String.format(""%s%d"", className, ID_GENERATOR.incrementAndGet());      this.dao.persist(this.factory.apply(entityName));    }  }  @AfterEach",setUp
1596,  public final int <extra_id_0>() {    return SERVERS.size();  },getNoOfServers
2230,  public void <extra_id_0>() {    status = GameStatus.STOPPED;  }  /**   * Check if game is running or not.   *   * @return {@code true} if the game is running.   */,stop
1561,"  void <extra_id_0>() {    var john = new User(""John"", 17, Sex.MALE, ""john@qwe.bar"");    assertThrows(        IllegalStateException.class,        () -> Validator.of(john)            .validate(User::name, Objects::nonNull, ""name cannot be null"")            .validate(User::age, age -> age > 21, ""user is underage"")            .get()    );  }  @Test",testForInvalidAge
3411,  public QueueTask <extra_id_0>() throws IsEmptyException {    return this.data.peek();  }  /**   * dequeue method removes the object at front and returns it.   *   * @return object at front of queue   * @throws IsEmptyException             if queue is empty   */,peek
95,"  void <extra_id_0>() throws JsonParseException {    var is = this.getClass().getClassLoader().getResourceAsStream(""candy.json"");    var reader = new InputStreamReader(is);    var json = (JsonObject) com.google.gson.JsonParser.parseReader(reader);    var array = (JsonArray) json.get(""candies"");    for (var item : array) {      var candy = (JsonObject) item;      var name = candy.get(""name"").getAsString();      var parentName = candy.get(""parent"").getAsString();      var t = candy.get(""type"").getAsString();      var type = Type.CRUSHABLE_CANDY;      if (t.equals(""rewardFruit"")) {        type = Type.REWARD_FRUIT;      }      var points = candy.get(""points"").getAsInt();      var c = new Candy(name, parentName, type, points);      this.candies.put(name, c);    }    setParentAndPoints();  }",parse
2654,  abstract DomainEvent <extra_id_0>();,readNext
1355,"  public static SignupModel <extra_id_0>() {    SignupModel model = new SignupModel();    model.setName(""Lily"");    model.setEmail(""lily@email.com"");    model.setPassword(""password1234"");    return model;  }",retrieveSignupData
3407,  T <extra_id_0>() throws IsEmptyException {    if (isEmpty()) {      throw new IsEmptyException();    } else {      var temp = front;      front = front.next;      size = size - 1;      return temp.value;    }  },dequeue
3527,  public static List<Car> <extra_id_0>(List<Person> persons) {    return persons.stream().map(Person::getCars).flatMap(List::stream)        .filter(car -> Category.SEDAN.equals(car.getCategory()))        .sorted(Comparator.comparing(Car::getYear)).toList();  },getSedanCarsOwnedSortedByDate
3002,"  void <extra_id_0>() throws Exception {    var printerController = new PrinterController(new HpPrinter());    printerController.print(MESSAGE);    assertEquals(""HP Printer : Test Message Printed"", appender.getLastMessage());  }  @Test",testHpPrinter
1400,"  public Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{WeatherType.SUNNY, ""The orcs are facing Sunny weather now""},        new Object[]{WeatherType.RAINY, ""The orcs are facing Rainy weather now""},        new Object[]{WeatherType.WINDY, ""The orcs are facing Windy weather now""},        new Object[]{WeatherType.COLD, ""The orcs are facing Cold weather now""}    );  }  /**   * Create a new test with the given weather and expected response   */",dataProvider
3767,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2265,"  private LotteryTicket <extra_id_0>(Document doc) {    var playerDetails = new PlayerDetails(doc.getString(""email""), doc.getString(""bank""),        doc.getString(""phone""));    var numbers = Arrays.stream(doc.getString(""numbers"").split("",""))        .map(Integer::parseInt)        .collect(Collectors.toSet());    var lotteryNumbers = LotteryNumbers.create(numbers);    var ticketId = new LotteryTicketId(doc.getInteger(TICKET_ID));    return new LotteryTicket(ticketId, playerDetails, lotteryNumbers);  }",docToTicket
2541,"  public void <extra_id_0>() {    LOGGER.info(""You feel blessed. (Potion={})"", System.identityHashCode(this));  }",drink
697,"  void <extra_id_0>() {    final Logger LOGGER = (Logger) LoggerFactory.getLogger(DownForMaintenance.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    LOGGER.addAppender(listAppender);    MaintenanceLock.getInstance().setLock(true);    receipt = applicationServices.loggedInUserPurchase(null, null);    receipt.show();    List<ILoggingEvent> loggingEventList = listAppender.list;    assertEquals(""Down for maintenance"", loggingEventList.get(0).getMessage());    assertEquals(Level.INFO, loggingEventList.get(0).getLevel());  }  @Test",testDownForMaintenance
3666,  boolean <extra_id_0>(int subtrahend) {    if (amount >= subtrahend) {      amount -= subtrahend;      return true;    } else {      return false;    }  }  //count,minus
3467,"  public static Finder <extra_id_0>(String query, String... excludeQueries) {    var finder = Finder.contains(query);    for (String q : excludeQueries) {      finder = finder.not(Finder.contains(q));    }    return finder;  }  /**   * Specialized query. Every next query is looked in previous result.   * @param queries array with queries   * @return new finder   */",filteredFinder
997,  public abstract boolean <extra_id_0>(Role role);  /**   * Remove specific role @see {@link Role}.   *   * @param role to remove   * @return true if the operation has been successful otherwise false   */,hasRole
337,    public SpellStep <extra_id_0>(String wizardClass) {      this.wizardClass = wizardClass;      return this;    }    @Override,wizardClass
1524,  void <extra_id_0>() {    var soberHappyKing = RoyaltyObjectMother.createHappyKing();    var flirtyQueen = RoyaltyObjectMother.createFlirtyQueen();    soberHappyKing.flirt(flirtyQueen);    assertTrue(soberHappyKing.isHappy());  }  @Test,successfullKingFlirt
2717,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  }  @BeforeEach  @AfterEach,shouldExecuteApplicationWithoutException
3066,"    void <extra_id_0>() throws SQLException {        productDao.save(product);        try (var connection = dataSource.getConnection();             var statement = connection.createStatement();             ResultSet rs = statement.executeQuery(SELECT_PRODUCTS_SQL)) {            assertTrue(rs.next());            assertEquals(product.getName(), rs.getString(""name""));            assertEquals(product.getPrice(), Money.of(USD, rs.getBigDecimal(""price"")));            assertEquals(product.getExpirationDate(), rs.getDate(""expiration_date"").toLocalDate());        }        assertThrows(SQLException.class, () -> productDao.save(product));    }    @Test",shouldSaveProduct
3022,"  void <extra_id_0>() {    try {      var scene = new Scene();      var field1 = Scene.class.getDeclaredField(""current"");      field1.setAccessible(true);      field1.set(scene, 0);      var frameBuffers = new FrameBuffer[2];      var frameBuffer = new FrameBuffer();      frameBuffer.draw(0, 0);      frameBuffers[0] = frameBuffer;      var field2 = Scene.class.getDeclaredField(""frameBuffers"");      field2.setAccessible(true);      field2.set(scene, frameBuffers);      assertEquals(frameBuffer, scene.getBuffer());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to access private field."");    }  }  @Test",testGetBuffer
1656,  void <extra_id_0>() {    appender = new InMemoryAppender(GiantView.class);  }  @AfterEach,setUp
2032,"  void <extra_id_0>() {    CompletableFuture<Health> future = CompletableFuture.completedFuture(Health.up().build());    when(asynchronousHealthChecker.performCheck(any(Supplier.class), eq(timeoutInSeconds)))        .thenReturn(future);    // Simulate the health check repository behavior    doNothing().when(healthCheckRepository).performTestTransaction();    // Now call the actual method    Health health = healthIndicator.health();    // Check that the health status is UP    assertEquals(Status.UP, health.getStatus());  }  /**   * Test case for the `health()` method when the database transaction fails.   *   * <p>Asserts that when the `health()` method is called and the database transaction fails, it   * returns a Health object with Status.DOWN.   */  @Test",whenDatabaseTransactionSucceeds_thenHealthIsUp
2827,  public abstract void <extra_id_0>(Meteoroid meteoroid);,collisionResolve
429,"  void <extra_id_0>() {    var user = new User(1, null, ""iloveyou"");    assertNotEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals4
1685,  String <extra_id_0>();  /**   * Displays a message to the users.   *   * @param message The message to be displayed.   */,getFileName
1894,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      assertNull(getInternalHeavyValue());      assertNotNull(getHeavy());      assertNotNull(getInternalHeavyValue());      assertSame(getHeavy(), getInternalHeavyValue());    });  }",testGetHeavy
1408,"  public abstract Collection<Object[]> <extra_id_0>();  /**   * Verify if the weather has the expected influence on the observer   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
153,"  void <extra_id_0>() {    final var newId = 2;    final var otherRoom = new Room(newId, ROOMTYPE, PRICE, BOOKED);    assertNotEquals(room, otherRoom);    assertNotEquals(room.hashCode(), otherRoom.hashCode());  }  @Test",notEqualWithDifferentId
18,"  public void <extra_id_0>() {    LOGGER.info(""draw"");    doDraw();  }",draw
2607,"  static List<Object[]> <extra_id_0>() {    return List.of(        new Object[]{""Archer"", ""Displaying archers""},        new Object[]{""Catapult"", ""Displaying catapults""},        new Object[]{""NonExistentCommand"", ""Error 500""}    );  }  /**   * @param request        The request that's been tested   * @param displayMessage The expected display message   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
120,  default boolean <extra_id_0>() {    return true;  }  /**   * Created a completed Trampoline.   *   * @param result Completed result   * @return Completed Trampoline   */,complete
2804,"  public void <extra_id_0>(int id) throws Exception {    try {      conn.setAutoCommit(false);      removeorder.setInt(1, id);      if (removeorder.executeUpdate() == 1) {        LOGGER.info(""Order with id "" + id + "" successfully removed"");      } else {        LOGGER.info(""Order with id "" + id + "" unavailable."");      }    } catch (Exception e) {      LOGGER.error(e.getLocalizedMessage(), e.getCause());      conn.rollback();    } finally {      conn.setAutoCommit(true);    }  }  @Override",removeOrder
214,"  void <extra_id_0>() {    skeleton.patrollingLeft = true;    skeleton.setPosition(50);    skeleton.update();    assertEquals(49, skeleton.getPosition());  }  @Test",testUpdateForPatrollingLeft
540,  public String <extra_id_0>() {    return name;  },getName
1137,"  public Map<Headers, String> <extra_id_0>() {    return Collections.unmodifiableMap(headers);  }  @Override",getHeaders
3688,  private static boolean <extra_id_0>(final String[] args) {    for (String arg : args) {      if (arg.equals(USE_MONGO_DB)) {        return true;      }    }    return false;  }  /**   * Read-through and write-through.   */,isDbMongo
1870,  void <extra_id_0>(Party party);,joinedParty
3661,"  void <extra_id_0>() {    //Arrange    var cash = new Cash(3);    //Act    cash.plus(4);    //Assert    assertEquals(7, cash.count());  }  @Test",testPlus
3535,  final void <extra_id_0>(Callback callback) {    execute();    Optional.ofNullable(callback).ifPresent(Callback::call);  },executeWith
3735,  void <extra_id_0>() {    MongoCollection<Document> mongoCollection = mock(MongoCollection.class);    when(db.getCollection(CachingConstants.USER_ACCOUNT)).thenReturn(mongoCollection);    assertDoesNotThrow(()-> {mongoDb.upsertDb(userAccount);});  },upsertDb
205,  public void <extra_id_0>(String author) {    this.author = author;  },setAuthor
3181,"      void <extra_id_0>() throws Exception {        final var nonExistingId = getNonExistingCustomerId();        final var newFirstname = ""Douglas"";        final var newLastname = ""MacArthur"";        final var customer = new Customer(nonExistingId, newFirstname, newLastname);        var result = dao.update(customer);        assertFalse(result);        assertFalse(dao.getById(nonExistingId).isPresent());      }      @Test",updationShouldBeFailureAndNotAffectExistingCustomers
999,"  public abstract <T extends Customer> Optional<T> <extra_id_0>(Role role, Class<T> expectedRole);",getRole
1057,"  public static <K> ChapterResult<K> <extra_id_0>(K val) {    return new ChapterResult<>(val, State.SUCCESS);  }",success
2762,  public void <extra_id_0>(int eventId) throws EventDoesNotExistException {    if (!eventPool.containsKey(eventId)) {      throw new EventDoesNotExistException(eventId + DOES_NOT_EXIST);    }    eventPool.get(eventId).start();  }  /**   * Stops event.   *   * @param eventId The event that needs to be stopped.   * @throws EventDoesNotExistException If event does not exist in our eventPool.   */,start
995,"  public String <extra_id_0>() {    return String.format(""Investor %s has invested %d dollars"", name, amountToInvest);  }",invest
3307,"  void <extra_id_0>() {    final var messenger = new Messenger();    testMessage(        messenger.messageFromElves(),        ""Much wind pours from your mouth.""    );  }  /**   * Test if the given composed message matches the expected message   *   * @param composedMessage The composed message, received from the messenger   * @param message         The expected message   */",testMessageFromElves
2490,  public abstract E <extra_id_0>();,computeNext
630,  public void <extra_id_0>(GiantModel giantModel) {    giantView.displayGiant(giantModel);  },updateView
198,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
193,"  private Room <extra_id_0>(ResultSet resultSet) throws Exception {    return new Room(resultSet.getInt(""ID""),        resultSet.getString(""ROOM_TYPE""),        resultSet.getInt(""PRICE""),        resultSet.getBoolean(""BOOKED""));  }",createRoom
1377,  Node <extra_id_0>();,getLeft
1300,"  void <extra_id_0>()      throws InterruptedException {    var dependentPromise = promise        .fulfillInAsync(new NumberCrunchingTask(), executor)        .thenAccept(value -> {          throw new RuntimeException(""Barf!"");        });    try {      dependentPromise.get();      fail(""Fetching dependent promise should result in exception ""          + ""if the action threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }    try {      dependentPromise.get(1000, TimeUnit.SECONDS);      fail(""Fetching dependent promise should result in exception ""          + ""if the action threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }  }  @Test",dependentPromiseIsFulfilledWithAnExceptionIfConsumerThrowsAnException
3123,"  void <extra_id_0>() {    ServiceContext context1 = layerA.getContext();    var layerB = new LayerB(layerA);    ServiceContext context2 = layerB.getContext();    var layerC = new LayerC(layerB);    ServiceContext context3 = layerC.getContext();    assertSame(context1, context2);    assertSame(context2, context3);    assertSame(context3, context1);  }  @Test",testSameContextPassedBetweenLayers
3855,"  void <extra_id_0>() {    document.put(KEY, VALUE);    assertEquals(VALUE, document.get(KEY));  }  @Test",shouldPutAndGetValue
2777,"  public void <extra_id_0>() {    if (!isComplete) {      LOGGER.info(""[{}] is not done."", eventId);    } else {      LOGGER.info(""[{}] is done."", eventId);    }  }  @Override",status
3053,"  public void <extra_id_0>(Customer customer) throws SQLException {    var sql = ""insert into CUSTOMERS (name, money) values (?, ?)"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, customer.getName());      preparedStatement.setBigDecimal(2, customer.getMoney().getAmount());      preparedStatement.executeUpdate();    }  }  @Override",save
1651,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
24,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1782,"  void <extra_id_0>(){    var sword = new SwordOfAragorn();    Assertions.assertThrows(NullPointerException.class, () -> sword.lock(null));    Assertions.assertThrows(NullPointerException.class, () -> sword.unlock(null));  }",invalidLockerTest
3071,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[] {}));  },shouldExecuteApplicationWithoutException
2685,"  void <extra_id_0>() throws UnsupportedAudioFileException, IOException, InterruptedException {    audio.playSound(audio.getAudioStream(""./etc/Bass-Drum-1.aif""), -10.0f);    audio.playSound(audio.getAudioStream(""./etc/Bass-Drum-1.aif""), -10.0f);    audio.playSound(audio.getAudioStream(""./etc/Bass-Drum-1.aif""), -10.0f);    assertTrue(audio.getPendingAudio().length > 0);    // test that service is started    assertTrue(audio.isServiceRunning());    // adding a small pause to be sure that the sound is ended    Thread.sleep(10000);    audio.stopService();    // test that service is finished    assertFalse(audio.isServiceRunning());  }",testQueue
137,      void <extra_id_0>() throws Exception {        var result = dao.delete(existingRoom);        Assertions.assertTrue(result);        assertRoomCountIs(0);        assertFalse(dao.getById(existingRoom.getId()).isPresent());      }      @Test,deletionShouldBeSuccessAndRoomShouldBeNonAccessible
3278,"  void <extra_id_0>() {    var authorCount = queryService.getAuthorsCount();    assertEquals(new BigInteger(""2""), authorCount);  }",testGetAuthorsCount
841,    public SocketAddress <extra_id_0>() {      return receiver;    }    /**     * Sets the intended receiver address. This must be set when writing to the channel.     *     * @param receiver the receiver address.     */,getReceiver
677,"  public static void <extra_id_0>(String[] args) {    // initialize creatures list    var creatures = List.of(        new Goblin(),        new Octopus(),        new Dragon(),        new Shark(),        new Troll(),        new KillerBee()    );    // so-called ""hard-coded"" specification    LOGGER.info(""Demonstrating hard-coded specification :"");    // find all walking creatures    LOGGER.info(""Find all walking creatures"");    print(creatures, new MovementSelector(Movement.WALKING));    // find all dark creatures    LOGGER.info(""Find all dark creatures"");    print(creatures, new ColorSelector(Color.DARK));    LOGGER.info("""");    // so-called ""parameterized"" specification    LOGGER.info(""Demonstrating parameterized specification :"");    // find all creatures heavier than 500kg    LOGGER.info(""Find all creatures heavier than 600kg"");    print(creatures, new MassGreaterThanSelector(600.0));    // find all creatures heavier than 500kg    LOGGER.info(""Find all creatures lighter than or weighing exactly 500kg"");    print(creatures, new MassSmallerThanOrEqSelector(500.0));    LOGGER.info("""");    // so-called ""composite"" specification    LOGGER.info(""Demonstrating composite specification :"");    // find all red and flying creatures    LOGGER.info(""Find all red and flying creatures"");    var redAndFlying = new ColorSelector(Color.RED).and(new MovementSelector(Movement.FLYING));    print(creatures, redAndFlying);    // find all creatures dark or red, non-swimming, and heavier than or equal to 400kg    LOGGER.info(""Find all scary creatures"");    var scaryCreaturesSelector = new ColorSelector(Color.DARK)        .or(new ColorSelector(Color.RED)).and(new MovementSelector(Movement.SWIMMING).not())        .and(new MassGreaterThanSelector(400.0).or(new MassEqualSelector(400.0)));    print(creatures, scaryCreaturesSelector);  }",main
2289,  public MongoDatabase <extra_id_0>() {    return database;  }  /**   * Get events collection.   *   * @return events collection   */,getMongoDatabase
1173,"  void <extra_id_0>() {    assertThrows(UnsupportedOperationException.class, () -> {      POISON_PILL.setBody(""Test message."");    });  }  @Test",testSetBody
1061,  String <extra_id_0>();  /**   * The operation executed in general case.   *   * @param value incoming value   * @return result {@link ChapterResult}   */,getName
3581,"  private void <extra_id_0>(HttpResponse<String> httpResponse) {    if (isSuccessResponse(httpResponse.statusCode())) {      LOGGER.info(""Price info received successfully"");    } else {      LOGGER.warn(""Price info request failed"");    }  }",logResponse
1435,  public void <extra_id_0>(String type) {    this.type = type;  },setType
2382,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    // Test if IdNotFoundException is thrown when person with this ID not in DB.    Assertions.assertThrows(IdNotFoundException.class,()->db.delete(3));  }  @Test",deleteNotInDb
530,  List<E> <extra_id_0>();,findAll
3578,  public MobileProduct <extra_id_0>() {    var mobileProduct = new MobileProduct();    mobileProduct.setPrice(priceClient.getPrice());    return mobileProduct;  },getProductMobile
787,  void <extra_id_0>() {    final var king = new King();    king.getFed();    king.receiveCompliments();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testFedSoberComplimentedKing
3385,  protected abstract String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException;,updateDb
2040,"  void <extra_id_0>() {    // Arrange    HealthCheck healthCheck = new HealthCheck();    healthCheck.setStatus(""OK"");    // Mocking the necessary EntityManager behaviors    when(entityManager.find(eq(HealthCheck.class), any())).thenReturn(healthCheck);    // Act & Assert    assertDoesNotThrow(() -> healthCheckRepository.performTestTransaction());    // Verify the interactions    verify(entityManager).persist(any(HealthCheck.class));    verify(entityManager).flush();    verify(entityManager).remove(any(HealthCheck.class));  }  /**   * Test case for the `checkHealth()` method when the database is down.   *   * <p>Asserts that when the `checkHealth()` method is called and the database is down, it throws a   * RuntimeException.   */  @Test",whenPerformTestTransaction_thenSucceeds
610,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    assertEquals(Health.HEALTHY, model.getHealth());    var messageFormat = ""Giant giant1, The giant looks %s, alert and saturated."";    for (final var health : Health.values()) {      action.setHealth(health);      assertEquals(health, model.getHealth());      assertEquals(String.format(messageFormat, health), model.toString());    }  }  /**   * Verify if the fatigue level is set properly though the constructor and setter   */  @Test",testSetHealth
547,  public String <extra_id_0>() {    return name;  },toString
117,  T <extra_id_0>();  /**   * Jump to next stage.   *   * @return next stage   */,get
2800,"  public String <extra_id_0>() {    try {      var resultSet = getschema.executeQuery(GET_SCHEMA);      var sb = new StringBuilder();      while (resultSet.next()) {        sb.append(""Col name: "" + resultSet.getString(1) + "",  Col type: "" + resultSet.getString(2) + """");      }      getschema.close();      return sb.toString();    } catch (Exception e) {      LOGGER.error(""Error in retrieving schema: {}"", e.getLocalizedMessage(), e.getCause());    }    return ""Schema unavailable"";  }    @Override",getSchema
3415,  public PaymentRequest <extra_id_0>(String requestId) {    return data.get(requestId);  },get
1935,  protected void <extra_id_0>(Message message) {    // Not used in Bully Instance  }  @Override,handleHeartbeatMessage
2613,  void <extra_id_0>();,process
2436,  public String <extra_id_0>() {    return title;  },toString
419,"  void <extra_id_0>() throws SQLException {    var dataSource = createDataSource();    var userTableModule = new UserTableModule(dataSource);    var user = new User(1, ""123456"", ""123456"");    assertEquals(0, userTableModule.login(user.getUsername(),            user.getPassword()));  }  @Test",loginShouldFail
2880,  void <extra_id_0>();,sergeantReady
49,  public void <extra_id_0>(UnitVisitor visitor) {    Arrays.stream(children).forEach(child -> child.accept(visitor));  },accept
2738,  public void <extra_id_0>(Event e) {    notifyObservers(e);  }  @Override,onEvent
2650,  public void <extra_id_0>() {    eventJournal.reset();  }  /**   * Recover.   */,reset
640,  public String <extra_id_0>() {    return serviceName;  }  @Override,getName
2586,  double <extra_id_0>();,probability
3454,"  void <extra_id_0>() {    PrinterQueue printerQueue1 = PrinterQueue.getInstance();    PrinterQueue printerQueue2 = PrinterQueue.getInstance();    assertSame(printerQueue1, printerQueue2);  }  @Test()  @Timeout(1000)",singletonTest
2243,"  public void <extra_id_0>(WireTransfers bank, Scanner scanner) {    logger.info(""What is the account number?"");    var account = readString(scanner);    logger.info(""How many credits do you want to deposit?"");    var amount = readString(scanner);    bank.setFunds(account, Integer.parseInt(amount));    logger.info(""The account {} now has {} credits."", account, bank.getFunds(account));  }  @Override",addFundsToLotteryAccount
1968,"  public static void <extra_id_0>(String[] args) {    var guardedQueue = new GuardedQueue();    var executorService = Executors.newFixedThreadPool(3);    //here we create first thread which is supposed to get from guardedQueue    executorService.execute(guardedQueue::get);    // here we wait two seconds to show that the thread which is trying    // to get from guardedQueue will be waiting    try {      Thread.sleep(2000);    } catch (InterruptedException e) {      e.printStackTrace();    }    // now we execute second thread which will put number to guardedQueue    // and notify first thread that it could get    executorService.execute(() -> guardedQueue.put(20));    executorService.shutdown();    try {      executorService.awaitTermination(30, TimeUnit.SECONDS);    } catch (InterruptedException e) {      e.printStackTrace();    }  }",main
291,"  void <extra_id_0>() throws Exception {    var groundDive = new GroundDive();    var logs = tapSystemOutNormalized(groundDive::activate)        .split("""");    final var expectedSize = 3;    final var log1 = logs[0].split(""-"")[1].trim() + "" -"" + logs[0].split(""-"")[2].trim();    final var expectedLog1 = ""Move to ( 0.0, 0.0, -20.0 )"";    final var log2 = getLogContent(logs[1]);    final var expectedLog2 = ""Play GROUNDDIVE_SOUND with volume 5"";    final var log3 = getLogContent(logs[2]);    final var expectedLog3 = ""Spawn 20 particle with type GROUNDDIVE_PARTICLE"";    assertEquals(logs.length, expectedSize);    assertEquals(log1, expectedLog1);    assertEquals(log2, expectedLog2);    assertEquals(log3, expectedLog3);  }",testActivate
166,"  private static void <extra_id_0>(DataSource dataSource) throws Exception {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.CREATE_SCHEMA_SQL);    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }",createSchema
497,  void <extra_id_0>() {    lookupShardManager = new LookupShardManager();    var shard1 = new Shard(1);    var shard2 = new Shard(2);    var shard3 = new Shard(3);    lookupShardManager.addNewShard(shard1);    lookupShardManager.addNewShard(shard2);    lookupShardManager.addNewShard(shard3);  }  @Test,setup
831,"  void <extra_id_0>() {    var findCustomer = new FindCustomer(""123"", new BusinessException(""test""));    assertThrows(BusinessException.class, findCustomer::perform);  }  /**   * Should first throw the given exceptions, then return the given result.   *   * @throws Exception not an expected exception   */  @Test",oneException
72,"  void <extra_id_0>() {    context.put(UnitActions.INSERT.getActionValue(), List.of(weapon1));    context.put(UnitActions.MODIFY.getActionValue(), List.of(weapon1));    context.put(UnitActions.DELETE.getActionValue(), List.of(weapon1));    armsDealer.commit();    verify(weaponDatabase, times(1)).insert(weapon1);    verify(weaponDatabase, times(1)).modify(weapon1);    verify(weaponDatabase, times(1)).delete(weapon1);  }  @Test",shouldSaveAllLocalChangesToDb
2106,"    public String <extra_id_0>() {        return String.format(""CakeLayerInfo id=%d name=%s calories=%d"", id.orElse(-1L), name, calories);    }",toString
2091,"  void <extra_id_0>() {    final var initialLayers = cakeBakingService.getAvailableLayers();    assertNotNull(initialLayers);    assertTrue(initialLayers.isEmpty());    cakeBakingService.saveNewLayer(new CakeLayerInfo(""Layer1"", 1000));    cakeBakingService.saveNewLayer(new CakeLayerInfo(""Layer2"", 2000));    final var availableLayers = cakeBakingService.getAvailableLayers();    assertNotNull(availableLayers);    assertEquals(2, availableLayers.size());    for (final var layer : availableLayers) {      assertNotNull(layer.id);      assertNotNull(layer.name);      assertNotNull(layer.toString());      assertTrue(layer.calories > 0);    }  }  @Test",testLayers
3199,"  public static void <extra_id_0>(String[] args) {    MmaBantamweightFighter fighter1 = new MmaBantamweightFighter(""Joe"", ""Johnson"", ""The Geek"", ""Muay Thai"");    MmaBantamweightFighter fighter2 = new MmaBantamweightFighter(""Ed"", ""Edwards"", ""The Problem Solver"", ""Judo"");    fighter1.fight(fighter2);    MmaHeavyweightFighter fighter3 = new MmaHeavyweightFighter(""Dave"", ""Davidson"", ""The Bug Smasher"", ""Kickboxing"");    MmaHeavyweightFighter fighter4 = new MmaHeavyweightFighter(""Jack"", ""Jackson"", ""The Pragmatic"", ""Brazilian Jiu-Jitsu"");    fighter3.fight(fighter4);  }",main
3633,    public void <extra_id_0>() throws InterruptedException {      synchronized (lock) {        while (!isCompleted()) {          lock.wait();        }      }    }  }},await
1917,"  void <extra_id_0>() {    try {      var instance1 = new BullyInstance(null, 1, 1);      var instance2 = new BullyInstance(null, 1, 2);      var instance3 = new BullyInstance(null, 1, 3);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3);      var messageManager = new BullyMessageManager(instanceMap);      messageManager.sendHeartbeatInvokeMessage(2);      var message = new Message(MessageType.HEARTBEAT_INVOKE, """");      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var messageSent = ((Queue<Message>) messageQueueField.get(instance3)).poll();      assertEquals(messageSent.getType(), message.getType());      assertEquals(messageSent.getContent(), message.getContent());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Error to access private field."");    }  }",testSendHeartbeatInvokeMessage
968,"  void <extra_id_0>() {    var actual = repository.findOne(new PersonSpecifications.NameEqualSpec(""Terry""));    assertTrue(actual.isPresent());    assertEquals(terry, actual.get());  }  @AfterEach",testFindOneByNameEqualSpec
2134,    void <extra_id_0>(CakeToppingInfo toppingInfo);    /**     * Get available cake toppings.     */,saveNewTopping
746,  abstract void <extra_id_0>();  /**   * defines conditions for interacting with an object obj.   *   * @param obj is another object on field which also extends Point   * @return whether the object can interact with the other or not   */,move
1242,  void <extra_id_0>() {    appender.stop();  }  /**   * Verify if mixing the stew doesn't change the internal state   */  @Test,tearDown
837,"  protected void <extra_id_0>(Object pendingWrite, SelectionKey key) throws IOException {    var pendingPacket = (DatagramPacket) pendingWrite;    getJavaChannel().send(pendingPacket.getData(), pendingPacket.getReceiver());  }  /**   * Writes the outgoing {@link DatagramPacket} to the channel. The intended receiver of the   * datagram packet must be set in the <code>data</code> using {@link   * DatagramPacket#setReceiver(SocketAddress)}.   */  @Override",doWrite
3790,"                protected PasswordAuthentication <extra_id_0>() {                    return new PasswordAuthentication(username, password);                }            });        }",getPasswordAuthentication
1709,"  public String <extra_id_0>() {    var dataFileName = this.fileName;    try (var br = new BufferedReader(new FileReader(new File(dataFileName)))) {      var result = br.lines().collect(Collectors.joining(""""));      this.loaded = true;      return result;    } catch (Exception e) {      LOGGER.error(""File {} does not exist"", dataFileName);    }    return null;  }  /**   * Sets the path of the file to be loaded, to the given value.   *   * @param fileName The path of the file to be loaded.   */",loadData
2163,  boolean <extra_id_0>();,hasNext
1697,"  public int <extra_id_0>() {    return this.numOfMessageSent;  }  /**   * Returns true, if the data were displayed.   *   * @return True if the data where displayed, false otherwise.   */",getMessagesSent
3675,  public void <extra_id_0>(final int capacity) {    if (cache == null) {      cache = new LruCache(capacity);    } else {      cache.setCapacity(capacity);    }  }  /**   * Get user account using read-through cache.   * @param userId {@link String}   * @return {@link UserAccount}   */,initCapacity
3515,  int <extra_id_0>();,getPriority
3186,    void <extra_id_0>() throws SQLException {      dao = new DbCustomerDao(mockedDatasource());    },setUp
325,    WeaponStep <extra_id_0>(String fighterClass);,fighterClass
2714,    public boolean <extra_id_0>(String message) {      return log.stream()          .map(ILoggingEvent::getFormattedMessage)          .anyMatch(message::equals);    }  }},logContains
3472,  void <extra_id_0>() {    assertDoesNotThrow(() -> CombinatorApp.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2655,"  public static void <extra_id_0>(Account account) {    accounts.put(account.getAccountNo(), account);  }  /**   * Gets account.   *   * @param accountNo the account no   * @return the copy of the account or null if not found   */",putAccount
1716,  public void <extra_id_0>() {    loader.setFileName(view.getFileName());  }  /**   * Ok button handler.   */,fileNameChanged
2992,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
2583,  private List<ProbableThreat> <extra_id_0>(      final Predicate<? super ProbableThreat> predicate) {    return this.threats.stream()        .filter(predicate)        .toList();  },filteredItems
840,    public void <extra_id_0>(SocketAddress sender) {      this.sender = sender;    }    /**     * Get receiver address.     *     * @return the receiver address.     */,setSender
752,  void <extra_id_0>() {    //moves by 1 unit in either direction    this.coordinateX += RANDOM.nextInt(3) - 1;    this.coordinateY += RANDOM.nextInt(3) - 1;  },move
2958,      public Private <extra_id_0>(Double price) {        this.price = price;        return this;      }      @Override,setPrice
3369,"  private void <extra_id_0>(Order order) {    if (System.currentTimeMillis() - order.createdTime >= this.employeeTime) {      LOG.trace(ORDER_ID + "": Employee handle time for order over, returning.."", order.id);      return;    }    var list = employeeDb.exceptionsList;    var t = new Thread(() -> {      Retry.Operation op = (l) -> {        if (!l.isEmpty()) {          LOG.warn(ORDER_ID + "": Error in connecting to employee handle,""              + "" trying again.."", order.id);          throw l.remove(0);        }        if (!order.addedToEmployeeHandle) {          employeeDb.receiveRequest(order);          order.addedToEmployeeHandle = true;          LOG.info(ORDER_ID + "": Added order to employee database"", order.id);        }      };      Retry.HandleErrorIssue<Order> handleError = (o, err) -> {        if (!o.addedToEmployeeHandle && System            .currentTimeMillis() - order.createdTime < employeeTime) {          var qt = new QueueTask(order, TaskType.EMPLOYEE_DB, -1);          updateQueue(qt);          LOG.warn(ORDER_ID + "": Error in adding to employee db,""              + "" trying to queue task.."", order.id);        }      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, order);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",employeeHandleIssue
3267,"  void <extra_id_0>(String username, String name);",authorNameUpdated
3598,"  public void <extra_id_0>() {    synchronized (this) {      var machineState = getWashingMachineState();      LOGGER.info(""{}: Actual machine state: {}"", Thread.currentThread().getName(), machineState);      if (this.washingMachineState == WashingMachineState.WASHING) {        LOGGER.error(""Cannot wash if the machine has been already washing!"");        return;      }      this.washingMachineState = WashingMachineState.WASHING;    }    LOGGER.info(""{}: Doing the washing"", Thread.currentThread().getName());    this.delayProvider.executeAfterDelay(50, TimeUnit.MILLISECONDS, this::endOfWashing);  }  /**   * Method responsible of ending the washing by changing machine state.   */",wash
2730,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
150,"  void <extra_id_0>() {    final var newId = 2;    room.setId(newId);    assertEquals(newId, room.getId());  }  @Test",getAndSetId
2681,  public PlayMessage[] <extra_id_0>() {    return pendingAudio;  },getPendingAudio
3865,  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);  }  /**   * Tests getting the data for a desktop client   */  @Test,setup
2553,  Weapon <extra_id_0>(WeaponType name);  /**   * Creates factory - placeholder for specified {@link Builder}s.   *   * @param consumer for the new builder to the factory.   * @return factory with specified {@link Builder}s   */,create
988,  public String <extra_id_0>() {    return name;  },getName
3218,"  void <extra_id_0>() {    MessageDependentObject dependentObject = new MessageDependentObject();    console.init();    console.dependentObjects[0] = dependentObject;    String message = ""Danger"";    assertNull(console.dependentObjects[0].getData());    console.setData(message);    assertEquals(message, dependentObject.getData());  }",coarseGrainedObjectChangedForPersistenceTest
664,  public boolean <extra_id_0>(Creature t) {    return t.getColor().equals(color);  },test
1171,"  void <extra_id_0>() {    assertThrows(UnsupportedOperationException.class, () -> {      POISON_PILL.getHeader(Headers.SENDER);    });  }  @Test",testGetHeader
2355,"  void <extra_id_0>() {    assertEquals(0, mongoBank.getAccountsCollection().countDocuments());  }  @Test",testSetup
1910,"  void <extra_id_0>() {    try {      var instance1 = new RingInstance(null, 1, 1);      var instance2 = new RingInstance(null, 1, 2);      var instance3 = new RingInstance(null, 1, 3);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3);      var messageManager = new RingMessageManager(instanceMap);      var messageContent = ""3"";      messageManager.sendLeaderMessage(2, 3);      var ringMessage = new Message(MessageType.LEADER, messageContent);      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var ringMessageSent = ((Queue<Message>) messageQueueField.get(instance3)).poll();      assertEquals(ringMessageSent, ringMessage);    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Error to access private field."");    }  }  @Test",testSendLeaderMessage
410,  protected Consumer<Integer> <extra_id_0>() {    return integer -> value = integer;  }  @Override,setter
3784,  public String <extra_id_0>() {    return title;  },toString
1954,"  public static void <extra_id_0>(String[] args)  throws Exception {    // get service    var userService = new UserService();    // use create service to add users    for (var user : generateSampleUsers()) {      var id = userService.createUser(user);      LOGGER.info(""Add user"" + user + ""at"" + id + ""."");    }    // use list service to get users    var users = userService.listUser();    LOGGER.info(String.valueOf(users));    // use get service to get a user    var user = userService.getUser(1);    LOGGER.info(String.valueOf(user));    // change password of user 1    user.setPassword(""new123"");    // use update service to update user 1    userService.updateUser(1, user);    // use delete service to delete user 2    userService.deleteUser(2);    // close service    userService.close();  }  /**   * Generate users.   *   * @return list of users.   */",main
2280,"  private static String <extra_id_0>(Scanner scanner) {    LOGGER.info(""> "");    return scanner.next();  }",readString
3837,  public static void <extra_id_0>(String[] args) {    var conUnix = new ConfigureForUnixVisitor();    var conDos = new ConfigureForDosVisitor();    var zoom = new Zoom();    var hayes = new Hayes();    hayes.accept(conDos); // Hayes modem with Dos configurator    zoom.accept(conDos); // Zoom modem with Dos configurator    hayes.accept(conUnix); // Hayes modem with Unix configurator    zoom.accept(conUnix); // Zoom modem with Unix configurator     },main
1996,  public Filter <extra_id_0>() {    return next;  }  @Override,getNext
963,  void <extra_id_0>() {    var actuals = repository.findAll();    assertTrue(actuals.containsAll(persons) && persons.containsAll(actuals));  }  @Test,testFindAll
3265,"  void <extra_id_0>(String username, String name, String email);",authorCreated
2828,  public abstract void <extra_id_0>(SpaceStationMir mir);,collisionResolve
1465,"  public String <extra_id_0>() {    return String.format(""Oliphaunt id=%d"", id);  }",toString
317,    public boolean <extra_id_0>(String message) {      return log.stream().anyMatch(event -> event.getFormattedMessage().equals(message));    }  }},logContains
3554,  void <extra_id_0>();  // Failure response. Handle accordingly with response and change state if required.,recordSuccess
1237,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
2534,"  public void <extra_id_0>() {    LOGGER.info(""You feel strong. (Potion={})"", System.identityHashCode(this));  }",drink
3042,"  private void <extra_id_0>(Money amount) throws IllegalArgumentException {    if (money.compareTo(amount) < 0) {      throw new IllegalArgumentException(""Not enough money!"");    }    money = money.minus(amount);  }",withdraw
1730,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2516,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
2464,  protected FluentIterable<Integer> <extra_id_0>(Iterable<Integer> integers) {    return LazyFluentIterable.from(integers);  },createFluentIterable
1092,    public void <extra_id_0>(ChapterResult result) {      this.result = result;    }    /**     * the result for chapter is good.     *     * @return true if is good otherwise bad     */,setResult
2966,    String <extra_id_0>();  }},getSupplier
3336,  void <extra_id_0>(GameObject gameObject);,update
1080,  public void <extra_id_0>(Object value) {    chapters.get(pos).setInValue(value);  }  /**   * set status for current chapter.   *   * @param result to set   */,setCurrentValue
943,"  public static void <extra_id_0>(String[] args) {    // An Executor that provides methods to manage termination and methods that can     // produce a Future for tracking progress of one or more asynchronous tasks.    ExecutorService executor = null;    try {      // Create a MessageQueue object.      var msgQueue = new MessageQueue();      LOGGER.info(""Submitting TaskGenerators and ServiceExecutor threads."");      // Create three TaskGenerator threads. Each of them will submit different number of jobs.      final var taskRunnable1 = new TaskGenerator(msgQueue, 5);      final var taskRunnable2 = new TaskGenerator(msgQueue, 1);      final var taskRunnable3 = new TaskGenerator(msgQueue, 2);      // Create e service which should process the submitted jobs.      final var srvRunnable = new ServiceExecutor(msgQueue);      // Create a ThreadPool of 2 threads and      // submit all Runnable task for execution to executor..      executor = Executors.newFixedThreadPool(2);      executor.submit(taskRunnable1);      executor.submit(taskRunnable2);      executor.submit(taskRunnable3);      // submitting serviceExecutor thread to the Executor service.      executor.submit(srvRunnable);      // Initiates an orderly shutdown.      LOGGER.info(""Initiating shutdown.""          + "" Executor will shutdown only after all the Threads are completed."");      executor.shutdown();      // Wait for SHUTDOWN_TIME seconds for all the threads to complete       // their tasks and then shut down the executor and then exit.       if (!executor.awaitTermination(SHUTDOWN_TIME, TimeUnit.SECONDS)) {        LOGGER.info(""Executor was shut down and Exiting."");        executor.shutdownNow();      }    } catch (Exception e) {      LOGGER.error(e.getMessage());    }  }",main
1901,  public Heavy <extra_id_0>() {    if (heavy == null) {      heavy = new Heavy();    }    return heavy;  },getHeavy
1834,"  public void <extra_id_0>() {    while (!Thread.interrupted()) {      try {        if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {          synchronized (workCenter) {            if (workCenter.getLeader() != null && !workCenter.getLeader().equals(this)) {              workCenter.wait();              continue;            }          }        }        final Task task = taskSet.getTask();        synchronized (workCenter) {          workCenter.removeWorker(this);          workCenter.promoteLeader();          workCenter.notifyAll();        }        taskHandler.handleTask(task);        LOGGER.info(""The Worker with the ID "" + id + "" completed the task"");        workCenter.addWorker(this);      } catch (InterruptedException e) {        LOGGER.warn(""Worker interrupted"");        Thread.currentThread().interrupt();        return;      }    }  }",run
1254,"  void <extra_id_0>() {    final var wizards = List.of(        new Wizard(""Gandalf""),        new Wizard(""Dumbledore""),        new Wizard(""Oz""),        new Wizard(""Merlin"")    );    var tower = new IvoryTower();    wizards.forEach(tower::enter);    assertTrue(appender.logContains(""Gandalf enters the tower.""));    assertTrue(appender.logContains(""Dumbledore enters the tower.""));    assertTrue(appender.logContains(""Oz enters the tower.""));    assertTrue(appender.logContains(""Merlin enters the tower.""));    assertEquals(4, appender.getLogSize());  }",testEnter
3201,  void <extra_id_0>(T t);,fight
3599,"  public synchronized void <extra_id_0>() {    washingMachineState = WashingMachineState.ENABLED;    LOGGER.info(""{}: Washing completed."", Thread.currentThread().getId());  }",endOfWashing
3147,"  public boolean <extra_id_0>(final Customer customer) {    if (getById(customer.getId()).isPresent()) {      return false;    }    idToCustomer.put(customer.getId(), customer);    return true;  }  @Override",add
741,"  Collection<Point> <extra_id_0>(Rect r, Collection<Point> relevantPoints) {    //could also be a circle instead of a rectangle    if (this.boundary.intersects(r)) {      this.points          .values()          .stream()          .filter(r::contains)          .forEach(relevantPoints::add);      if (this.divided) {        this.northwest.query(r, relevantPoints);        this.northeast.query(r, relevantPoints);        this.southwest.query(r, relevantPoints);        this.southeast.query(r, relevantPoints);      }    }    return relevantPoints;  }",query
1452,"  public void <extra_id_0>() {    int initialVersion = 1;    long cardId = 123L;    Card card = Card.builder()        .id(cardId)        .version(initialVersion)        .sum(123f)        .build();    when(cardRepository.findById(eq(cardId))).thenReturn(card);    when(cardRepository.getEntityVersionById(Mockito.eq(cardId))).thenReturn(initialVersion);    cardUpdateService.doUpdate(card, cardId);    Mockito.verify(cardRepository).update(Mockito.any());  }",shouldUpdateOnSameVersion
3049,"  public void <extra_id_0>(Product product) throws SQLException {    var sql = ""insert into PRODUCTS (name, price, expiration_date) values (?, ?, ?)"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, product.getName());      preparedStatement.setBigDecimal(2, product.getPrice().getAmount());      preparedStatement.setDate(3, Date.valueOf(product.getExpirationDate()));      preparedStatement.executeUpdate();    }  }  @Override",save
1916,"  void <extra_id_0>() {    try {      var instance1 = new BullyInstance(null, 1, 1);      var instance2 = new BullyInstance(null, 1, 2);      var instance3 = new BullyInstance(null, 1, 3);      var instance4 = new BullyInstance(null, 1, 4);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3, 4, instance4);      instance1.setAlive(false);      var messageManager = new BullyMessageManager(instanceMap);      messageManager.sendLeaderMessage(2, 2);      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var message3 = ((Queue<Message>) messageQueueField.get(instance3)).poll();      var message4 = ((Queue<Message>) messageQueueField.get(instance4)).poll();      var expectedMessage = new Message(MessageType.LEADER, ""2"");      assertEquals(message3, expectedMessage);      assertEquals(message4, expectedMessage);    } catch (IllegalAccessException | NoSuchFieldException e) {      fail(""Error to access private field."");    }  }  @Test",testSendLeaderMessage
2976,  void <extra_id_0>() {    var df = new DataFetcher();    df.fetch();    var countries = df.fetch();    Assertions.assertTrue(countries.isEmpty());  },testIsNotDirty
2832,"  void <extra_id_0>() throws Exception {    final var rectangle = new Rectangle(1, 2, 3, 4);    assertEquals(""[1,2,3,4]"", rectangle.toString());  }  /**   * Test if the {@link Rectangle} class can detect if it intersects with another rectangle.   */  @Test",testToString
1119,"  private void <extra_id_0>() {    var index = 0;    while (hasLeftChild(index)) {      var smallerIndex = leftChildIndex(index);      if (hasRightChild(index) && right(index).compareTo(left(index)) > 0) {        smallerIndex = rightChildIndex(index);      }      if (queue[index].compareTo(queue[smallerIndex]) > 0) {        break;      } else {        swap(index, smallerIndex);      }      index = smallerIndex;    }  }",maxHeapifyDown
726,"  public ReceiptViewModel <extra_id_0>(String userName, String itemName) {    if (isDownForMaintenance()) {      return new DownForMaintenance();    }    return this.domain.purchase(userName, itemName);  }",loggedInUserPurchase
3709,  UserAccount <extra_id_0>(UserAccount userAccount);,upsertDb
616,  public void <extra_id_0>(Health health) {    giant.setHealth(health);  }  /**   * Sets fatigue.   *   * @param fatigue the fatigue   */,setHealth
1276,"  public static String <extra_id_0>(String urlString) throws IOException {    LOGGER.info(""Downloading contents from url: {}"", urlString);    var url = new URL(urlString);    var file = File.createTempFile(""promise_pattern"", null);    try (var bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));         var writer = new FileWriter(file)) {      String line;      while ((line = bufferedReader.readLine()) != null) {        writer.write(line);        writer.write("""");      }      LOGGER.info(""File downloaded at: {}"", file.getAbsolutePath());      return file.getAbsolutePath();    }  }",downloadFile
2879,"  public UnitExtension <extra_id_0>(String extensionName) {    if (extensionName.equals(""CommanderExtension"")) {      return Optional.ofNullable(unitExtension).orElseGet(() -> new Commander(this));    }    return super.getUnitExtension(extensionName);  }",getUnitExtension
3464,"  public static void <extra_id_0>(String[] args) {    var queriesOr = new String[]{""many"", ""Annabel""};    var finder = Finders.expandedFinder(queriesOr);    var res = finder.find(text());    LOGGER.info(""the result of expanded(or) query[{}] is {}"", queriesOr, res);    var queriesAnd = new String[]{""Annabel"", ""my""};    finder = Finders.specializedFinder(queriesAnd);    res = finder.find(text());    LOGGER.info(""the result of specialized(and) query[{}] is {}"", queriesAnd, res);    finder = Finders.advancedFinder(""it was"", ""kingdom"", ""sea"");    res = finder.find(text());    LOGGER.info(""the result of advanced query is {}"", res);    res = Finders.filteredFinder("" was "", ""many"", ""child"").find(text());    LOGGER.info(""the result of filtered query is {}"", res);  }",main
1962,  private static SessionFactory <extra_id_0>() {    // Create the SessionFactory from hibernate.cfg.xml    return new Configuration().configure().buildSessionFactory();  }  /**   * Get session factory.   * @return session factory   */,buildSessionFactory
3054,"  public void <extra_id_0>(Product product, Customer customer) throws SQLException {    var sql = ""insert into PURCHASES (product_name, customer_name) values (?,?)"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, product.getName());      preparedStatement.setString(2, customer.getName());      preparedStatement.executeUpdate();    }  }  @Override",addProduct
414,  protected abstract Supplier<Integer> <extra_id_0>();,getter
3024,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3844,"  Void <extra_id_0>(String key, Object value);  /**   * Gets the value for the key.   *   * @param key element key   * @return value or null   */",put
327,    AbilityStep <extra_id_0>(String weapon);,withWeapon
2275,"  public void <extra_id_0>() {    administration.getAllSubmittedTickets()        .forEach((k, v) -> logger.info(""Key: {}, Value: {}"", k, v));  }  @Override",getAllSubmittedTickets
1878,"  public String <extra_id_0>() {    return ""Hobbit"";  }",toString
1366,"  void <extra_id_0>() {    final var level1 = TREE_ROOT.getLeft();    assertNotNull(level1);    assertEquals(""level1_a"", level1.getName());    assertEquals(5, level1.getTreeSize());    final var level2 = level1.getLeft();    assertNotNull(level2);    assertEquals(""level2_a"", level2.getName());    assertEquals(3, level2.getTreeSize());    final var level3 = level2.getLeft();    assertNotNull(level3);    assertEquals(""level3_a"", level3.getName());    assertEquals(1, level3.getTreeSize());    assertSame(NullNode.getInstance(), level3.getRight());    assertSame(NullNode.getInstance(), level3.getLeft());  }  @Test",testGetLeft
3025,"  void <extra_id_0>() {    try {      var field = FrameBuffer.class.getDeclaredField(""pixels"");      var pixels = new Pixel[FrameBuffer.HEIGHT * FrameBuffer.WIDTH];      Arrays.fill(pixels, Pixel.WHITE);      pixels[0] = Pixel.BLACK;      var frameBuffer = new FrameBuffer();      field.setAccessible(true);      field.set(frameBuffer, pixels);      frameBuffer.clearAll();      assertEquals(Pixel.WHITE, frameBuffer.getPixels()[0]);    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }  @Test",testClearAll
1988,"  public String <extra_id_0>(Order order) {    var result = super.execute(order);    var contactNumber = order.getContactNumber();    if (contactNumber == null || contactNumber.isEmpty()        || contactNumber.matches("".*[^\\d]+.*"")        || contactNumber.length() != 11) {      return result + ""Invalid contact number! "";    } else {      return result;    }  }",execute
486,  void <extra_id_0>() {    rangeShardManager = new RangeShardManager();    var shard1 = new Shard(1);    var shard2 = new Shard(2);    var shard3 = new Shard(3);    rangeShardManager.addNewShard(shard1);    rangeShardManager.addNewShard(shard2);    rangeShardManager.addNewShard(shard3);  }  @Test,setup
939,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
634,  void <extra_id_0>();,execute
2722,"  void <extra_id_0>() {    var message = ""Some error"";    assertThrows(IOException.class, () -> {      final var temporaryFile = this.testFolder.newFile();      new SimpleFileWriter(temporaryFile.getPath(), writer -> {        throw new IOException(message);      });    }, message);  }",testRipplesIoExceptionOccurredWhileWriting
1103,"  public String <extra_id_0>() {    return ""withdrawing Money"";  }  @Override",getName
3068,"    void <extra_id_0>() {        productDao = mock(ProductDaoImpl.class);        product = Product.builder()                .name(""product"")                .price(Money.of(USD, 100.0))                .expirationDate(LocalDate.now().plusDays(10))                .productDao(productDao)                .build();    }    @Test",setUp
1101,"  public Saga <extra_id_0>(Saga saga) {    var inValue = saga.getCurrentValue();    LOGGER.info(""The Rollback for a chapter '{}' has been started. ""            + ""The data {} has been rollbacked successfully"",        getName(), inValue);    saga.setCurrentStatus(Saga.ChapterResult.ROLLBACK);    saga.setCurrentValue(inValue);    return saga;  }",rollback
35,"  void <extra_id_0>(Sergeant unit, UnitVisitor mockedVisitor) {    verify(mockedVisitor).visit(eq(unit));  }",verifyVisit
1084,  int <extra_id_0>() {    return ++pos;  },forward
1989,  public void <extra_id_0>(Filter filter) {    if (chain == null) {      chain = filter;    } else {      chain.getLast().setNext(filter);    }  }  /**   * Execute filter chain.   */,addFilter
304,"  protected String <extra_id_0>() {    return ""old goblin woman"";  }  @Override",pickTarget
3877,	  void <extra_id_0>() {	    assertDoesNotThrow(() -> App.main(new String[]{}));	  },shouldExecuteApplicationWithoutException
1312,"  void <extra_id_0>() {    final var prototype = new Character();    prototype.set(Stats.ARMOR, 1);    prototype.set(Stats.INTELLECT, 2);    assertNull(prototype.type());    final var stupid = new Character(Type.ROGUE, prototype);    stupid.remove(Stats.INTELLECT);    assertEquals(Type.ROGUE, stupid.type());    final var weak = new Character(""weak"", prototype);    weak.remove(Stats.ARMOR);    assertNull(weak.type());  }",testType
531,  protected SessionFactory <extra_id_0>() {    return HibernateUtil.getSessionFactory();  }  @Override,getSessionFactory
176,  private static void <extra_id_0>(HotelDaoImpl hotelDao) throws Exception {    for (var room : generateSampleRooms()) {      hotelDao.add(room);    }  }  /**   * Generate rooms.   *   * @return list of rooms   */,addRooms
581,"  public static void <extra_id_0>() {    // spells    var spell1 = new Spell(""Ice dart"");    var spell2 = new Spell(""Invisibility"");    var spell3 = new Spell(""Stun bolt"");    var spell4 = new Spell(""Confusion"");    var spell5 = new Spell(""Darkness"");    var spell6 = new Spell(""Fireball"");    var spell7 = new Spell(""Enchant weapon"");    var spell8 = new Spell(""Rock armour"");    var spell9 = new Spell(""Light"");    var spell10 = new Spell(""Bee swarm"");    var spell11 = new Spell(""Haste"");    var spell12 = new Spell(""Levitation"");    var spell13 = new Spell(""Magic lock"");    var spell14 = new Spell(""Summon hell bat"");    var spell15 = new Spell(""Water walking"");    var spell16 = new Spell(""Magic storm"");    var spell17 = new Spell(""Entangle"");    var spellDao = new SpellDaoImpl();    spellDao.persist(spell1);    spellDao.persist(spell2);    spellDao.persist(spell3);    spellDao.persist(spell4);    spellDao.persist(spell5);    spellDao.persist(spell6);    spellDao.persist(spell7);    spellDao.persist(spell8);    spellDao.persist(spell9);    spellDao.persist(spell10);    spellDao.persist(spell11);    spellDao.persist(spell12);    spellDao.persist(spell13);    spellDao.persist(spell14);    spellDao.persist(spell15);    spellDao.persist(spell16);    spellDao.persist(spell17);    // spellbooks    var spellbookDao = new SpellbookDaoImpl();    var spellbook1 = new Spellbook(""Book of Orgymon"");    spellbookDao.persist(spellbook1);    spellbook1.addSpell(spell1);    spellbook1.addSpell(spell2);    spellbook1.addSpell(spell3);    spellbook1.addSpell(spell4);    spellbookDao.merge(spellbook1);    var spellbook2 = new Spellbook(""Book of Aras"");    spellbookDao.persist(spellbook2);    spellbook2.addSpell(spell5);    spellbook2.addSpell(spell6);    spellbookDao.merge(spellbook2);    var spellbook3 = new Spellbook(""Book of Kritior"");    spellbookDao.persist(spellbook3);    spellbook3.addSpell(spell7);    spellbook3.addSpell(spell8);    spellbook3.addSpell(spell9);    spellbookDao.merge(spellbook3);    var spellbook4 = new Spellbook(""Book of Tamaex"");    spellbookDao.persist(spellbook4);    spellbook4.addSpell(spell10);    spellbook4.addSpell(spell11);    spellbook4.addSpell(spell12);    spellbookDao.merge(spellbook4);    var spellbook5 = new Spellbook(BOOK_OF_IDORES);    spellbookDao.persist(spellbook5);    spellbook5.addSpell(spell13);    spellbookDao.merge(spellbook5);    var spellbook6 = new Spellbook(""Book of Opaen"");    spellbookDao.persist(spellbook6);    spellbook6.addSpell(spell14);    spellbook6.addSpell(spell15);    spellbookDao.merge(spellbook6);    var spellbook7 = new Spellbook(""Book of Kihione"");    spellbookDao.persist(spellbook7);    spellbook7.addSpell(spell16);    spellbook7.addSpell(spell17);    spellbookDao.merge(spellbook7);    // wizards    var wizardDao = new WizardDaoImpl();    var wizard1 = new Wizard(""Aderlard Boud"");    wizardDao.persist(wizard1);    wizard1.addSpellbook(spellbookDao.findByName(""Book of Orgymon""));    wizard1.addSpellbook(spellbookDao.findByName(""Book of Aras""));    wizardDao.merge(wizard1);    var wizard2 = new Wizard(""Anaxis Bajraktari"");    wizardDao.persist(wizard2);    wizard2.addSpellbook(spellbookDao.findByName(""Book of Kritior""));    wizard2.addSpellbook(spellbookDao.findByName(""Book of Tamaex""));    wizardDao.merge(wizard2);    var wizard3 = new Wizard(""Xuban Munoa"");    wizardDao.persist(wizard3);    wizard3.addSpellbook(spellbookDao.findByName(BOOK_OF_IDORES));    wizard3.addSpellbook(spellbookDao.findByName(""Book of Opaen""));    wizardDao.merge(wizard3);    var wizard4 = new Wizard(""Blasius Dehooge"");    wizardDao.persist(wizard4);    wizard4.addSpellbook(spellbookDao.findByName(""Book of Kihione""));    wizardDao.merge(wizard4);  }  /**   * Query the data.   */",initData
3610,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(5000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var result = new Object();      when(task.call()).thenAnswer(i -> {        Thread.sleep(1500);        return result;      });      final var asyncResult = executor.startProcess(task);      assertNotNull(asyncResult);      assertFalse(asyncResult.isCompleted());      try {        asyncResult.getValue();        fail(""Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task"");      } catch (IllegalStateException e) {        assertNotNull(e.getMessage());      }      assertSame(result, executor.endProcess(asyncResult));      verify(task, times(1)).call();      assertTrue(asyncResult.isCompleted());      // Calling end process a second time while already finished should give the same result      assertSame(result, executor.endProcess(asyncResult));      verifyNoMoreInteractions(task);    });  }  /**   * Test used to verify the behaviour of {@link ThreadAsyncExecutor#startProcess(Callable)} when   * the callable is 'null'   */  @Test",testEndProcess
2977,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3734,  void <extra_id_0>() {    MongoCollection<Document> mongoCollection = mock(MongoCollection.class);    when(db.getCollection(CachingConstants.USER_ACCOUNT)).thenReturn(mongoCollection);    assertDoesNotThrow(()-> {mongoDb.updateDb(userAccount);});  }  @Test,updateDb
592,"  void <extra_id_0>() {    final var entity = this.factory.apply(""name"");    assertEquals(""name"", entity.getName());    assertEquals(""name"", entity.toString());    final var expectedName = ""new name"";    entity.setName(expectedName);    assertEquals(expectedName, entity.getName());    assertEquals(expectedName, entity.toString());  }",testSetName
2168,  public T <extra_id_0>() {    return val;  },getVal
3647,"  public void <extra_id_0>(int wizard, int amount) {    wizards[wizard].setWisdom(amount);  }",setWisdom
468,"  private static void <extra_id_0>(DataSource dataSource) {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(CountrySchemaSql.CREATE_SCHEMA_SQL);    } catch (SQLException e) {      LOGGER.info(""Exception thrown "" + e.getMessage());    }  }",createSchema
785,  void <extra_id_0>() {    final var king = new King();    king.receiveCompliments();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testHungrySoberComplimentedKing
2920,  public void <extra_id_0>() {    // Do Nothing.  },render
2706,"  public void <extra_id_0>() {    LOGGER.info(""{} creates another promising tunnel."", name());  }  @Override",work
1887,"  Heavy <extra_id_0>() throws Exception {    final var holderField = HolderNaive.class.getDeclaredField(""heavy"");    holderField.setAccessible(true);    return (Heavy) holderField.get(this.holder);  }  @Override",getInternalHeavyValue
738,"  void <extra_id_0>() {    var b1 = new Bubble(0, 0, 1, 2);    var b2 = new Bubble(1, 1, 2, 1);    var b3 = new Bubble(10, 10, 3, 1);    var bubbles = new HashMap<Integer, Bubble>();    bubbles.put(1, b1);    bubbles.put(2, b2);    bubbles.put(3, b3);    var bubblesToCheck = new ArrayList<Point>();    bubblesToCheck.add(b2);    bubblesToCheck.add(b3);    b1.handleCollision(bubblesToCheck, bubbles);    //b1 touches b2 and not b3, so b1, b2 will be popped    assertNull(bubbles.get(1));    assertNull(bubbles.get(2));    assertNotNull(bubbles.get(3));  }",handleCollisionTest
2858,"  void <extra_id_0>() {    final var meteoroid = new Meteoroid(1, 2, 3, 4);    assertEquals(1, meteoroid.getLeft());    assertEquals(2, meteoroid.getTop());    assertEquals(3, meteoroid.getRight());    assertEquals(4, meteoroid.getBottom());    assertFalse(meteoroid.isOnFire());    assertFalse(meteoroid.isDamaged());    assertEquals(""Meteoroid at [1,2,3,4] damaged=false onFire=false"", meteoroid.toString());  }  /**   * Test what happens we collide with an asteroid   */  @Test",testConstructor
235,"  public void <extra_id_0>() {    LOGGER.info(""Stop game."");    isRunning = false;  }",stop
1646,  public NazgulName <extra_id_0>() {    return name;  },getName
0,"  void <extra_id_0>() {    final var fish = new RainbowFish(""name"", 1, 2, 3);    assertEquals(""name"", fish.getName());    assertEquals(1, fish.getAge());    assertEquals(2, fish.getLengthMeters());    assertEquals(3, fish.getWeightTons());  }",testValues
177,"  private static List<Room> <extra_id_0>() {    final var room1 = new Room(1, ""Single"", 50, false);    final var room2 = new Room(2, ""Double"", 80, false);    final var room3 = new Room(3, ""Queen"", 120, false);    final var room4 = new Room(4, ""King"", 150, false);    final var room5 = new Room(5, ""Single"", 50, false);    final var room6 = new Room(6, ""Double"", 80, false);    return List.of(room1, room2, room3, room4, room5, room6);  }",generateSampleRooms
3394,"  public ShippingRequest <extra_id_0>(ShippingRequest r) {    return data.put(r.transactionId, r);  }",add
3032,"  void <extra_id_0>(Product product, Customer customer) throws SQLException;",addProduct
2197,"  void <extra_id_0>() {    var iter = new BstIterator<>(nonEmptyRoot);    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(1), iter.next().getVal(), ""First Node is 1."");    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(3), iter.next().getVal(), ""Second Node is 3."");    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(4), iter.next().getVal(), ""Third Node is 4."");    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(5), iter.next().getVal(), ""Fourth Node is 5."");    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(6), iter.next().getVal(), ""Fifth Node is 6."");    assertTrue(iter.hasNext(), ""Iterator hasNext() should be true."");    assertEquals(Integer.valueOf(7), iter.next().getVal(), ""Sixth Node is 7."");    assertFalse(iter.hasNext(), ""Iterator hasNext() should be false, end of tree."");  }",nextAndHasNextOverEntirePopulatedTree
563,  public Set<Spellbook> <extra_id_0>() {    return spellbooks;  },getSpellbooks
1016,"    public String <extra_id_0>() {      return ""1"";    }    @Override",getName
1789,"  void <extra_id_0>() throws InterruptedException {    Assertions.assertTrue(elf.acquire(sword));    Assertions.assertEquals(elf.getName(), sword.getLocker().getName());    Assertions.assertTrue(elf.getInstruments().contains(sword));    Assertions.assertFalse(orc.acquire(sword));    killCreature(orc, elf);    Assertions.assertTrue(orc.acquire(sword));    Assertions.assertEquals(orc, sword.getLocker());  }",testAcqusition
1490,"  public AlbumPage <extra_id_0>(int year) {    var albumYearSelectOption = (HtmlSelect) page.getElementById(""albumYear"");    var yearOption = albumYearSelectOption.getOptionByValue(Integer.toString(year));    albumYearSelectOption.setSelectedAttribute(yearOption, true);    return this;  }  /**   * Sets the album rating input text field   *   * @param albumRating the new album rating value to set   * @return {@link AlbumPage}   */",changeAlbumYear
1961,  public void <extra_id_0>() {    HibernateUtil.shutdown();  },close
3081,"  void <extra_id_0>() throws SQLException {    TestUtils.executeSQL(INSERT_CUSTOMER_SQL, dataSource);    TestUtils.executeSQL(ProductDaoImplTest.INSERT_PRODUCT_SQL, dataSource);    customerDao.addProduct(product, customer);    try (var connection = dataSource.getConnection();        var statement = connection.createStatement();        ResultSet rs = statement.executeQuery(SELECT_PURCHASES_SQL)) {      assertTrue(rs.next());      assertEquals(product.getName(), rs.getString(""product_name""));      assertEquals(customer.getName(), rs.getString(""customer_name""));      assertFalse(rs.next());    }  }  @Test",shouldAddProductToPurchases
812,  public List<Exception> <extra_id_0>() {    return Collections.unmodifiableList(this.errors);  }  /**   * The number of retries performed.   *   * @return the number of retries performed   */,errors
15,"  public void <extra_id_0>() {    LOGGER.info(""doDraw"");  }",doDraw
3558,  String <extra_id_0>() throws RemoteServiceException;,attemptRequest
2483,  public Iterator<E> <extra_id_0>() {    return iterable.iterator();  }  @Override,iterator
161,  void <extra_id_0>() throws Exception {    assertFalse(dao.getById(1).get().isBooked());  }  @Test,NotBookingRoomShouldNotChangeBookedStatus
3223,"  public static void <extra_id_0>(String[] args) {    new App(""No Danger"", ""Green Light"");  }",main
434,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", null);    assertEquals(user, new User(1, ""janedoe"",            null));  }  @Test",testEquals9
2281,"  public void <extra_id_0>(PlayerDetails details) {    LOGGER.info(""Lottery ticket for {} was submitted. Bank account {} was charged for 3 credits."",        details.getEmail(), details.getBankAccount());  }  @Override",ticketSubmitted
1198,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    final int selectId = 4;    model.setSelectedAlbumNumber(selectId);    assertEquals(albumList[selectId - 1], model.getTitle());  }  @Test",testSetSelectedAlbumNumber_2
527,  void <extra_id_0>(E entity);,persist
987,"  void <extra_id_0>() {    var investorRole = new InvestorRole();    investorRole.setName(""test"");    investorRole.setAmountToInvest(10);    assertEquals(""Investor test has invested 10 dollars"", investorRole.invest());  }",investTest
3160,"    void <extra_id_0>() throws Exception {      final var nonExistingId = getNonExistingCustomerId();      final var newFirstname = ""Douglas"";      final var newLastname = ""MacArthur"";      final var customer = new Customer(nonExistingId, newFirstname, newLastname);      var result = dao.update(customer);      assertFalse(result);      assertFalse(dao.getById(nonExistingId).isPresent());    }    @Test",updationShouldBeFailureAndNotAffectExistingCustomers
2050,  void <extra_id_0>() {    healthChecker = new AsynchronousHealthChecker();    // Replace the logger with the root logger of logback    LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);    // Create and start a ListAppender    LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();    listAppender = new ListAppender<>();    listAppender.start();    // Add the appender to the root logger context    loggerContext.getLogger(Logger.ROOT_LOGGER_NAME).addAppender(listAppender);  }  /**   * Tears down the test environment after each test method.   *   * <p>Shuts down the {@link AsynchronousHealthChecker} instance to prevent resource leaks.   */  @AfterEach,setUp
2438,  public String <extra_id_0>() {    return title;  },toString
977,"  void <extra_id_0>() {    var actual = repository.findOne(new PersonSpecifications.NameEqualSpec(""Terry""));    assertTrue(actual.isPresent());    assertEquals(terry, actual.get());  }  @AfterEach",testFindOneByNameEqualSpec
2603,"  static List<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new ArcherView(), ""Displaying archers""},        new Object[]{new CatapultView(), ""Displaying catapults""},        new Object[]{new ErrorView(), ""Error 500""}    );  }  /**   * @param view           The view that's been tested   * @param displayMessage The expected display message   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
568,  Wizard <extra_id_0>(String name);,findByName
3408,  T <extra_id_0>() throws IsEmptyException {    if (isEmpty()) {      throw new IsEmptyException();    } else {      return front.value;    }  },peek
2108,"    public String <extra_id_0>() {        return String.format(""id=%s name=%s calories=%d"", id, name, calories);    }",toString
2046,"  void <extra_id_0>() {    when(garbageCollectorMXBean.getCollectionCount()).thenReturn(100L);    when(garbageCollectorMXBean.getCollectionTime()).thenReturn(1000L);    when(garbageCollectorMXBean.getMemoryPoolNames()).thenReturn(new String[] {""Eden Space""});    when(memoryPoolMXBean.getUsage()).thenReturn(new MemoryUsage(0, 100, 500, 1000));    when(memoryPoolMXBean.getName()).thenReturn(""Eden Space"");    var health = healthIndicator.health();    assertEquals(Status.UP, health.getStatus());  }  /** Test case to verify that the health status contains a warning when memory usage is high. */  @Test",whenMemoryUsageIsLow_thenHealthIsUp
2739,  public void <extra_id_0>(Weekday day) {  },timePasses
678,"  private static void <extra_id_0>(List<? extends Creature> creatures, Predicate<Creature> selector) {    creatures.stream().filter(selector).map(Objects::toString).forEach(LOGGER::info);  }",print
2116,"    public String <extra_id_0>() {        return String.format(""id=%s topping=%s layers=%s"", id, topping, layers.toString());    }",toString
42,    public int <extra_id_0>() {      return log.size();    },getLogSize
626,  void <extra_id_0>(Nourishment nourishment) {    model.setNourishment(nourishment);  }  @Override,setNourishment
1294,  void <extra_id_0>() {    executor = Executors.newSingleThreadExecutor();    promise = new Promise<>();  }  @Test,setUp
1456,  int <extra_id_0>(long id);  /**   * Update object.   *   * @param obj entity to update   * @return number of modified records   */,getEntityVersionById
2016,"  public String <extra_id_0>(Order order) {    var result = super.execute(order);    var name = order.getName();    if (name == null || name.isEmpty() || name.matches("".*[^\\w|\\s]+.*"")) {      return result + ""Invalid name! "";    } else {      return result;    }  }",execute
3330,"  public void <extra_id_0>(int e) {    inputComponent.update(this, e);    physicComponent.update(this);    graphicComponent.update(this);  }  /**   * Update the velocity based on the acceleration of the GameObject.   *   * @param acceleration the acceleration of the GameObject   */",update
1973,"  void <extra_id_0>() {    final var target = mock(Target.class);    final var filterManager = new FilterManager();    assertEquals(""RUNNING..."", filterManager.filterRequest(mock(Order.class)));    verifyNoMoreInteractions(target);  }  @Test",testFilterRequest
2209,  void <extra_id_0>() {    gameLoop = new GameLoop() {      @Override      protected void processGameLoop() {      }    };  }  @AfterEach,setup
2677,  private synchronized void <extra_id_0>() {    if (!updateThread.isAlive()) {      updateThread.start();      headIndex = 0;      tailIndex = 0;    }  }  /**   * This method adds a new audio into the queue.   *   * @param stream is the AudioInputStream for the method   * @param volume is the level of the audio's volume   */,startThread
2936,  public void <extra_id_0>(String customerId) {    customers.removeIf(customer -> customer.getId().equals(customerId));  },delete
3403,"  protected String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var req = (MessageRequest) parameters[0];    if (this.database.get(req.reqId) == null) { //idempotence, in case db fails here      database.add(req); //if successful:      LOGGER.info(sendMessage(req.msg));      return req.reqId;    }    return null;  }",updateDb
1690,  public boolean <extra_id_0>() {    return this.opened;  }  @Override,isOpened
3775,"  private long <extra_id_0>(int value) {    var startTime = System.currentTimeMillis();    var result = RemoteService.getRemoteService().doRemoteFunction(value);    var timeTaken = System.currentTimeMillis() - startTime;    LOGGER.info(""Time taken (ms): {}"", timeTaken);    return result;  }",checkLatency
3190,"    void <extra_id_0>() {      final var newFirstname = ""Bernard"";      final var newLastname = ""Montgomery"";      assertThrows(Exception.class, () -> {        dao.update(new Customer(existingCustomer.getId(), newFirstname, newLastname));      });    }    @Test",updatingACustomerFailsWithFeedbackToTheClient
2734,"  private void <extra_id_0>(final Weekday specialDay, final Event event) {    final var defaultObserver = mock(EventObserver.class);    final var observer1 = mock(EventObserver.class);    final var observer2 = mock(EventObserver.class);    final var emitter = this.factoryWithDefaultObserver.apply(defaultObserver, event);    emitter.registerObserver(observer1, event);    emitter.registerObserver(observer2, event);    testAllDays(specialDay, event, emitter, defaultObserver, observer1, observer2);  }",testAllDaysWithDefaultObserver
1468,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1705,  public void <extra_id_0>(String name) {    this.fileName = name;  }  @Override,setFileName
2107,"    public String <extra_id_0>() {        return String.format(""CakeToppingInfo id=%d name=%s calories=%d"",                id.orElse(-1L), name, calories);    }",toString
2593,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldLaunchApp
264,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
2346,"  void <extra_id_0>() {    var details1 = new PlayerDetails(""tom@foo.bar"", ""11212-123434"", ""+12323425"");    var details2 = new PlayerDetails(""tom@foo.bar"", ""11212-123434"", ""+12323425"");    assertEquals(details1, details2);    var details3 = new PlayerDetails(""john@foo.bar"", ""16412-123439"", ""+34323432"");    assertNotEquals(details1, details3);  }",testEquals
2370,"  public static void <extra_id_0>(String[] args) {    // Dummy Persons    Person person1 = new Person(1, ""John"", 27304159);    Person person2 = new Person(2, ""Thomas"", 42273631);    Person person3 = new Person(3, ""Arthur"", 27489171);    Person person4 = new Person(4, ""Finn"", 20499078);    Person person5 = new Person(5, ""Michael"", 40599078);    // Init database    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    db.insert(person1);    db.insert(person2);    db.insert(person3);    db.insert(person4);    db.insert(person5);    // Init a personFinder    PersonFinder finder = new PersonFinder();    finder.setDb(db);    // Find persons in DataBase not the map.    LOGGER.info(finder.getPerson(2).toString());    LOGGER.info(finder.getPerson(4).toString());    LOGGER.info(finder.getPerson(5).toString());    // Find the person in the map.    LOGGER.info(finder.getPerson(2).toString());  }",main
1122,  private int <extra_id_0>(int parentPos) {    return 2 * parentPos + 1;  },leftChildIndex
1508,"  public AlbumPage <extra_id_0>(int numberOfSongs) {    var numberOfSongsNumberField = (HtmlNumberInput) page.getElementById(""numberOfSongs"");    numberOfSongsNumberField.setText(Integer.toString(numberOfSongs));    return this;  }  /**   * Cancel changes made by clicking the cancel button.   *   * @return {@link AlbumListPage}   */",changeNumberOfSongs
2848,"  void <extra_id_0>() {    final var iss = new SpaceStationIss(1, 2, 3, 4);    assertEquals(1, iss.getLeft());    assertEquals(2, iss.getTop());    assertEquals(3, iss.getRight());    assertEquals(4, iss.getBottom());    assertFalse(iss.isOnFire());    assertFalse(iss.isDamaged());    assertEquals(""SpaceStationIss at [1,2,3,4] damaged=false onFire=false"", iss.toString());  }  /**   * Test what happens we collide with an asteroid   */  @Test",testConstructor
3344,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",employeeDatabaseUnavailableCase
156,"  void <extra_id_0>() {    assertEquals(String.format(""Room(id=%s, roomType=%s, price=%s, booked=%s)"",        room.getId(), room.getRoomType(), room.getPrice(), room.isBooked()), room.toString());  }",testToString
3040,"  public void <extra_id_0>() {    Optional<String> purchasesToShow =        purchases.stream()            .map(p -> p.getName() + "" - $"" + p.getSalePrice().getAmount())            .reduce((p1, p2) -> p1 + "", "" + p2);    if (purchasesToShow.isPresent()) {      LOGGER.info(name + "" bought: "" + purchasesToShow.get());    } else {      LOGGER.info(name + "" didn't bought anything"");    }  }  /**   * Print customer's money balance.   */",showPurchases
3105,"  void <extra_id_0>() throws Exception {    List<Tobacco> tobaccos = List.of(        new OldTobyTobacco(),        new RivendellTobacco(),        new SecondBreakfastTobacco()    );    // Verify if the wizard is smoking the correct tobacco ...    tobaccos.forEach(tobacco -> {      final AdvancedWizard advancedWizard = new AdvancedWizard(tobacco);      advancedWizard.smoke();      String lastMessage = appender.getLastMessage();      assertEquals(""AdvancedWizard smoking "" + tobacco.getClass().getSimpleName(), lastMessage);    });    // ... and nothing else is happening.    assertEquals(tobaccos.size(), appender.getLogSize());  }",testSmokeEveryThing
3435,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObjectNoPaymentException3();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                c.placeOrder(order);                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoException4
2732,"  private void <extra_id_0>(final Weekday specialDay, final Event event, final E emitter,                           final EventObserver... observers) {    for (final var weekday : Weekday.values()) {      // Pass each week of the day, day by day to the event emitter      emitter.timePasses(weekday);      if (weekday == specialDay) {        // On a special day, every observer should have received the event        for (final var observer : observers) {          verify(observer, times(1)).onEvent(eq(event));        }      } else {        // On any other normal day, the observers should have received nothing at all        verifyNoMoreInteractions(observers);      }    }    // The observers should not have received any additional events after the week    verifyNoMoreInteractions(observers);  }  /**   * Go over every day of the month, and check if the event is emitted on the given day. Use an   * event emitter without a default observer   *   * @param specialDay The special day on which an event is emitted   * @param event      The expected event emitted by the test object   */",testAllDays
1307,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1657,"  void <extra_id_0>() {    appender.stop();  }  /**   * Verify if the {@link GiantView} does what it has to do: Print the {@link GiantModel} to the   * standard out stream, nothing more, nothing less.   */  @Test",tearDown
2925,"  public void <extra_id_0>() {    LOGGER.info(""Start AI Game Component"");    IntStream.range(0, numEntities).forEach(i -> aiComponents[i] = new AiComponent());  }  /**   * Update AI component of Game.   */",start
201,  public void <extra_id_0>(long id) {    this.id = id;  },setId
1285,"  private void <extra_id_0>() {    calculateLineCount();    calculateLowestFrequencyChar();  }  /*   * Calculate the lowest frequency character and when that promise is fulfilled,   * consume the result in a Consumer<Character>   */",promiseUsage
1289,"  private Promise<Map<Character, Long>> <extra_id_0>() {    return download(DEFAULT_URL).thenApply(Utility::characterFrequency);  }  /*   * Download the file at DEFAULT_URL and when that promise is fulfilled,   * then promise to apply function to count lines in that file.   */",characterFrequency
3707,  UserAccount <extra_id_0>(UserAccount userAccount);  /**   * Update record.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */,writeToDb
3227,"  public void <extra_id_0>() {    dependentObjects = new DependentObject[]{        new MessageDependentObject(), new SignalDependentObject()};  }",init
789,  void <extra_id_0>() {    final King king = new King();    king.getDrink();    king.receiveCompliments();    king.changeMood();    assertFalse(king.getMood());  },testHungryDrunkComplimentedKing
3662,"  void <extra_id_0>() {    //Arrange    var cash = new Cash(8);    //Act    var result = cash.minus(5);    //Assert    assertTrue(result);    assertEquals(3, cash.count());  }  @Test",testMinus
755,"  void <extra_id_0>(Collection<? extends Point> toCheck, Map<Integer, Bubble> allBubbles) {    var toBePopped = false; //if any other bubble collides with it, made true    for (var point : toCheck) {      var otherId = point.id;      if (allBubbles.get(otherId) != null //the bubble hasn't been popped yet          && this.id != otherId  //the two bubbles are not the same          && this.touches(allBubbles.get(otherId))) { //the bubbles touch        allBubbles.get(otherId).pop(allBubbles);        toBePopped = true;      }    }    if (toBePopped) {      this.pop(allBubbles);    }  }",handleCollision
2452,  void <extra_id_0>() {    final var integers = Collections.<Integer>emptyList();    final var first = createFluentIterable(integers).first();    assertNotNull(first);    assertFalse(first.isPresent());  }  @Test,testFirstEmptyCollection
3062,  public static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setURL(App.H2_DB_URL);    return dataSource;  },createDataSource
1929,  void <extra_id_0>(Message message);,onMessage
3480,"  void <extra_id_0>() {    var wizard = new Wizard();    var goblin = new Goblin();    wizard.castSpell(goblin::changeSize);    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);    wizard.castSpell(goblin::changeVisibility);    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.INVISIBLE);    wizard.undoLastSpell();    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);    wizard.undoLastSpell();    verifyGoblin(goblin, GOBLIN, Size.NORMAL, Visibility.VISIBLE);    wizard.redoLastSpell();    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.VISIBLE);    wizard.redoLastSpell();    verifyGoblin(goblin, GOBLIN, Size.SMALL, Visibility.INVISIBLE);  }  /**   * This method asserts that the passed goblin object has the name as expectedName, size as   * expectedSize and visibility as expectedVisibility.   *   * @param goblin             a goblin object whose state is to be verified against other   *                           parameters   * @param expectedName       expectedName of the goblin   * @param expectedSize       expected size of the goblin   * @param expectedVisibility expected visibility of the goblin   */",testCommand
3274,"  void <extra_id_0>() {    var author = queryService.getAuthorByUsername(""new_username2"");    var expectedAuthor = new Author(""new_name2"", ""new_email2"", ""new_username2"");    assertEquals(expectedAuthor, author);  }  @Test",testGetUpdatedAuthorByUsername
3376,"    void <extra_id_0>(T obj, Exception e);  }  private static final SecureRandom RANDOM = new SecureRandom();  private final Operation op;  private final HandleErrorIssue<T> handleError;  private final int maxAttempts;  private final long maxDelay;  private final AtomicInteger attempts;  private final Predicate<Exception> test;  private final List<Exception> errors;  Retry(Operation op, HandleErrorIssue<T> handleError, int maxAttempts,        long maxDelay, Predicate<Exception>... ignoreTests) {    this.op = op;    this.handleError = handleError;    this.maxAttempts = maxAttempts;    this.maxDelay = maxDelay;    this.attempts = new AtomicInteger();    this.test = Arrays.stream(ignoreTests).reduce(Predicate::or).orElse(e -> false);    this.errors = new ArrayList<>();  }  /**   * Performing the operation with retries.   *   * @param list is the exception list   * @param obj  is the parameter to be passed into handleIsuue method   */  public void perform(List<Exception> list, T obj) {    do {      try {        op.operation(list);        return;      } catch (Exception e) {        this.errors.add(e);        if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {          this.handleError.handleIssue(obj, e);          return; //return here...dont go further        }        try {          long testDelay =              (long) Math.pow(2, this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);          long delay = Math.min(testDelay, this.maxDelay);          Thread.sleep(delay);        } catch (InterruptedException f) {          //ignore        }      }    } while (true);  }}",handleIssue
603,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    GiantView giantView = new GiantView();    Dispatcher dispatcher = new Dispatcher(giantView);    GiantController giantController = new GiantController(dispatcher);    assertDoesNotThrow(() -> giantController.updateView(model));  }",testUpdateView
3852,  default Optional<String> <extra_id_0>() {    return Optional.ofNullable((String) get(Property.MODEL.toString()));  },getModel
3117,"  void <extra_id_0>() {    var u1 = new User(""Tom"", ""Hanks"", true, ""tom@hanks.com"");    var u2 = userConverter.convertFromDto(userConverter.convertFromEntity(u1));    assertEquals(u1, u2);  }  /**   * Tests whether a converter created of opposite functions holds equality as a bijection.   */  @Test",testConversionsStartingFromDomain
1213,"  public void <extra_id_0>() {    LOGGER.info(""Save data to PresentationModel"");    model.setArtist(txtArtist.getText());    model.setTitle(txtTitle.getText());    model.setIsClassical(chkClassical.isSelected());    model.setComposer(txtComposer.getText());  }  /**   * load the data from PresentationModel.   */",saveToMod
2172,  private void <extra_id_0>(TreeNode<T> right) {    this.right = right;  }  /**   * Inserts new TreeNode based on a given value into the subtree represented by self.   *   * @param valToInsert The value to insert as a new TreeNode   */,setRight
1674,  public void <extra_id_0>(GiantModel giant) {    LOGGER.info(giant.toString());  },displayGiant
3489,"  public void <extra_id_0>() {    LOGGER.info(""{}, [size={}] [visibility={}]"", this, getSize(), getVisibility());  }  /**   * Changes the size of the target.   */",printStatus
271,"  void <extra_id_0>() {    assertEquals(0, source.accumulateSum(-1, 0, 1));  }  @Test",testAccumulateSum
2136,    void <extra_id_0>(CakeLayerInfo layerInfo);    /**     * Get available cake layers.     */,saveNewLayer
2174,  private TreeNode<T> <extra_id_0>(T valToInsert) {    TreeNode<T> parent = null;    var curr = this;    while (curr != null) {      parent = curr;      curr = curr.traverseOneLevelDown(valToInsert);    }    return parent;  }  /**   * Returns left or right child of self based on a value that would be inserted; maintaining the   * integrity of the BST.   *   * @param value The value of the TreeNode that would be inserted beneath self   * @return The child TreeNode of self which represents the subtree where `value` would be inserted   */,getParentNodeOfValueToBeInserted
1492,"  public AlbumPage <extra_id_0>(int numberOfSongs) {    var numberOfSongsNumberField = (HtmlNumberInput) page.getElementById(""numberOfSongs"");    numberOfSongsNumberField.setText(Integer.toString(numberOfSongs));    return this;  }  /**   * Cancel changes made by clicking the cancel button   *   * @return {@link AlbumListPage}   */",changeNumberOfSongs
1832,"  void <extra_id_0>() {    var atmw = new ArrayTransposeMasterWorker();    var matrix = new int[][]{        {1, 2, 3, 4, 5},        {1, 2, 3, 4, 5},        {1, 2, 3, 4, 5},        {1, 2, 3, 4, 5},        {1, 2, 3, 4, 5}    };    var matrixTranspose = new int[][]{        {1, 1, 1, 1, 1},        {2, 2, 2, 2, 2},        {3, 3, 3, 3, 3},        {4, 4, 4, 4, 4},        {5, 5, 5, 5, 5}    };    var i = new ArrayInput(matrix);    var r = (ArrayResult) atmw.getResult(i);    assertTrue(ArrayUtilityMethods.matricesSame(r.data, matrixTranspose));  }",getResultTest
109,"  void <extra_id_0>(Cell c, CellPool pool, Cell[][] cellMatrix) {    if (this.positionY >= c.positionY) {      this.crush(pool, cellMatrix);      c.crush(pool, cellMatrix);    } else {      c.crush(pool, cellMatrix);      this.crush(pool, cellMatrix);    }  }",handleCrush
3512,  public boolean <extra_id_0>() {    return this.handled;  }  @Override,isHandled
2261,"  public Optional<LotteryTicket> <extra_id_0>(LotteryTicketId id) {    return ticketsCollection        .find(new Document(TICKET_ID, id.getId()))        .limit(1)        .into(new ArrayList<>())        .stream()        .findFirst()        .map(this::docToTicket);  }  @Override",findById
799,"  public static void <extra_id_0>(String[] args) {    //Create the invoice generator with product cost as 50 and foreign product tax    var internationalProductInvoice = new InvoiceGenerator(PRODUCT_COST,        new ForeignTaxCalculator());    LOGGER.info(""Foreign Tax applied: {}"", """" + internationalProductInvoice.getAmountWithTax());    //Create the invoice generator with product cost as 50 and domestic product tax    var domesticProductInvoice = new InvoiceGenerator(PRODUCT_COST, new DomesticTaxCalculator());    LOGGER.info(""Domestic Tax applied: {}"", """" + domesticProductInvoice.getAmountWithTax());  }",main
658,  public boolean <extra_id_0>(Creature t) {    return t.getMovement().equals(movement);  },test
89,  public void <extra_id_0>(Weapon weapon) {    //Some delete logic to DB  },delete
1437,  public void <extra_id_0>(String sortBy) {    this.sortBy = sortBy;  },setSortBy
817,  public T <extra_id_0>() throws BusinessException {    do {      try {        return this.op.perform();      } catch (BusinessException e) {        this.errors.add(e);        if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {          throw e;        }        try {          Thread.sleep(this.delay);        } catch (InterruptedException f) {          //ignore        }      }    } while (true);  },perform
3211,    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertTrue(newBean.isWorldNewsInterest());        newBean.setWorldNewsInterest(false);        assertFalse(newBean.isWorldNewsInterest());    }    @Test,testWorldSetterGetter
965,"  void <extra_id_0>() {    var terry = repository.findByName(""Terry"");    repository.delete(terry);    assertEquals(3, repository.count());    assertNull(repository.findByName(""Terry""));  }  @Test",testDelete
3710,  public static DbManager <extra_id_0>(final boolean isMongo) {    if (isMongo) {      return new MongoDb();    }    return new VirtualDb();  },initDb
1281,  public boolean <extra_id_0>() {    return state > RUNNING;  }  @Override,isDone
2315,  public boolean <extra_id_0>(Object obj) {    if (this == obj) {      return true;    }    if (obj == null) {      return false;    }    if (getClass() != obj.getClass()) {      return false;    }    var other = (LotteryTicket) obj;    if (lotteryNumbers == null) {      if (other.lotteryNumbers != null) {        return false;      }    } else if (!lotteryNumbers.equals(other.lotteryNumbers)) {      return false;    }    if (playerDetails == null) {      return other.playerDetails == null;    } else {      return playerDetails.equals(other.playerDetails);    }  },equals
641,  public int <extra_id_0>() {    return id;  }  @Override,getId
393,"  public void <extra_id_0>() {    LOGGER.info(""{} gets angry!"", mammoth);  }",onEnterState
470,"  public int <extra_id_0>() throws IOException {    var sql = ""INSERT INTO WORLD (ID, COUNTRY) VALUES (?, ?)"";    try (var connection = dataSource.getConnection();         var preparedStatement = connection.prepareStatement(sql);         ByteArrayOutputStream baos = new ByteArrayOutputStream();         ObjectOutputStream oss = new ObjectOutputStream(baos)) {      oss.writeObject(country);      oss.flush();      preparedStatement.setInt(1, country.getCode());      preparedStatement.setBlob(2, new ByteArrayInputStream(baos.toByteArray()));      preparedStatement.execute();      return country.getCode();    } catch (SQLException e) {      LOGGER.info(""Exception thrown "" + e.getMessage());    }    return -1;  }  /**   * This method will select a data item from database and deserialize it.   * @return int type, if successfully select and deserialized object from database then return country code,   *     else return -1.   * @throws IOException if any.   * @throws ClassNotFoundException if any.   */  @Override",insertCountry
2928,"  public void <extra_id_0>() {    LOGGER.info(""Update Physics Game Component "");    // Process physics.    IntStream.range(0, numEntities)        .filter(i -> physicsComponents.length > i && physicsComponents[i] != null)        .forEach(i -> physicsComponents[i].update());  }",update
1814,  abstract Result<?> <extra_id_0>();,executeOperation
3337,"  public void <extra_id_0>(GameObject gameObject) {    LOGGER.info(gameObject.getName() + ""'s current velocity: "" + gameObject.getVelocity());  }",update
1897,  public synchronized Heavy <extra_id_0>() {    if (heavy == null) {      heavy = new Heavy();    }    return heavy;  },getHeavy
3237,    Book.AddPublicationDate <extra_id_0>(String title);  }  /**   * Functional interface which adds the publication date to a book.   */,withTitle
328,    BuildStep <extra_id_0>();  }  /**   * This step is in charge of the spell. Spell choice : Next Step available : AbilityStep No spell   * choice : Next Step available : BuildStep   */,noWeapon
3433,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObjectNoPaymentException2();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoException2
2594,"  void <extra_id_0>() {    //given    var trojan = new SimpleProbableThreat(""Troyan-ArcBomb"", 1, ThreatType.TROJAN, 0.99);    var rootkit = new SimpleProbableThreat(""Rootkit-System"", 2, ThreatType.ROOTKIT, 0.8);    List<ProbableThreat> probableThreats = List.of(trojan, rootkit);    var simpleProbabilisticThreatAwareSystem =        new SimpleProbabilisticThreatAwareSystem(""System-1"", probableThreats);    //when    var filtered = simpleProbabilisticThreatAwareSystem.filtered()        .by(probableThreat -> Double.compare(probableThreat.probability(), 0.99) == 0);    //then    assertEquals(filtered.threats().size(), 1);    assertEquals(filtered.threats().get(0), trojan);  }",shouldFilterByProbability
3134,"  private void <extra_id_0>(Connection connection, PreparedStatement statement, ResultSet resultSet) {    try {      resultSet.close();      statement.close();      connection.close();    } catch (SQLException e) {      LOGGER.info(""Exception thrown "" + e.getMessage());    }  }",mutedClose
3773,"  public long <extra_id_0>(int value) {    long waitTime = (long) Math.floor(randomProvider.random() * 1000);    try {      sleep(waitTime);    } catch (InterruptedException e) {      LOGGER.error(""Thread sleep state interrupted"", e);      Thread.currentThread().interrupt();    }    return waitTime <= THRESHOLD ? value * 10        : RemoteServiceStatus.FAILURE.getRemoteServiceStatusValue();  }",doRemoteFunction
1769,"  public void <extra_id_0>() {    if (!creature.acquire(target)) {      try {        fightForTheSword(creature, target.getLocker(), target);      } catch (InterruptedException e) {        LOGGER.error(e.getMessage());        Thread.currentThread().interrupt();      }    } else {      LOGGER.info(""{} has acquired the sword!"", target.getLocker().getName());    }  }  /**   * Keeps on fighting until the Lockable is possessed.   *   * @param reacher as the source creature.   * @param holder as the foe.   * @param sword as the Lockable to posses.   * @throws InterruptedException in case of interruption.   */",run
90,  void <extra_id_0>(T entity);  /**   * Any register modify operation occurring on UnitOfWork is only going to be performed on commit.   */,registerNew
1052,    int <extra_id_0>() {      return --currentNumber;    },back
2302,"  public LotteryTicketCheckResult <extra_id_0>(      LotteryTicketId id,      LotteryNumbers winningNumbers  ) {    return LotteryUtils.checkTicketForPrize(repository, id, winningNumbers);  }",checkTicketForPrize
3249,  Author <extra_id_0>(String username);,getAuthorByUsername
1755,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
728,  void <extra_id_0>();,show
715,"    public MoneyTransaction <extra_id_0>(Double price) {      if (price > amount) {        return null;      }      return new MoneyTransaction(amount, price);    }",withdraw
60,  public void <extra_id_0>(UnitVisitor visitor) {    visitor.visit(this);    super.accept(visitor);  }  @Override,accept
2162,  public static void <extra_id_0>(String[] args) {    demonstrateTreasureChestIteratorForType(RING);    demonstrateTreasureChestIteratorForType(POTION);    demonstrateTreasureChestIteratorForType(WEAPON);    demonstrateTreasureChestIteratorForType(ANY);    demonstrateBstIterator();  },main
3618,"  void <extra_id_0>(T value, Optional<Exception> ex);",onComplete
107,"  void <extra_id_0>(CellPool pool, Cell[][] cellMatrix) {    //take out from this position and put back in pool    pool.addNewCell(this);    this.fillThisSpace(pool, cellMatrix);  }",crush
2578,  ThreatType <extra_id_0>();,type
1488,"  public AlbumPage <extra_id_0>(String albumTitle) {    var albumTitleInputTextField = (HtmlTextInput) page.getElementById(""albumTitle"");    albumTitleInputTextField.setText(albumTitle);    return this;  }  /**   * Sets the artist input text field   *   * @param artist the new artist value to set   * @return {@link AlbumPage}   */",changeAlbumTitle
2845,"  void <extra_id_0>() {    testCollision(        new SpaceStationIss(1, 1, 3, 4),        true, true,        false, true    );  }  /**   * Test what happens we collide with MIR   */  @Test",testCollideSpaceStationIss
3492,"  public String <extra_id_0>() {    return ""Goblin"";  }",toString
1858,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1586,  public void <extra_id_0>(final String value) {    this.output.println(value);  }  /**   * Used to print a error message.   *   * @param value will be printed on error file   */,printString
2292,"  public void <extra_id_0>(PlayerDetails details) {    var document = new Document(EMAIL, details.getEmail());    document.put(PHONE, details.getPhoneNumber());    document.put(""bank"", details.getBankAccount());    document.put(MESSAGE, ""Lottery ticket could not be submitted because lack of funds."");    eventsCollection.insertOne(document);    stdOutEventLog.ticketSubmitError(details);  }  @Override",ticketSubmitError
2656,  public static Account <extra_id_0>(int accountNo) {    return Optional.of(accountNo)        .map(accounts::get)        .map(Account::copy)        .orElse(null);  }  /**   * Reset state.   */,getAccount
25,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
1772,"  public synchronized void <extra_id_0>() {    LOGGER.info(""{} {} has been slayed!"", type, name);    for (Lockable lockable : instruments) {      lockable.unlock(this);    }    this.instruments.clear();  }  /**   * Attacks a foe.   *   * @param creature as the foe to be attacked.   */",kill
1182,"  public static void <extra_id_0>(String[] args) {    var factory = new HeroFactoryImpl(        new ElfMage(""cooking""),        new ElfWarlord(""cleaning""),        new ElfBeast(""protecting"")    );    var mage = factory.createMage();    var warlord = factory.createWarlord();    var beast = factory.createBeast();    LOGGER.info(mage.toString());    LOGGER.info(warlord.toString());    LOGGER.info(beast.toString());    factory = new HeroFactoryImpl(        new OrcMage(""axe""),        new OrcWarlord(""sword""),        new OrcBeast(""laser"")    );    mage = factory.createMage();    warlord = factory.createWarlord();    beast = factory.createBeast();    LOGGER.info(mage.toString());    LOGGER.info(warlord.toString());    LOGGER.info(beast.toString());  }",main
2745,"  public final void <extra_id_0>(EventObserver obs, Event e) {    if (!observerLists.containsKey(e)) {      observerLists.put(e, new LinkedList<>());    }    if (!observerLists.get(e).contains(obs)) {      observerLists.get(e).add(obs);    }  }",registerObserver
384,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1511,"  public LoginPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      LOGGER.error(""An error occurred on navigateToPage."", e);    }    return this;  }  /**   * {@inheritDoc}   */  @Override",navigateToPage
2876,"  public UnitExtension <extra_id_0>(String extensionName) {    if (extensionName.equals(""SergeantExtension"")) {      return Optional.ofNullable(unitExtension).orElseGet(() -> new Sergeant(this));    }    return super.getUnitExtension(extensionName);  }",getUnitExtension
3298,  public void <extra_id_0>(final DataType data) {    if (data instanceof StartingData) {      handleEvent((StartingData) data);    } else if (data instanceof StoppingData) {      handleEvent((StoppingData) data);    }  },accept
665,  public boolean <extra_id_0>(Creature t) {    return t.getMass().smallerThanOrEq(mass);  },test
1634,  void <extra_id_0>() {    assertNotNull(bank.getAccounts());  }  @Test,GetAccountHaveNotBeNull
2294,"  public void <extra_id_0>(PlayerDetails details, int prizeAmount) {    var document = new Document(EMAIL, details.getEmail());    document.put(PHONE, details.getPhoneNumber());    document.put(""bank"", details.getBankAccount());    document.put(MESSAGE, String        .format(""Lottery ticket won! The bank account was deposited with %d credits."",            prizeAmount));    eventsCollection.insertOne(document);    stdOutEventLog.ticketWon(details, prizeAmount);  }  @Override",ticketWon
447,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setURL(DB_URL);    return dataSource;  },createDataSource
2153,"  private static long <extra_id_0>(long i) {    try {      Thread.sleep(i);    } catch (InterruptedException e) {      LOGGER.error(""Exception caught."", e);    }    return i * (i + 1) / 2;  }",ap
904,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1787,"  void <extra_id_0>() {    elf.hit(CreatureStats.ELF_HEALTH.getValue() / 2);    Assertions.assertEquals(CreatureStats.ELF_HEALTH.getValue() / 2, elf.getHealth());    elf.hit(CreatureStats.ELF_HEALTH.getValue() / 2);    Assertions.assertFalse(elf.isAlive());    Assertions.assertEquals(0, orc.getInstruments().size());    Assertions.assertTrue(orc.acquire(sword));    Assertions.assertEquals(1, orc.getInstruments().size());    orc.kill();    Assertions.assertEquals(0, orc.getInstruments().size());  }  @Test",hitTest
1258,"  public void <extra_id_0>(Wizard wizard) {    LOGGER.info(""{} enters the tower."", wizard);  }",enter
188,"  public Boolean <extra_id_0>(Room room) throws Exception {    if (getById(room.getId()).isPresent()) {      return false;    }    try (var connection = getConnection();         var statement = connection.prepareStatement(""INSERT INTO ROOMS VALUES (?,?,?,?)"")) {      statement.setInt(1, room.getId());      statement.setString(2, room.getRoomType());      statement.setInt(3, room.getPrice());      statement.setBoolean(4, room.isBooked());      statement.execute();      return true;    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }  @Override",add
3292,  DataBus <extra_id_0>();  /**   * Set the data-bus the event will be sent on.   *   * @param dataBus The data-bus   */,getDataBus
1713,  public boolean <extra_id_0>() {    return this.loaded;  },isLoaded
3499,"  private void <extra_id_0>() {    handlers = Arrays.asList(new OrcCommander(), new OrcOfficer(), new OrcSoldier());  }  /**   * Handle request by the chain.   */",buildChain
1570,"  void <extra_id_0>() throws FileNotFoundException {    /* Get singleton instance of File Logger Module */    final var fileLoggerModule = FileLoggerModule.getSingleton();    /* Prepare the essential sub modules, to perform the sequence of jobs */    fileLoggerModule.prepare();    /* Print 'Error' in file */    fileLoggerModule.printErrorString(ERROR);    /* Test if 'Message' is printed in file */    assertEquals(ERROR, readFirstLine(ERROR_FILE));    /* Un-prepare to cleanup the modules */    fileLoggerModule.unprepare();  }  /**   * This test verify that nothing is printed in error file   *   * @throws FileNotFoundException if program is not able to find log files (output.txt and   *                               error.txt)   */  @Test",testFileErrorMessage
1860,"  static Stream<Arguments> <extra_id_0>() {    return Stream.of(        Arguments.of((Supplier<PartyMember>) Hobbit::new),        Arguments.of((Supplier<PartyMember>) Hunter::new),        Arguments.of((Supplier<PartyMember>) Rogue::new),        Arguments.of((Supplier<PartyMember>) Wizard::new)    );  }",dataProvider
3501,  public boolean <extra_id_0>(Request req) {    return req.getRequestType() == RequestType.COLLECT_TAX;  }  @Override,canHandleRequest
427,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""iloveyou"");    assertEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals2
1480,"  public AlbumPage <extra_id_0>(String albumTitle) {    // uses XPath to find list of html anchor tags with the class album in it    var albumLinks = (List<HtmlAnchor>) page.getByXPath(""//tr[@class='album']//a"");    for (var anchor : albumLinks) {      if (anchor.getTextContent().equals(albumTitle)) {        try {          anchor.click();          return new AlbumPage(webClient);        } catch (IOException e) {          e.printStackTrace();        }      }    }    throw new IllegalArgumentException(""No links with the album title: "" + albumTitle);  }",selectAlbum
2981,  public List<String> <extra_id_0>() {    var data = df.fetch();    countries = data.isEmpty() ? countries : data;    return countries;  },fetch
1993,  public void <extra_id_0>(Filter filter) {    filterChain.addFilter(filter);  },addFilter
854,  void <extra_id_0>(NioReactor reactor) {    this.reactor = reactor;  }  /**   * Get channel.   *   * @return the wrapped NIO channel.   */,setReactor
3802,"  void <extra_id_0>() {    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);    final var kingdom = app.getKingdom();    final var elfArmy = kingdom.getArmy();    assertTrue(elfArmy instanceof ElfArmy);    assertEquals(ElfArmy.DESCRIPTION, elfArmy.getDescription());    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);    final var orcArmy = kingdom.getArmy();    assertTrue(orcArmy instanceof OrcArmy);    assertEquals(OrcArmy.DESCRIPTION, orcArmy.getDescription());  }  @Test",verifyArmyCreation
953,"    public Predicate <extra_id_0>(Root<Person> root, CriteriaQuery<?> query, CriteriaBuilder cb) {      return cb.equal(root.get(""name""), this.name);    }  }}",toPredicate
1818,"  ArrayResult <extra_id_0>() {    // number of rows in final result is number of rows in any of obtained results from workers    var allResultData = this.getAllResultData();    var rows = ((ArrayResult) allResultData.elements().nextElement()).data.length;    var elements = allResultData.elements();    var columns = 0; // columns = sum of number of columns in all results obtained from workers    while (elements.hasMoreElements()) {      columns += ((ArrayResult) elements.nextElement()).data[0].length;    }    var resultData = new int[rows][columns];    var columnsDone = 0; //columns aggregated so far    var workers = this.getWorkers();    for (var i = 0; i < this.getExpectedNumResults(); i++) {      //result obtained from ith worker      var worker = workers.get(i);      var workerId = worker.getWorkerId();      var work = ((ArrayResult) allResultData.get(workerId)).data;      for (var m = 0; m < work.length; m++) {        //m = row number, n = columns number        System.arraycopy(work[m], 0, resultData[m], columnsDone, work[0].length);      }      columnsDone += work[0].length;    }    return new ArrayResult(resultData);  }",aggregateData
1797,"  void <extra_id_0>() {    var thief = new Thief();    assertThat(thief, not(instanceOf(Permission.class)));  }",testThief
1976,"  void <extra_id_0>() {    final var order = new Order();    order.setContactNumber(EXPECTED_VALUE);    assertEquals(EXPECTED_VALUE, order.getContactNumber());  }  @Test",testSetContactNumber
1271,"    public void <extra_id_0>() {      try {        action.accept(src.get());        dest.fulfill(null);      } catch (Throwable throwable) {        dest.fulfillExceptionally((Exception) throwable.getCause());      }    }  }  /**   * Accesses the value from source promise, then fulfills the destination promise using the   * transformed value. The source value is transformed using the transformation function.   */  private class TransformAction<V> implements Runnable {    private final Promise<T> src;    private final Promise<V> dest;    private final Function<? super T, V> func;    private TransformAction(Promise<T> src, Promise<V> dest, Function<? super T, V> func) {      this.src = src;      this.dest = dest;      this.func = func;    }    @Override    public void run() {      try {        dest.fulfill(func.apply(src.get()));      } catch (Throwable throwable) {        dest.fulfillExceptionally((Exception) throwable.getCause());      }    }  }}",run
1883,"  public void <extra_id_0>(Party party) {    LOGGER.info(""{} joins the party"", this);    this.party = party;  }  @Override",joinedParty
889,  public static void <extra_id_0>(String[] args) throws IOException {    new App(new ThreadPoolDispatcher(2)).start();  }  /**   * Starts the NIO reactor.   *   * @throws IOException if any channel fails to bind.   */,main
2644,"  void <extra_id_0>() {    var user = new User(""Paid User"");    UserGroup.addUserToPaidGroup(user);    assertTrue(UserGroup.isPaid(user));  }  @Test",testAddUserToPaidGroup
2138,    void <extra_id_0>();,deleteAllCakes
1226,"  public void <extra_id_0>(final String value) {    LOGGER.info(""Change album artist from {} to {}"",            selectedAlbum.getArtist(), value);    selectedAlbum.setArtist(value);  }  /**   * Gets a boolean value which represents whether the album is classical.   *   * @return is the album classical.   */",setArtist
800,  double <extra_id_0>(double amount);,calculate
3271,"  void <extra_id_0>(String title, double price);",bookPriceUpdated
2270,  protected void <extra_id_0>() {    bind(LotteryTicketRepository.class).to(InMemoryTicketRepository.class);    bind(LotteryEventLog.class).to(StdOutEventLog.class);    bind(WireTransfers.class).to(InMemoryBank.class);  },configure
2381,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    Person person = new Person(2,""Thomas"",42273690);    db.update(person);    Assertions.assertEquals(person,db.find(2),""Incorrect update."");  }  @Test",updateInDb
3631,    public boolean <extra_id_0>() {      return state > RUNNING;    }    @Override,isCompleted
2467,  Optional<E> <extra_id_0>();  /**   * Evaluates the iteration and leaves only the count first elements.   *   * @return the first count elements as an Iterable   */,first
1349,"  public String <extra_id_0>(SignupModel user) {    LOGGER.info(""display user html"" + "" name "" + user.getName() + "" email "" + user.getEmail());    return ""/user"";  }",display
1153,  void <extra_id_0>(String body);,setBody
1513,"  public LoginPage <extra_id_0>(String username) {    var usernameInputTextField = (HtmlTextInput) page.getElementById(""username"");    usernameInputTextField.setText(username);    return this;  }  /**   * Enters the password into the password input password field.   *   * @param password the password to enter   * @return {@link LoginPage}   */",enterUsername
3692,"  public void <extra_id_0>() {    LOGGER.info(""# CachingPolicy.ASIDE"");    appManager.initCachingPolicy(CachingPolicy.ASIDE);    LOGGER.info(appManager.printCacheContent());    var userAccount3 = new UserAccount(""003"",            ""Adam"",            ""He likes food."");    var userAccount4 = new UserAccount(""004"",            ""Rita"",            ""She hates cats."");    var userAccount5 = new UserAccount(""005"",            ""Isaac"",            ""He is allergic to mustard."");    appManager.save(userAccount3);    appManager.save(userAccount4);    appManager.save(userAccount5);    LOGGER.info(appManager.printCacheContent());    appManager.find(""003"");    LOGGER.info(appManager.printCacheContent());    appManager.find(""004"");    LOGGER.info(appManager.printCacheContent());  }",useCacheAsideStategy
1835,"  public static void <extra_id_0>(String[] args) throws InterruptedException {    var taskSet = new TaskSet();    var taskHandler = new TaskHandler();    var workCenter = new WorkCenter();    workCenter.createWorkers(4, taskSet, taskHandler);    execute(workCenter, taskSet);  }  /**   * Start the work, dispatch tasks and stop the thread pool at last.   */",main
3020,  void <extra_id_0>();  /**   * Get all the pixels.   *   * @return pixel list   */,clearAll
3004,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
3146,  public Optional<Customer> <extra_id_0>(final int id) {    return Optional.ofNullable(idToCustomer.get(id));  }  @Override,getById
941,"  void <extra_id_0>() {    // Parameterized constructor test.    var testMsg = ""Message Test"";    var msg = new Message(testMsg);    assertEquals(testMsg, msg.getMsg());  }",messageTest
3235,    Book.AddAuthor <extra_id_0>(Genre genre);  }  /**   * Functional interface which adds the author to a book.   */,withGenre
2183,  public Item <extra_id_0>() {    idx = findNextIdx();    if (idx != -1) {      return chest.getItems().get(idx);    }    return null;  },next
1156,  public void <extra_id_0>(Message msg) throws InterruptedException {    queue.put(msg);  }  @Override,put
687,"  public static Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new Dragon(), ""Dragon"", Size.LARGE, Movement.FLYING, Color.RED,            new Mass(39300.0)},        new Object[]{new Goblin(), ""Goblin"", Size.SMALL, Movement.WALKING, Color.GREEN,            new Mass(30.0)},        new Object[]{new KillerBee(), ""KillerBee"", Size.SMALL, Movement.FLYING, Color.LIGHT,            new Mass(6.7)},        new Object[]{new Octopus(), ""Octopus"", Size.NORMAL, Movement.SWIMMING, Color.DARK,            new Mass(12.0)},        new Object[]{new Shark(), ""Shark"", Size.NORMAL, Movement.SWIMMING, Color.LIGHT,            new Mass(500.0)},        new Object[]{new Troll(), ""Troll"", Size.LARGE, Movement.WALKING, Color.DARK,            new Mass(4000.0)}    );  }  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
3445,"  void <extra_id_0>() {    Retry.Operation op = (l) -> {      if (!l.isEmpty()) {        throw l.remove(0);      }    };    Retry.HandleErrorIssue<Order> handleError = (o, e) -> {    };    var r1 = new Retry<>(op, handleError, 3, 30000,        e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));    var r2 = new Retry<>(op, handleError, 3, 30000,        e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    var arr1 = new ArrayList<>(List.of(new ItemUnavailableException(), new DatabaseUnavailableException()));    try {      r1.perform(arr1, order);    } catch (Exception e1) {      e1.printStackTrace();    }    var arr2 = new ArrayList<>(List.of(new DatabaseUnavailableException(), new ItemUnavailableException()));    try {      r2.perform(arr2, order);    } catch (Exception e1) {      e1.printStackTrace();    }    //r1 stops at ItemUnavailableException, r2 retries because it encounters DatabaseUnavailableException    assertTrue(arr1.size() == 1 && arr2.size() == 0);  }",performTest
3097,"  void <extra_id_0>() throws Exception {    List<Class<? extends Tobacco>> tobaccos = List.of(        OldTobyTobacco.class,        RivendellTobacco.class,        SecondBreakfastTobacco.class    );    // Configure the tobacco in the injection framework ...    // ... and create a new wizard with it    // Verify if the wizard is smoking the correct tobacco ...    tobaccos.forEach(tobaccoClass -> {      final var injector = Guice.createInjector(new AbstractModule() {        @Override        protected void configure() {          bind(Tobacco.class).to(tobaccoClass);        }      });      final var guiceWizard = injector.getInstance(GuiceWizard.class);      guiceWizard.smoke();      String lastMessage = appender.getLastMessage();      assertEquals(""GuiceWizard smoking "" + tobaccoClass.getSimpleName(), lastMessage);    });    // ... and nothing else is happening.    assertEquals(tobaccos.size(), appender.getLogSize());  }",testSmokeEveryThingThroughInjectionFramework
1853,"  void <extra_id_0>() {    var taskSet = new TaskSet();    var taskHandler = new TaskHandler();    var workCenter = new WorkCenter();    workCenter.createWorkers(5, taskSet, taskHandler);    assertEquals(5, workCenter.getWorkers().size());    assertEquals(workCenter.getWorkers().get(0), workCenter.getLeader());  }  @Test",testCreateWorkers
3836,"  public String <extra_id_0>() {    return ""Hayes modem"";  }",toString
621,  Health <extra_id_0>() {    return model.getHealth();  }  /**   * Sets health.   *   * @param health the health   */,getHealth
1691,  public FileSelectorPresenter <extra_id_0>() {    return this.presenter;  }  @Override,getPresenter
860,"  void <extra_id_0>(SelectionKey key) throws IOException {    var pendingWrites = channelToPendingWrites.get(key.channel());    Object pendingWrite;    while ((pendingWrite = pendingWrites.poll()) != null) {      // ask the concrete channel to make sense of data and write it to java channel      doWrite(pendingWrite, key);    }    // We don't have anything more to write so channel is interested in reading more data    reactor.changeOps(key, SelectionKey.OP_READ);  }  /**   * Writes the data to the channel.   *   * @param pendingWrite the data to be written on channel.   * @param key          the key which is writable.   * @throws IOException if any I/O error occurs.   */",flush
2089,    void <extra_id_0>() {        assertNotNull(applicationContext);    },contextLoads
3164,"    void <extra_id_0>() throws        Exception {      final var newFirstname = ""Bernard"";      final var newLastname = ""Montgomery"";      final var customer = new Customer(CUSTOMER.getId(), newFirstname, newLastname);      var result = dao.update(customer);      assertTrue(result);      final var cust = dao.getById(CUSTOMER.getId()).get();      assertEquals(newFirstname, cust.getFirstName());      assertEquals(newLastname, cust.getLastName());    }    @Test",updationShouldBeSuccessAndAccessingTheSameCustomerShouldReturnUpdatedInformation
838,"  public void <extra_id_0>(Object data, SelectionKey key) {    super.write(data, key);  }  /**   * Container of data used for {@link NioDatagramChannel} to communicate with remote peer.   */",write
61,"  public String <extra_id_0>() {    return ""soldier"";  }",toString
751,  boolean <extra_id_0>(Rect other) {    return !(this.coordinateX + this.width / 2 <= other.coordinateX - other.width / 2        || this.coordinateX - this.width / 2 >= other.coordinateX + other.width / 2        || this.coordinateY + this.height / 2 <= other.coordinateY - other.height / 2        || this.coordinateY - this.height / 2 >= other.coordinateY + other.height / 2);  },intersects
2898,  void <extra_id_0>();,attack
973,"  void <extra_id_0>() {    var terry = repository.findByName(""Terry"");    terry.setSurname(""Lee"");    terry.setAge(47);    repository.save(terry);    terry = repository.findByName(""Terry"");    assertEquals(terry.getSurname(), ""Lee"");    assertEquals(47, terry.getAge());  }  @Test",testSave
3560,  String <extra_id_0>() throws RemoteServiceException;,call
3012,  private void <extra_id_0>() {    current = current ^ next;    next = current ^ next;    current = current ^ next;  },swap
2241,"  public void <extra_id_0>(LotteryService service, Scanner scanner) {    logger.info(""What is the ID of the lottery ticket?"");    var id = readString(scanner);    logger.info(""Give the 4 comma separated winning numbers?"");    var numbers = readString(scanner);    try {      var winningNumbers = Arrays.stream(numbers.split("",""))          .map(Integer::parseInt)          .limit(4)          .collect(Collectors.toSet());      final var lotteryTicketId = new LotteryTicketId(Integer.parseInt(id));      final var lotteryNumbers = LotteryNumbers.create(winningNumbers);      var result = service.checkTicketForPrize(lotteryTicketId, lotteryNumbers);      if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.WIN_PRIZE)) {        logger.info(""Congratulations! The lottery ticket has won!"");      } else if (result.getResult().equals(LotteryTicketCheckResult.CheckResult.NO_PRIZE)) {        logger.info(""Unfortunately the lottery ticket did not win."");      } else {        logger.info(""Such lottery ticket has not been submitted."");      }    } catch (Exception e) {      logger.info(""Failed checking the lottery ticket - please try again."");    }  }  @Override",checkTicket
3389,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase(), new ItemUnavailableException());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",queueEmployeeDbTaskDatabaseUnavailableCase
405,"    public void <extra_id_0>() throws InterruptedException {        int initialValue = 1234567890;        int threadSize = 2;        ExecutorService executor = Executors.newFixedThreadPool(threadSize);        WithoutThreadLocal threadLocal = new WithoutThreadLocal(initialValue);        for (int i = 0; i < threadSize; i++) {            executor.submit(threadLocal);        }        executor.awaitTermination(3, TimeUnit.SECONDS);        List<String> lines = outContent.toString().lines().toList();        //Matches only first thread, the second has changed by first thread value        Assertions.assertFalse(lines.stream()                .allMatch(line -> line.endsWith(String.valueOf(initialValue))));    }    @Test",withoutThreadLocal
3360,"  private void <extra_id_0>(Order order) {    if (System.currentTimeMillis() - order.createdTime >= this.messageTime) {      LOG.trace(ORDER_ID + "": Message time for order over, returning.."", order.id);      return;    }    var list = messagingService.exceptionsList;    Thread t = new Thread(() -> {      Retry.Operation op = handleSuccessMessageRetryOperation(order);      Retry.HandleErrorIssue<Order> handleError = (o, err) -> {        handleSuccessMessageErrorIssue(order, o);      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, order);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",sendSuccessMessage
1348,"  public String <extra_id_0>(SignupModel form, Model model) {    model.addAttribute(""name"", form.getName());    model.addAttribute(""email"", form.getEmail());    return view.display(form);  }",getUserPath
3021,  Pixel[] <extra_id_0>();,getPixels
283,"  void <extra_id_0>() throws Exception {    var skyLaunch = new SkyLaunch();    var outputLog = getLogContent(() -> skyLaunch.playSound(""SOUND_NAME"", 1));    var expectedLog = ""Play SOUND_NAME with volume 1"";    assertEquals(outputLog, expectedLog);  }  @Test",testPlaySound
674,  public Movement <extra_id_0>() {    return movement;  }  @Override,getMovement
564,  public void <extra_id_0>(Set<Spellbook> spellbooks) {    this.spellbooks = spellbooks;  },setSpellbooks
2396,"  void <extra_id_0>(NumberExpression first, NumberExpression second, int result) {    final var expression = factory.apply(first, second);    assertNotNull(expression);    assertEquals(result, expression.interpret());  }  /**   * Verify if the expression has the expected {@link E#toString()} value   */  @ParameterizedTest  @MethodSource(""expressionProvider"")",testInterpret
2045,              protected List<MemoryPoolMXBean> <extra_id_0>() {                return Collections.singletonList(memoryPoolMXBean);              }            });,getMemoryPoolMxBeans
2864,"  void <extra_id_0>() {    Logger sergeantLogger = (Logger) LoggerFactory.getLogger(Sergeant.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    sergeantLogger.addAppender(listAppender);    final var sergeant = new Sergeant(new SergeantUnit(""SergeantUnitTest""));    sergeant.sergeantReady();    List<ILoggingEvent> logsList = listAppender.list;    assertEquals(""[Sergeant] "" + sergeant.getUnit().getName() + "" is ready!"", logsList.get(0)        .getMessage());    assertEquals(Level.INFO, logsList.get(0)        .getLevel());  }",sergeantReady
2915,"  public void <extra_id_0>() {    LOGGER.info(""Start Game"");    aiComponentManager.start();    physicsComponentManager.start();    renderComponentManager.start();  }  /**   * update all component.   */",start
2338,"  void <extra_id_0>() {    var numbers = LotteryNumbers.create(Set.of(1, 2, 3, 4));    assertEquals(numbers.getNumbers().size(), 4);    assertTrue(numbers.getNumbers().contains(1));    assertTrue(numbers.getNumbers().contains(2));    assertTrue(numbers.getNumbers().contains(3));    assertTrue(numbers.getNumbers().contains(4));  }  @Test",testGivenNumbers
284,"  void <extra_id_0>() throws Exception {    var skyLaunch = new SkyLaunch();    var outputLog = getLogContent(        () -> skyLaunch.spawnParticles(""PARTICLE_TYPE"", 100));    var expectedLog = ""Spawn 100 particle with type PARTICLE_TYPE"";    assertEquals(outputLog, expectedLog);  }  @Test",testSpawnParticles
542,  public Set<Wizard> <extra_id_0>() {    return wizards;  },getWizards
1091,    public String <extra_id_0>() {      return name;    }    /**     * set result.     *     * @param result {@link ChapterResult}     */,getName
2492,      public Iterator<E> <extra_id_0>() {        return new DecoratingIterator<>(iterable.iterator()) {          @Override          public E computeNext() {            while (fromIterator.hasNext()) {              var candidate = fromIterator.next();              if (predicate.test(candidate)) {                return candidate;              }            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the first object of this Iterable   */  @Override,iterator
3823,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
1585,"  public void <extra_id_0>() {    if (this.output != null) {      this.output.flush();      this.output.close();    }    if (this.error != null) {      this.error.flush();      this.error.close();    }    LOGGER.debug(""FileLoggerModule::unprepare();"");  }  /**   * Used to print a message.   *   * @param value will be printed in file   */",unprepare
3355,"  private void <extra_id_0>(Order order) throws Exception {    var list = shippingService.exceptionsList;    Retry.Operation op = (l) -> {      if (!l.isEmpty()) {        if (DatabaseUnavailableException.class.isAssignableFrom(l.get(0).getClass())) {          LOG.debug(ORDER_ID + "": Error in connecting to shipping service, ""              + ""trying again.."", order.id);        } else {          LOG.debug(ORDER_ID + "": Error in creating shipping request.."", order.id);        }        throw l.remove(0);      }      String transactionId = shippingService.receiveRequest(order.item, order.user.address);      //could save this transaction id in a db too      LOG.info(ORDER_ID + "": Shipping placed successfully, transaction id: {}"",              order.id, transactionId);      LOG.info(""Order has been placed and will be shipped to you. Please wait while we make your""          + "" payment... "");      sendPaymentRequest(order);    };    Retry.HandleErrorIssue<Order> handleError = (o, err) -> {      if (ShippingNotPossibleException.class.isAssignableFrom(err.getClass())) {        LOG.info(""Shipping is currently not possible to your address. We are working on the problem""            + "" and will get back to you asap."");        finalSiteMsgShown = true;        LOG.info(ORDER_ID + "": Shipping not possible to address, trying to add problem ""            + ""to employee db.."", order.id);        employeeHandleIssue(o);      } else if (ItemUnavailableException.class.isAssignableFrom(err.getClass())) {        LOG.info(""This item is currently unavailable. We will inform you as soon as the item ""            + ""becomes available again."");        finalSiteMsgShown = true;        LOG.info(ORDER_ID + "": Item {}"" + "" unavailable, trying to add ""            + ""problem to employee handle.."", order.id, order.item);        employeeHandleIssue(o);      } else {        LOG.info(""Sorry, there was a problem in creating your order. Please try later."");        LOG.error(ORDER_ID + "": Shipping service unavailable, order not placed.."", order.id);        finalSiteMsgShown = true;      }    };    var r = new Retry<>(op, handleError, numOfRetries, retryDuration,        e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));    r.perform(list, order);  }",sendShippingRequest
3228,"  public void <extra_id_0>(T... data) {    IntStream.range(0, data.length).forEach(i -> dependentObjects[i].setData(data[i]));  }",setData
165,  private static void <extra_id_0>(DataSource dataSource) throws java.sql.SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);    }  },deleteSchema
455,"  private static void <extra_id_0>(BarCustomer barCustomer, CallsCount callsCount) {    var timer = new ThrottleTimerImpl(1000, callsCount);    var service = new Bartender(timer, callsCount);    // Sleep is introduced to keep the output in check and easy to view and analyze the results.    IntStream.range(0, 50).forEach(i -> {      service.orderDrink(barCustomer);      try {        Thread.sleep(100);      } catch (InterruptedException e) {        LOGGER.error(""Thread interrupted: {}"", e.getMessage());      }    });  }",makeServiceCalls
2507,  public Iterator<E> <extra_id_0>() {    return new DecoratingIterator<>(iterable.iterator()) {      @Override      public E computeNext() {        return fromIterator.hasNext() ? fromIterator.next() : null;      }    };  }  /**   * Constructors FluentIterable from given iterable.   *   * @return a FluentIterable from a given iterable. Calls the LazyFluentIterable constructor.   */,iterator
1048,    void <extra_id_0>() {      currentNumber = 0;      isForward = true;    },cleanUp
3380,"  void <extra_id_0>() throws Exception {    //rest is successful    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",messagingDatabaseUnavailableCasePaymentError
1013,"  void <extra_id_0>() {    var sagaOrchestrator = new SagaOrchestrator(newSaga(), serviceDiscovery());    var result = sagaOrchestrator.execute(1);    assertEquals(Result.ROLLBACK, result);    assertArrayEquals(            new String[]{""+1"", ""+2"", ""+3"", ""+4"", ""-4"", ""-3"", ""-2"", ""-1""},            records.toArray(new String[]{}));  }",executeTest
168,  private static void <extra_id_0>(HotelDaoImpl hotelDao) throws Exception {    for (var room : generateSampleRooms()) {      hotelDao.add(room);    }  },addRooms
3241,"  void <extra_id_0>() {    Book builderCurriedBook = Book.builder()        .withGenre(Genre.FANTASY)        .withAuthor(""Dave"")        .withTitle(""Into the Night"")        .withPublicationDate(LocalDate.of(2002, 4, 7));    Book funcCurriedBook = Book.book_creator            .apply(Genre.FANTASY)            .apply(""Dave"")            .apply(""Into the Night"")            .apply(LocalDate.of(2002, 4, 7));    assertEquals(expectedBook, builderCurriedBook);    assertEquals(expectedBook, funcCurriedBook);  }  /**   * Tests that an intermediate curried function can be used to create the expected book   */  @Test",createsExpectedBook
3485,  public void <extra_id_0>() {    if (!redoStack.isEmpty()) {      var previousSpell = redoStack.pollLast();      undoStack.offerLast(previousSpell);      previousSpell.run();    }  }  @Override,redoLastSpell
2113,    public Set<CakeLayer> <extra_id_0>() {        return layers;    },getLayers
3090,"  public void <extra_id_0>(Wizard wizard) {    LOGGER.info(""{} smoking {}"", wizard.getClass().getSimpleName(),        this.getClass().getSimpleName());  }",smoke
3101,  void <extra_id_0>() {    appender.stop();  }  /**   * Test if the {@link AdvancedSorceress} smokes whatever instance of {@link Tobacco} is passed to   * her through the setter's parameter   */  @Test,tearDown
924,"  private boolean <extra_id_0>() {    return globalMutex.isEmpty();  }  /**   * Reader Lock, can be access for more than one reader concurrently if no writer get the lock.   */",isLockFree
2439,"  void <extra_id_0>() throws Exception {    final var constructor = Dispatcher.class.getDeclaredConstructor();    constructor.setAccessible(true);    final var field = Dispatcher.class.getDeclaredField(""instance"");    field.setAccessible(true);    field.set(Dispatcher.getInstance(), constructor.newInstance());  }  @Test",setUp
930,"    public boolean <extra_id_0>(long time, TimeUnit unit) {      throw new UnsupportedOperationException();    }    @Override",tryLock
879,"  public void <extra_id_0>() throws IOException {    LOGGER.info(""Starting logging clients"");    service.execute(new TcpLoggingClient(""Client 1"", 16666));    service.execute(new TcpLoggingClient(""Client 2"", 16667));    service.execute(new UdpLoggingClient(""Client 3"", 16668));    service.execute(new UdpLoggingClient(""Client 4"", 16669));  }  /**   * Stops logging clients. This is a blocking call.   */",start
2896,  public int <extra_id_0>() {    return 10;  }  @Override,getAttackPower
2663,"  public String <extra_id_0>() {    return ""Account{""        + ""accountNo="" + accountNo        + "", owner='"" + owner + '\''        + "", money="" + money        + '}';  }",toString
250,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic sum {}"", VERSION);    return newSource.accumulateSum(nums);  }  /**   * Accumulate multiplication.   * @param nums numbers need to multiply together   * @return accumulate multiplication   */",sum
3092,  void <extra_id_0>() {    appender.stop();  }  /**   * Test if the {@link SimpleWizard} does the only thing it can do: Smoke it's {@link   * OldTobyTobacco}   */  @Test,tearDown
2152,"    public void <extra_id_0>(Throwable throwable) {      throw new IllegalStateException(""Should not occur"");    }  }  private static long ap(long i) {    try {      Thread.sleep(i);    } catch (InterruptedException e) {      LOGGER.error(""Exception caught."", e);    }    return i * (i + 1) / 2;  }}",onError
1950,"  protected void <extra_id_0>(Message message) {    var newLeaderId = Integer.valueOf(message.getContent());    if (this.leaderId != newLeaderId) {      LOGGER.info(INSTANCE + localId + "" - Update leaderID"");      this.leaderId = newLeaderId;      messageManager.sendLeaderMessage(localId, newLeaderId);    } else {      LOGGER.info(INSTANCE + localId + "" - Leader update done. Start heartbeat."");      messageManager.sendHeartbeatInvokeMessage(localId);    }  }  /**   * Not used in Ring instance.   */  @Override",handleLeaderMessage
1796,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1677,  public String <extra_id_0>() {    return title;  },toString
1553,"  void <extra_id_0>() {    var videos = Map.of(        1, new Video(1, ""Avatar"", 178, ""epic science fiction film"",            ""James Cameron"", ""English""),        2, new Video(2, ""Godzilla Resurgence"", 120, ""Action & drama movie|"",            ""Hideaki Anno"", ""Japanese""),        3, new Video(3, ""Interstellar"", 169, ""Adventure & Sci-Fi"",            ""Christopher Nolan"", ""English""));    resource = new VideoResource(fieldJsonMapper, videos);  }  @Test",setUp
646,  public final boolean <extra_id_0>(Mass other) {    return this.value > other.value;  },greaterThan
2770,  public int <extra_id_0>() {    return currentlyRunningSyncEvent;  },numOfCurrentlyRunningSyncEvent
3603,"    public void <extra_id_0>(long interval, TimeUnit timeUnit, Runnable task) {      this.task = task;    }  }}",executeAfterDelay
1647,"  public static void <extra_id_0>(String[] args) {    // eagerly initialized multiton    LOGGER.info(""Printing out eagerly initialized multiton contents"");    LOGGER.info(""KHAMUL={}"", Nazgul.getInstance(NazgulName.KHAMUL));    LOGGER.info(""MURAZOR={}"", Nazgul.getInstance(NazgulName.MURAZOR));    LOGGER.info(""DWAR={}"", Nazgul.getInstance(NazgulName.DWAR));    LOGGER.info(""JI_INDUR={}"", Nazgul.getInstance(NazgulName.JI_INDUR));    LOGGER.info(""AKHORAHIL={}"", Nazgul.getInstance(NazgulName.AKHORAHIL));    LOGGER.info(""HOARMURATH={}"", Nazgul.getInstance(NazgulName.HOARMURATH));    LOGGER.info(""ADUNAPHEL={}"", Nazgul.getInstance(NazgulName.ADUNAPHEL));    LOGGER.info(""REN={}"", Nazgul.getInstance(NazgulName.REN));    LOGGER.info(""UVATHA={}"", Nazgul.getInstance(NazgulName.UVATHA));    // enum multiton    LOGGER.info(""Printing out enum-based multiton contents"");    LOGGER.info(""KHAMUL={}"", NazgulEnum.KHAMUL);    LOGGER.info(""MURAZOR={}"", NazgulEnum.MURAZOR);    LOGGER.info(""DWAR={}"", NazgulEnum.DWAR);    LOGGER.info(""JI_INDUR={}"", NazgulEnum.JI_INDUR);    LOGGER.info(""AKHORAHIL={}"", NazgulEnum.AKHORAHIL);    LOGGER.info(""HOARMURATH={}"", NazgulEnum.HOARMURATH);    LOGGER.info(""ADUNAPHEL={}"", NazgulEnum.ADUNAPHEL);    LOGGER.info(""REN={}"", NazgulEnum.REN);    LOGGER.info(""UVATHA={}"", NazgulEnum.UVATHA);  }",main
443,"  public int <extra_id_0>(final User user) throws SQLException {    var sql = ""insert into USERS (username, password) values (?,?)"";    try (var connection = dataSource.getConnection();         var preparedStatement =                 connection.prepareStatement(sql)    ) {      preparedStatement.setString(1, user.getUsername());      preparedStatement.setString(2, user.getPassword());      var result = preparedStatement.executeUpdate();      LOGGER.info(""Register successfully!"");      return result;    }  }",registerUser
2054,"  void <extra_id_0>() {    // Given    healthChecker.shutdown();    // When/Then    assertThrows(        RejectedExecutionException.class,        () -> healthChecker.performCheck(() -> Health.up().build(), 2),        ""Expected to throw RejectedExecutionException but did not"");  }  /**   * Tests that the {@link performCheck()} method returns a healthy health status when the health   * supplier returns a healthy status.   *   * <p>Given a health supplier that throws a RuntimeException, the test verifies that the {@link   * performCheck()} method returns a health object with a status of DOWN and an error message   * containing the exception message.   */  @Test",whenShutdown_thenRejectsNewTasks
310,"  void <extra_id_0>() {    assertEquals(expectedTarget, this.method.pickTarget());  }  /**   * Verify if the target confusing step goes as planned   */  @Test",testPickTarget
3792,  void <extra_id_0>() {    var captain = (Captain) beans.get(ROWING_BEAN);    // when captain moves    captain.row();    // the captain internally calls the battleship object to move    var adapter = (RowingBoat) beans.get(FISHING_BEAN);    verify(adapter).row();  },testAdapter
3617,  void <extra_id_0>() throws InterruptedException;,await
78,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1026,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""+4"");      return ChapterResult.failure(value);    }    @Override",process
1696,  public void <extra_id_0>(String data) {    this.dataDisplayed = true;  }  /**   * Returns the number of messages that were displayed to the user.   */,displayData
316,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    },getLastMessage
3447,"  public static void <extra_id_0>(Queue<PrinterItem> printerItemsCollection) {    /*      Iterate through the printer queue, and add A4 papers according to the correct policy to the collecting parameter,      which is 'printerItemsCollection' in this case.     */    for (PrinterItem nextItem : printerQueue.getPrinterQueue()) {      if (nextItem.paperSize.equals(PaperSizes.A4)) {        var isColouredAndSingleSided = nextItem.isColour && !nextItem.isDoubleSided;        if (isColouredAndSingleSided || !nextItem.isColour) {          printerItemsCollection.add(nextItem);        }      }    }  }  /**   * Adds A3 document jobs to the collecting parameter according to some policy that can be whatever the client   * (the print center) wants. The code is similar to the 'addA4Papers' method. The code can be changed to accommodate   * the wants of the client.   *   * @param printerItemsCollection the collecting parameter   */",addValidA4Papers
1346,"  public String <extra_id_0>() {    LOGGER.info(""display signup front page"");    return ""/signup"";  }  /**   * redirect to user page.   */",display
2178,  private boolean <extra_id_0>(T val) {    return this.val.compareTo(val) < 1;  }  @Override,isLessThanOrEqualTo
136,"      void <extra_id_0>() throws Exception {        var existingRoom = new Room(1, ""Single"", 50, false);        var result = dao.add(existingRoom);        Assertions.assertFalse(result);        assertRoomCountIs(1);        assertEquals(existingRoom, dao.getById(existingRoom.getId()).get());      }      @Test",addingShouldResultInFailureAndNotAffectExistingRooms
1995,  public void <extra_id_0>(Filter filter) {    this.next = filter;  }  @Override,setNext
472,  int <extra_id_0>() throws IOException;,insertCountry
2019,"  private String <extra_id_0>() {    return restTemplate.getRootUri() + ""/actuator/health"";  }  // Common method to log response details",getEndpointBasePath
331,    AbilityStep <extra_id_0>(String ability);,withAbility
1637,"  void <extra_id_0>() {    assertEquals(4000, bank.getBalance());  }  @Test",BalanceHaveToBeOK
1619,"  private static void <extra_id_0>(Resource resource) {    LOGGER.info(""Utilizing acquired resource: {}"", resource);  }",utilizeResource
559,  public Long <extra_id_0>() {    return id;  },getId
3208,    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertTrue(newBean.isBusinessInterest());        newBean.setBusinessInterest(false);        assertFalse(newBean.isBusinessInterest());    }    @Test,testBusinessSetterGetter
1384,  public String <extra_id_0>() {    return null;  }  @Override,getName
1318,  public Type <extra_id_0>() {    return type;  }  @Override,type
3240,"  public static void <extra_id_0>() {    expectedBook = new Book(Genre.FANTASY,        ""Dave"",        ""Into the Night"",        LocalDate.of(2002, 4, 7));  }  /**   * Tests that the expected book can be created via curried functions   */  @Test",initialiseBook
1830,"  void <extra_id_0>() {    var arr1 = new int[]{1, 4, 2, 6};    var arr2 = new int[]{1, 4, 2, 6};    assertTrue(ArrayUtilityMethods.arraysSame(arr1, arr2));  }  @Test",arraysSameTest
2059,"  void <extra_id_0>() {    // Arrange    CompletableFuture<Health> future =        CompletableFuture.completedFuture(            Health.up().withDetail(""memory usage"", ""50% of max"").build());    when(asynchronousHealthChecker.performCheck(any(Supplier.class), anyLong())).thenReturn(future);    // Act    Health health = memoryHealthIndicator.health();    // Assert    assertEquals(Status.UP, health.getStatus());    assertEquals(""50% of max"", health.getDetails().get(""memory usage""));  }  /**   * Test case for the `health()` method when memory usage is above the threshold.   *   * <p>Asserts that when the `health()` method is called and memory usage is above the threshold,   * it returns a Health object with Status.DOWN.   */  @Test",whenMemoryUsageIsBelowThreshold_thenHealthIsUp
2615,  public void <extra_id_0>() {    new ErrorView().display();  },process
3030,  void <extra_id_0>(Customer customer) throws SQLException;,update
1665,  public String <extra_id_0>() {    return title;  },toString
2428,  public abstract void <extra_id_0>(Action action);,onAction
3457,"  void <extra_id_0>() {    PrinterQueue printerQueue = PrinterQueue.getInstance();    printerQueue.emptyQueue();    PrinterItem item1 = new PrinterItem(PaperSizes.A4, 1, false, true);    PrinterItem item2 = new PrinterItem(PaperSizes.A4, 10, true, false);    PrinterItem item3 = new PrinterItem(PaperSizes.A4, 4, true, true);    PrinterItem item4 = new PrinterItem(PaperSizes.A3, 9, false, false);    PrinterItem item5 = new PrinterItem(PaperSizes.A3, 3, true, true);    PrinterItem item6 = new PrinterItem(PaperSizes.A3, 3, false, true);    PrinterItem item7 = new PrinterItem(PaperSizes.A3, 3, true, false);    PrinterItem item8 = new PrinterItem(PaperSizes.A2, 1, false, false);    PrinterItem item9 = new PrinterItem(PaperSizes.A2, 2, false, false);    PrinterItem item10 = new PrinterItem(PaperSizes.A2, 1, true, false);    PrinterItem item11 = new PrinterItem(PaperSizes.A2, 1, false, true);    printerQueue.addPrinterItem(item1);    printerQueue.addPrinterItem(item2);    printerQueue.addPrinterItem(item3);    printerQueue.addPrinterItem(item4);    printerQueue.addPrinterItem(item5);    printerQueue.addPrinterItem(item6);    printerQueue.addPrinterItem(item7);    printerQueue.addPrinterItem(item8);    printerQueue.addPrinterItem(item9);    printerQueue.addPrinterItem(item10);    printerQueue.addPrinterItem(item11);    Queue<PrinterItem> result = new LinkedList<>();    App.addValidA4Papers(result);    App.addValidA3Papers(result);    App.addValidA2Papers(result);    Queue<PrinterItem> testResult = new LinkedList<>();    testResult.add(item1);    testResult.add(item2);    testResult.add(item4);    testResult.add(item8);    Assertions.assertArrayEquals(testResult.toArray(), result.toArray());  }",testCollectingParameter
2569,  public int <extra_id_0>() {    return id;  }  /**   * {@inheritDoc}   */  @Override,id
759,  public void <extra_id_0>() {    if (!isHungry && isDrunk) {      isHappy = true;    }    if (complimentReceived) {      isHappy = false;    }  }  @Override,changeMood
376,  void <extra_id_0>() {    final var task = mock(Task.class);    final var worker = new Worker(task);    verifyNoMoreInteractions(task);    worker.run();    verify(task).getTimeMs();    verifyNoMoreInteractions(task);  },testRun
1825,"  private void <extra_id_0>(Input<?> input) {    var dividedInput = input.divideData(numOfWorkers);    if (dividedInput != null) {      this.expectedNumResults = dividedInput.size();      for (var i = 0; i < this.expectedNumResults; i++) {        //ith division given to ith worker in this.workers        this.workers.get(i).setReceivedData(this, dividedInput.get(i));        this.workers.get(i).start();      }      for (var i = 0; i < this.expectedNumResults; i++) {        try {          this.workers.get(i).join();        } catch (InterruptedException e) {          System.err.println(""Error while executing thread"");        }      }    }  }",divideWork
104,  Cell <extra_id_0>() {    var newCell = this.pool.remove(pointer);    pointer--;    return newCell;  },getNewCell
1838,"  public void <extra_id_0>(Task task) throws InterruptedException {    var time = task.getTime();    Thread.sleep(time);    LOGGER.info(""It takes "" + time + "" milliseconds to finish the task"");    task.setFinished();  }",handleTask
1684,  void <extra_id_0>(String name);  /**   * Gets the name of file.   *   * @return The name of the file.   */,setFileName
3566,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(PriceApplication.class, args);  }",main
1337,  O <extra_id_0>(I input);,process
2774,  void <extra_id_0>();,status
631,"  public static void <extra_id_0>(String[] args) {    // create model, view and controller    var giant1 = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);    var giant2 = new GiantModel(""giant2"", Health.DEAD, Fatigue.SLEEPING, Nourishment.STARVING);    var action1 = new Action(giant1);    var action2 = new Action(giant2);    var view = new GiantView();    var dispatcher = new Dispatcher(view);    dispatcher.addAction(action1);    dispatcher.addAction(action2);    var controller = new GiantController(dispatcher);    // initial display    controller.updateView(giant1);    controller.updateView(giant2);    // controller receives some interactions that affect the giant    controller.setCommand(new Command(Fatigue.SLEEPING, Health.HEALTHY, Nourishment.STARVING), 0);    controller.setCommand(new Command(Fatigue.ALERT, Health.HEALTHY, Nourishment.HUNGRY), 1);    // redisplay    controller.updateView(giant1);    controller.updateView(giant2);    // controller receives some interactions that affect the giant  }",main
422,"  void <extra_id_0>() throws SQLException {    var dataSource = createDataSource();    var userTableModule = new UserTableModule(dataSource);    var user = new User(1, ""123456"", ""123456"");    assertEquals(1, userTableModule.registerUser(user));  }",registerShouldSucceed
2189,"  public static List<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new Item(ItemType.POTION, ""Potion of courage"")},        new Object[]{new Item(ItemType.RING, ""Ring of shadows"")},        new Object[]{new Item(ItemType.POTION, ""Potion of wisdom"")},        new Object[]{new Item(ItemType.POTION, ""Potion of blood"")},        new Object[]{new Item(ItemType.WEAPON, ""Sword of silver +1"")},        new Object[]{new Item(ItemType.POTION, ""Potion of rust"")},        new Object[]{new Item(ItemType.POTION, ""Potion of healing"")},        new Object[]{new Item(ItemType.RING, ""Ring of armor"")},        new Object[]{new Item(ItemType.WEAPON, ""Steel halberd"")},        new Object[]{new Item(ItemType.WEAPON, ""Dagger of poison"")}    );  }  /**   * Test if the expected item can be retrieved from the chest using the {@link   * TreasureChestItemIterator}   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
2542,"  void <extra_id_0>() {    final var shop = new AlchemistShop();    final var bottomShelf = shop.getBottomShelf();    assertNotNull(bottomShelf);    assertEquals(5, bottomShelf.size());    final var topShelf = shop.getTopShelf();    assertNotNull(topShelf);    assertEquals(8, topShelf.size());    final var allPotions = new ArrayList<Potion>();    allPotions.addAll(topShelf);    allPotions.addAll(bottomShelf);    // There are 13 potion instances, but only 5 unique instance types    assertEquals(13, allPotions.size());    assertEquals(5, new HashSet<>(allPotions).size());  }",testShop
906,"  void <extra_id_0>() throws Exception {    var lock = new ReaderWriterLock();    var reader1 = new Reader(""Reader 1"", lock.readLock());    var writer1 = new Writer(""Writer 1"", lock.writeLock());    var executeService = Executors.newFixedThreadPool(2);    executeService.submit(reader1);    // Let reader1 execute first    Thread.sleep(150);    executeService.submit(writer1);    executeService.shutdown();    try {      executeService.awaitTermination(10, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"", e);    }    assertTrue(appender.logContains(""Reader 1 begin""));    assertTrue(appender.logContains(""Reader 1 finish""));    assertTrue(appender.logContains(""Writer 1 begin""));    assertTrue(appender.logContains(""Writer 1 finish""));  }  /**   * Verify reader and writer can only get the lock to read and write orderly   */  @Test",testReadAndWrite
1439,  public void <extra_id_0>(SortOrder sortOrder) {    this.sortOrder = sortOrder;  }  @Override,setSortOrder
3697,  public boolean <extra_id_0>(final String userId) {    return cache.containsKey(userId);  }  /**   * Invalidate cache for user.   *   * @param userId {@link String}   */,contains
3460,"  static Finder <extra_id_0>(String word) {    return txt -> Stream.of(txt.split(""""))        .filter(line -> line.toLowerCase().contains(word.toLowerCase()))        .collect(Collectors.toList());  }  /**   * combinator not.   * @param notFinder finder to combine   * @return new finder including previous finders   */",contains
2855,"  private void <extra_id_0>(final GameObject target, final GameObject other, final boolean expectTargetOnFire) {    final var targetName = target.getClass().getSimpleName();    final var otherName = other.getClass().getSimpleName();    final var errorMessage = expectTargetOnFire        ? ""Expected ["" + targetName + ""] to be on fire after colliding with ["" + otherName + ""] but it was not!""        : ""Expected ["" + targetName + ""] not to be on fire after colliding with ["" + otherName + ""] but it was!"";    assertEquals(expectTargetOnFire, target.isOnFire(), errorMessage);  }  /**   * Test if the damage state of the target matches the expected state after colliding with the   * given object   *   * @param target         The target object   * @param other          The other object   * @param expectedDamage The expected state of damage on the target object   */",testOnFire
502,  protected int <extra_id_0>(Data data) {    var key = data.getKey();    if (lookupMap.containsKey(key)) {      return lookupMap.get(key);    } else {      var shardCount = shardMap.size();      return new SecureRandom().nextInt(shardCount - 1) + 1;    }  },allocateShard
3660,"  void <extra_id_0>() {    //initialize    var cash = new Cash(3);    //test plus    cash.plus(4);    assertEquals(7, cash.count());    //test minus    cash = new Cash(8);    assertTrue(cash.minus(5));    assertEquals(3, cash.count());    assertFalse(cash.minus(6));    assertEquals(3, cash.count());    //test update    cash.plus(5);    assertTrue(cash.minus(5));    assertEquals(3, cash.count());  }",testCash
2021,"  void <extra_id_0>() {    Response response = given(requestSpec).get(getEndpointBasePath()).andReturn();    logResponseDetails(response);    if (response.getStatusCode() == HttpStatus.SERVICE_UNAVAILABLE.value()) {      LOGGER.warn(          ""Health endpoint returned 503 Service Unavailable. This may be due to pipeline ""              + ""configuration. Please check the pipeline logs."");      response.then().assertThat().statusCode(HttpStatus.SERVICE_UNAVAILABLE.value());      return;    }    if (response.getStatusCode() != HttpStatus.OK.value()        || !""UP"".equals(response.path(""status""))) {      LOGGER.error(""Health endpoint response: "" + response.getBody().asString());      LOGGER.error(""Health endpoint status: "" + response.getStatusCode());    }    response.then().assertThat().statusCode(HttpStatus.OK.value()).body(""status"", equalTo(""UP""));  }  /**   * Test that the health endpoint returns complete details about the application's health. If the   * status is 503, the test passes without further checks. If the status is 200, additional checks   * are performed on various components. In case of a ""DOWN"" status, the test logs the entire   * response for visibility.   */  @Test",healthEndpointReturnsUpStatus
1023,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""+3"");      return ChapterResult.success(value);    }    @Override",process
38,"  void <extra_id_0>() {    this.visitor.visit(new Commander());    if (this.commanderResponse.isPresent()) {      assertEquals(this.commanderResponse.get(), appender.getLastMessage());      assertEquals(1, appender.getLogSize());    }  }  @Test",testVisitCommander
1096,"  public Optional<ChoreographyChapter> <extra_id_0>(String service) {    return Optional.ofNullable(services.getOrDefault(service, null));  }",find
2856,"  private void <extra_id_0>(final GameObject target, final GameObject other, final boolean expectedDamage) {    final var targetName = target.getClass().getSimpleName();    final var otherName = other.getClass().getSimpleName();    final var errorMessage = expectedDamage        ? ""Expected ["" + targetName + ""] to be damaged after colliding with ["" + otherName + ""] but it was not!""        : ""Expected ["" + targetName + ""] not to be damaged after colliding with ["" + otherName + ""] but it was!"";    assertEquals(expectedDamage, target.isDamaged(), errorMessage);  }",testDamaged
1030,  private static ServiceDiscoveryService <extra_id_0>() {    var sd = new ServiceDiscoveryService();    return sd        .discover(new OrderService(sd))        .discover(new FlyBookingService(sd))        .discover(new HotelBookingService(sd))        .discover(new WithdrawMoneyService(sd));  },serviceDiscovery
71,"  void <extra_id_0>() {    armsDealer.registerModified(weapon1);    armsDealer.registerModified(weapon2);    assertEquals(2, context.get(UnitActions.MODIFY.getActionValue()).size());    verifyNoMoreInteractions(weaponDatabase);  }  @Test",shouldSaveModifiedStudentWithoutWritingToDb
2632,"  public static void <extra_id_0>(final User user) throws IllegalArgumentException {    if (paidGroup.contains(user)) {      throw new IllegalArgumentException(""User already member of paid group."");    } else {      if (!freeGroup.contains(user)) {        freeGroup.add(user);      }    }  }  /**   * Add the passed {@link User} to the paid user group list.   *   * @param user {@link User} to be added to the paid group   * @throws IllegalArgumentException when the user is already added to the free group   * @see User   */",addUserToFreeGroup
3334,"  void <extra_id_0>(GameObject gameObject, int e);",update
3705,  void <extra_id_0>();  /**   * Read from DB.   *   * @param userId {@link String}   * @return {@link UserAccount}   */,disconnect
80,"  public void <extra_id_0>(Weapon weapon) {    LOGGER.info(""Registering {} for modify in context."", weapon.getName());    register(weapon, UnitActions.MODIFY.getActionValue());  }  @Override",registerModified
3481,"  private void <extra_id_0>(Goblin goblin, String expectedName, Size expectedSize,                            Visibility expectedVisibility) {    assertEquals(expectedName, goblin.toString(), ""Goblin's name must be same as expectedName"");    assertEquals(expectedSize, goblin.getSize(), ""Goblin's size must be same as expectedSize"");    assertEquals(expectedVisibility, goblin.getVisibility(),        ""Goblin's visibility must be same as expectedVisibility"");  }",verifyGoblin
2618,"  public static void <extra_id_0>(String[] args) {    var controller = new FrontController();    controller.handleRequest(""Archer"");    controller.handleRequest(""Catapult"");    controller.handleRequest(""foobar"");  }",main
1751,"  public static void <extra_id_0>(String[] args) {    var states = new Stack<StarMemento>();    var star = new Star(StarType.SUN, 10000000, 500000);    LOGGER.info(star.toString());    states.add(star.getMemento());    star.timePasses();    LOGGER.info(star.toString());    states.add(star.getMemento());    star.timePasses();    LOGGER.info(star.toString());    states.add(star.getMemento());    star.timePasses();    LOGGER.info(star.toString());    states.add(star.getMemento());    star.timePasses();    LOGGER.info(star.toString());    while (states.size() > 0) {      star.setMemento(states.pop());      LOGGER.info(star.toString());    }  }",main
695,"  static void <extra_id_0>() {    Db.getInstance().seedUser(""ignite1771"", 1000.0);    Db.getInstance().seedItem(""computer"", 800.0);    Db.getInstance().seedItem(""car"", 20000.0);    applicationServices = new ApplicationServicesImpl();  }  @BeforeEach",beforeAll
3392,"  public String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var id = generateId();    var item = (String) parameters[0];    var address = (String) parameters[1];    var req = new ShippingRequest(id, item, address);    return updateDb(req);  }",receiveRequest
2764,"  public void <extra_id_0>(int eventId) throws EventDoesNotExistException {    if (!eventPool.containsKey(eventId)) {      throw new EventDoesNotExistException(eventId + DOES_NOT_EXIST);    }    eventPool.get(eventId).status();  }  /**   * Gets status of all running events.   */  @SuppressWarnings(""rawtypes"")",status
105,  void <extra_id_0>(Cell c) {    c.candy = randomCode[RANDOM.nextInt(randomCode.length)]; //changing candytype to new    this.pool.add(c);    pointer++;  },addNewCell
1429,"  public String <extra_id_0>(String type, SortOrder sortOrder) {    return getQuerySummary(type, ""price"", sortOrder);  }  /**   * The need for multiple method definitions can be avoided by the Parameter Object pattern.   * Below is the example where only one method is required and all the logic for having default   * values are abstracted into the Parameter Object at the time of object creation.   */",search
