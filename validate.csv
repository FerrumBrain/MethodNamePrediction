,method,name
2385,"  void <extra_id_0>(){    // personFinderInstance    PersonFinder personFinder = new PersonFinder();    // init database for our personFinder    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    // Dummy persons    Person person1 = new Person(1, ""John"", 27304159);    Person person2 = new Person(2, ""Thomas"", 42273631);    Person person3 = new Person(3, ""Arthur"", 27489171);    Person person4 = new Person(4, ""Finn"", 20499078);    Person person5 = new Person(5, ""Michael"", 40599078);    // Add data to the database.    db.insert(person1);    db.insert(person2);    db.insert(person3);    db.insert(person4);    db.insert(person5);    personFinder.setDb(db);    Assertions.assertEquals(person1,personFinder.getPerson(1),""Find person returns incorrect record."");    Assertions.assertEquals(person3,personFinder.getPerson(3),""Find person returns incorrect record."");    Assertions.assertEquals(person2,personFinder.getPerson(2),""Find person returns incorrect record."");    Assertions.assertEquals(person5,personFinder.getPerson(5),""Find person returns incorrect record."");    Assertions.assertEquals(person4,personFinder.getPerson(4),""Find person returns incorrect record."");  }  @Test",personFoundInDB
270,"  void <extra_id_0>() {    assertTrue(arithmetic.ifHasZero(-1, 0, 1));  }",testIfHasZero
1795,"  public static void <extra_id_0>(String[] args) {    final var logger = LoggerFactory.getLogger(App.class);    var guard = new Guard();    var thief = new Thief();    //noinspection ConstantConditions    if (guard instanceof Permission) {      guard.enter();    } else {      logger.info(""You have no permission to enter, please leave this area"");    }    //noinspection ConstantConditions    if (thief instanceof Permission) {      thief.steal();    } else {      thief.doNothing();    }  }",main
1440,"  public String <extra_id_0>() {    return String.format(""ParameterObject[type='%s', sortBy='%s', sortOrder='%s']"",        type, sortBy, sortOrder);  }  /**   * Builder for ParameterObject.   */",toString
998,  public abstract boolean <extra_id_0>(Role role);  /**   * Get specific instance associated with this role @see {@link Role}.   *   * @param role         to get   * @param expectedRole instance class expected to get   * @return optional with value if the instance exists and corresponds expected class   */,remRole
2834,"  final SpaceStationMir <extra_id_0>() {    return new SpaceStationMir(1, 2, 3, 4);  }  /**   * Test the constructor parameters   */  @Test",getTestedObject
2561,"  public static void <extra_id_0>(String[] args) {    final List<Long> numbers = Arrays.asList(1L, 3L, 4L, 7L, 8L);    LOGGER.info(""Numbers to be squared and get sum --> {}"", numbers);    final List<SquareNumberRequest> requests =        numbers.stream().map(SquareNumberRequest::new).toList();    var consumer = new Consumer(0L);    // Pass the request and the consumer to fanOutFanIn or sometimes referred as Orchestrator    // function    final Long sumOfSquaredNumbers = FanOutFanIn.fanOutFanIn(requests, consumer);    LOGGER.info(""Sum of all squared numbers --> {}"", sumOfSquaredNumbers);  }",main
1806,"  public static void <extra_id_0>(int[][] matrix) {    //prints out int[][]    for (var ints : matrix) {      for (var j = 0; j < matrix[0].length; j++) {        LOGGER.info(ints[j] + "" "");      }      LOGGER.info("""");    }  }",printMatrix
94,"  public static void <extra_id_0>(String[] args) {    // create some weapons    var enchantedHammer = new Weapon(1, ""enchanted hammer"");    var brokenGreatSword = new Weapon(2, ""broken great sword"");    var silverTrident = new Weapon(3, ""silver trident"");    // create repository    var weaponRepository = new ArmsDealer(new HashMap<String, List<Weapon>>(),            new WeaponDatabase());    // perform operations on the weapons    weaponRepository.registerNew(enchantedHammer);    weaponRepository.registerModified(silverTrident);    weaponRepository.registerDeleted(brokenGreatSword);    weaponRepository.commit();  }",main
2235,"  public static void <extra_id_0>(String[] args) {    var injector = Guice.createInjector(new LotteryTestingModule());    // start new lottery round    var administration = injector.getInstance(LotteryAdministration.class);    administration.resetLottery();    // submit some lottery tickets    var service = injector.getInstance(LotteryService.class);    SampleData.submitTickets(service, 20);    // perform lottery    administration.performLottery();  }",main
2,"  void <extra_id_0>() {    var file1 = new File(""fish1.out"");    file1.delete();    var file2 = new File(""fish2.out"");    file2.delete();  }",cleanup
1220,  public static void <extra_id_0>(final String[] args) {    var view = new View();    view.createView();  },main
1345,"  public void <extra_id_0>() throws InterruptedException {    var item = queue.take();    LOGGER.info(""Consumer [{}] consume item [{}] produced by [{}]"", name,        item.id(), item.producer());  }",consume
407,  public void <extra_id_0>() {    this.value.remove();  }  @Override,remove
1472,  void <extra_id_0>() {    var albumListPage = albumPage.cancelChanges();    albumListPage.navigateToPage();    assertTrue(albumListPage.isAt());  },testCancelChanges
1100,"  public Saga <extra_id_0>(Saga saga) {    var inValue = saga.getCurrentValue();    LOGGER.info(""The chapter '{}' has been started. ""            + ""The data {} has been stored or calculated successfully"",        getName(), inValue);    saga.setCurrentStatus(Saga.ChapterResult.SUCCESS);    saga.setCurrentValue(inValue);    return saga;  }  @Override",process
2225,  protected void <extra_id_0>() {    var previousTime = System.currentTimeMillis();    var lag = 0L;    while (isGameRunning()) {      var currentTime = System.currentTimeMillis();      var elapsedTime = currentTime - previousTime;      previousTime = currentTime;      lag += elapsedTime;      processInput();      while (lag >= MS_PER_FRAME) {        update();        lag -= MS_PER_FRAME;      }      render();    }  },processGameLoop
2991,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
3765,"  void <extra_id_0>() {    var remoteService = new RemoteService(new StaticRandomProvider(0.2));    var result = remoteService.doRemoteFunction(10);    assertEquals(100, result);  }",testSuccessfulCall
3737,"  public void <extra_id_0>() {    LOGGER.info(""The item flies and strikes the enemies finally returning to owner's hand."");  }  @Override",apply
1158,"  public static void <extra_id_0>(String[] args) {    var queue = new SimpleMessageQueue(10000);    final var producer = new Producer(""PRODUCER_1"", queue);    final var consumer = new Consumer(""CONSUMER_1"", queue);    new Thread(consumer::consume).start();    new Thread(() -> {      producer.send(""hand shake"");      producer.send(""some very important information"");      producer.send(""bye!"");      producer.stop();    }).start();  }",main
635,"  public Service <extra_id_0>(String serviceName) {    if (serviceCache.containsKey(serviceName)) {      var cachedService = serviceCache.get(serviceName);      var name = cachedService.getName();      var id = cachedService.getId();      LOGGER.info(""(cache call) Fetched service {}({}) from cache... !"", name, id);      return cachedService;    }    return null;  }  /**   * Adds the service into the cache map.   *   * @param newService a {@link Service}   */",getService
3102,"  void <extra_id_0>() throws Exception {    List<Tobacco> tobaccos = List.of(        new OldTobyTobacco(),        new RivendellTobacco(),        new SecondBreakfastTobacco()    );    // Verify if the sorceress is smoking the correct tobacco ...    tobaccos.forEach(tobacco -> {      final var advancedSorceress = new AdvancedSorceress();      advancedSorceress.setTobacco(tobacco);      advancedSorceress.smoke();      String lastMessage = appender.getLastMessage();      assertEquals(""AdvancedSorceress smoking "" + tobacco.getClass().getSimpleName(), lastMessage);    });    // ... and nothing else is happening.    assertEquals(tobaccos.size(), appender.getLogSize());  }",testSmokeEveryThing
3293,  void <extra_id_0>(DataBus dataBus);,setDataBus
3443,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObjectWithoutDB();            var order = new Order(new User(""K"", null), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderWithoutDatabase
1381,  public int <extra_id_0>() {    return 0;  }  @Override,getTreeSize
3258,"  public void <extra_id_0>(String username, String name, String email) {    var author = new Author(username, name, email);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.save(author);      session.getTransaction().commit();    }  }  @Override",authorCreated
406,"    public void <extra_id_0>() throws InterruptedException {        int initialValue = 1234567890;        int threadSize = 2;        ExecutorService executor = Executors.newFixedThreadPool(threadSize);        WithThreadLocal threadLocal = new WithThreadLocal(ThreadLocal.withInitial(() -> initialValue));        for (int i = 0; i < threadSize; i++) {            executor.submit(threadLocal);        }        executor.awaitTermination(3, TimeUnit.SECONDS);        threadLocal.remove();        List<String> lines = outContent.toString().lines().toList();        Assertions.assertTrue(lines.stream()                .allMatch(line -> line.endsWith(String.valueOf(initialValue))));    }",withThreadLocal
550,  List<Spellbook> <extra_id_0>();,findAllSpellbooks
221,  void <extra_id_0>() {    world.stop();    assertFalse(world.isRunning);  }  @Test,testStop
1759,  public Creature <extra_id_0>() {    return this.locker;  }  @Override,getLocker
2212,"  void <extra_id_0>() {    gameLoop.run();    Assertions.assertEquals(GameStatus.RUNNING, gameLoop.status);  }  @Test",testRun
2013,  public void <extra_id_0>(String depositNumber) {    this.depositNumber = depositNumber;  },setDepositNumber
703,  public boolean <extra_id_0>() {    return lock;  },isLock
3058,"  private Money <extra_id_0>() {    if (ChronoUnit.DAYS.between(LocalDate.now(), expirationDate)            < DAYS_UNTIL_EXPIRATION_WHEN_DISCOUNT_ACTIVE) {      return price.multipliedBy(DISCOUNT_RATE, RoundingMode.DOWN);    }    return Money.zero(USD);  }",calculateDiscount
3882,  public int <extra_id_0>() {    return this.status;  },getStatus
1194,"  void <extra_id_0>(){    View view = new View();    view.createView();    view.getModel().setSelectedAlbumNumber(2);    view.loadFromMod();    assertEquals(albumList[1], view.getModel().getTitle());  }  @Test",testLoad_1
3065,"    void <extra_id_0>() throws SQLException {        var product = productDao.findByName(""product"");        assertTrue(product.isEmpty());        TestUtils.executeSQL(INSERT_PRODUCT_SQL, dataSource);        product = productDao.findByName(""product"");        assertTrue(product.isPresent());        assertEquals(""product"", product.get().getName());        assertEquals(Money.of(USD, 100), product.get().getPrice());        assertEquals(LocalDate.parse(""2021-06-27""), product.get().getExpirationDate());    }    @Test",shouldFindProductByName
2773,  void <extra_id_0>();,stop
3708,  UserAccount <extra_id_0>(UserAccount userAccount);  /**   * Update record or Insert if not exists.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */,updateDb
2803,"  public Order <extra_id_0>(int id) throws SQLException {    Order order = null;    queyOrderById.setInt(1, id);    try (var rSet = queyOrderById.executeQuery()) {      queyOrderById.setInt(1, id);      if (rSet.next()) {        var address = new ShippingAddress(rSet.getString(4),            rSet.getString(5), rSet.getString(6));        order = new Order(rSet.getInt(1), rSet.getString(2), rSet.getString(3), address);      }      rSet.close();    } catch (Exception e) {      LOGGER.error(e.getLocalizedMessage(), e.getCause());    }    return order;  }  @Override",queryOrder
945,  public Message <extra_id_0>() {    try {      return blkQueue.poll();    } catch (Exception e) {      LOGGER.error(e.getMessage());    }    return null;  },retrieveMsg
3335,"  public void <extra_id_0>(GameObject gameObject) {    gameObject.updateCoordinate();    LOGGER.info(gameObject.getName() + ""'s coordinate has been changed."");  }",update
3716,"  public UserAccount <extra_id_0>(final UserAccount userAccount) {    Document id = new Document(USER_ID, userAccount.getUserId());    Document dataSet = new Document(USER_NAME, userAccount.getUserName())            .append(ADD_INFO, userAccount.getAdditionalInfo());    db.getCollection(CachingConstants.USER_ACCOUNT)            .updateOne(id, new Document(""$set"", dataSet));    return userAccount;  }  /**   * Update data if exists.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override",updateDb
1243,"  void <extra_id_0>() {    final var stew = new ImmutableStew(1, 2, 3, 4);    final var expectedMessage = ""Mixing the immutable stew we find: 1 potatoes, ""        + ""2 carrots, 3 meat and 4 peppers"";    for (var i = 0; i < 20; i++) {      stew.mix();      assertEquals(expectedMessage, appender.getLastMessage());    }    assertEquals(20, appender.getLogSize());  }",testMix
2823,  public boolean <extra_id_0>() {    return damaged;  },isDamaged
1356,"  void <extra_id_0>() {    UserModel model = new UserModel();    model.setName(""Lily"");    assertEquals(""Lily"", model.getName());  }  /**   * Verify if a user can set an email properly   */  @Test",testSetName
1986,  public String <extra_id_0>(Order order) {    return filterManager.filterRequest(order);  },sendRequest
2075,"  public void <extra_id_0>() {    try {      // Wait a while for existing tasks to terminate      if (awaitTerminationWithTimeout()) {        LOGGER.info(""Health check executor did not terminate in time"");        // Attempt to cancel currently executing tasks        healthCheckExecutor.shutdownNow();        // Wait again for tasks to respond to being cancelled        if (awaitTerminationWithTimeout()) {          LOGGER.error(""Health check executor did not terminate"");        }      }    } catch (InterruptedException ie) {      // Preserve interrupt status      Thread.currentThread().interrupt();      // (Re-)Cancel if current thread also interrupted      healthCheckExecutor.shutdownNow();      // Log the stack trace for interrupted exception      LOGGER.error(""Shutdown of the health check executor was interrupted"", ie);    }  }",shutdown
1234,"  public void <extra_id_0>() {    LOGGER        .info(""Mixing the immutable stew we find: {} potatoes, {} carrots, {} meat and {} peppers"",            data.numPotatoes(), data.numCarrots(), data.numMeat(), data.numPeppers());  }",mix
1975,"  void <extra_id_0>() {    final var order = new Order();    order.setName(EXPECTED_VALUE);    assertEquals(EXPECTED_VALUE, order.getName());  }  @Test",testSetName
775,  public void <extra_id_0>(boolean f) {    this.isFlirty = f;  },setFlirtiness
379,  public int <extra_id_0>() {    return timeMs;  }  @Override,getTimeMs
2252,  Optional<LotteryTicketId> <extra_id_0>(LotteryTicket ticket);  /**   * Get all lottery tickets.   */,save
1340,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1431,"  private String <extra_id_0>(String type, String sortBy, SortOrder sortOrder) {    return String.format(""Requesting shoes of type \""%s\"" sorted by \""%s\"" in \""%sending\"" order.."",        type,        sortBy,        sortOrder.getValue());  }",getQuerySummary
3568,"  void <extra_id_0>() {    var priceController = new PriceController();    var price = priceController.getPrice();    assertEquals(""20"", price);  }",testgetPrice
83,"  public void <extra_id_0>() {    if (context == null || context.size() == 0) {      return;    }    LOGGER.info(""Commit started"");    if (context.containsKey(UnitActions.INSERT.getActionValue())) {      commitInsert();    }    if (context.containsKey(UnitActions.MODIFY.getActionValue())) {      commitModify();    }    if (context.containsKey(UnitActions.DELETE.getActionValue())) {      commitDelete();    }    LOGGER.info(""Commit finished."");  }",commit
1852,"  void <extra_id_0>() throws InterruptedException {    var taskSet = new TaskSet();    taskSet.addTask(new Task(100));    Task task = taskSet.getTask();    assertEquals(100, task.getTime());    assertEquals(0, taskSet.getSize());  }",testGetTask
907,"  void <extra_id_0>() throws Exception {    var executeService = Executors.newFixedThreadPool(2);    var lock = new ReaderWriterLock();    var reader1 = new Reader(""Reader 1"", lock.readLock());    var writer1 = new Writer(""Writer 1"", lock.writeLock());    executeService.submit(writer1);    // Let writer1 execute first    Thread.sleep(150);    executeService.submit(reader1);    executeService.shutdown();    try {      executeService.awaitTermination(10, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"", e);    }    assertTrue(appender.logContains(""Writer 1 begin""));    assertTrue(appender.logContains(""Writer 1 finish""));    assertTrue(appender.logContains(""Reader 1 begin""));    assertTrue(appender.logContains(""Reader 1 finish""));  }",testWriteAndRead
2494,  public Optional<E> <extra_id_0>() {    var resultIterator = first(1).iterator();    return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();  }  /**   * Can be used to collect objects from the iteration.   *   * @param count defines the number of objects to return   * @return the same FluentIterable with a collection decimated to a maximum of 'count' first   *     objects.   */  @Override,first
3226,"  public String[] <extra_id_0>() {    return new String[]{        dependentObjects[0].getData(), dependentObjects[1].getData()    };  }",getData
357,  public void <extra_id_0>() {    strategy.execute();  },goToBattle
495,"  void <extra_id_0>() {    try {      shard.storeData(data);      var field = Shard.class.getDeclaredField(""dataStore"");      field.setAccessible(true);      var dataMap = (Map<Integer, Data>) field.get(shard);      assertEquals(1, dataMap.size());      assertEquals(data, dataMap.get(1));    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }  @Test",testStoreData
2232,  protected void <extra_id_0>() {    try {      var lag = new SecureRandom().nextInt(200) + 50;      Thread.sleep(lag);    } catch (InterruptedException e) {      logger.error(e.getMessage());      /* Clean up whatever needs to be handled before interrupting  */      Thread.currentThread().interrupt();    }  }  /**   * Render game frames to screen. Here we print bullet position to simulate   * this process.   */,processInput
1383,  public Node <extra_id_0>() {    return null;  }  @Override,getRight
2143,  void <extra_id_0>(Throwable throwable);  /**   * This is where the computation of task should reside. This method is called in context of   * background thread.   */  @Override,onError
1076,  public SagaResult <extra_id_0>() {    if (finished) {      return forward          ? SagaResult.FINISHED          : SagaResult.ROLLBACKED;    }    return SagaResult.PROGRESS;  }  /**   * add chapter to saga.   *   * @param name chapter name   * @return this   */,getResult
1960,"  public User <extra_id_0>(Integer id) {    LOGGER.info(""get user at: "" + id);    User user = null;    try (var session = factory.openSession()) {      var tx = session.beginTransaction();      user = session.get(User.class, id);      tx.commit();    } catch (HibernateException e) {      LOGGER.debug(""fail to get user"", e);    }    return user;  }  /**   * Close hibernate.   */",getUser
254,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic sum {}"", VERSION);    return source.accumulateSum(nums);  }  /**   * Accumulate multiplication.   * @param nums numbers need to multiply together   * @return accumulate multiplication   */",sum
601,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3039,"  public void <extra_id_0>(Product product) {    LOGGER.info(        String.format(            ""%s want to return %s($%.2f)..."",            name, product.getName(), product.getSalePrice().getAmount()));    if (purchases.contains(product)) {      try {        customerDao.deleteProduct(product, this);        purchases.remove(product);        receiveMoney(product.getSalePrice());        LOGGER.info(String.format(""%s returned %s!"", name, product.getName()));      } catch (SQLException ex) {        LOGGER.error(ex.getMessage());      }    } else {      LOGGER.error(String.format(""%s didn't buy %s..."", name, product.getName()));    }  }  /**   * Print customer's purchases.   */",returnProduct
2582,"  private ProbabilisticThreatAwareSystem <extra_id_0>(      final Predicate<? super ProbableThreat> predicate) {    return new SimpleProbabilisticThreatAwareSystem(this.systemId, filteredItems(predicate));  }",filteredGroup
1903,"  void <extra_id_0>() {    var message = new Message(MessageType.HEARTBEAT, """");    assertEquals(MessageType.HEARTBEAT, message.getType());  }  @Test",testGetType
1544,  public void <extra_id_0>() {    isDrunk = false;  }  @Override,makeSober
3361,"  private void <extra_id_0>(Order order, Order o) {    if ((o.messageSent.equals(MessageSent.NONE_SENT) || o.messageSent        .equals(MessageSent.PAYMENT_TRYING))        && System.currentTimeMillis() - o.createdTime < messageTime) {      var qt = new QueueTask(order, TaskType.MESSAGING, 2);      updateQueue(qt);      LOG.info(ORDER_ID + "": Error in sending Payment Success message, trying to""          + "" queue task and add to employee handle.."", order.id);      employeeHandleIssue(order);    }  }",handleSuccessMessageErrorIssue
2237,  private static PlayerDetails <extra_id_0>() {    return PLAYERS.get(RANDOM.nextInt(PLAYERS.size()));  },getRandomPlayerDetails
2299,"  void <extra_id_0>(PlayerDetails details, int prizeAmount);  /**   * error paying the prize.   */",ticketWon
1754,"  void <extra_id_0>() {    final var star = new Star(StarType.SUN, 1, 2);    final var firstMemento = star.getMemento();    assertEquals(""sun age: 1 years mass: 2 tons"", star.toString());    star.timePasses();    final var secondMemento = star.getMemento();    assertEquals(""red giant age: 2 years mass: 16 tons"", star.toString());    star.timePasses();    final var thirdMemento = star.getMemento();    assertEquals(""white dwarf age: 4 years mass: 128 tons"", star.toString());    star.timePasses();    assertEquals(""supernova age: 8 years mass: 1024 tons"", star.toString());    star.setMemento(thirdMemento);    assertEquals(""white dwarf age: 4 years mass: 128 tons"", star.toString());    star.timePasses();    assertEquals(""supernova age: 8 years mass: 1024 tons"", star.toString());    star.setMemento(secondMemento);    assertEquals(""red giant age: 2 years mass: 16 tons"", star.toString());    star.setMemento(firstMemento);    assertEquals(""sun age: 1 years mass: 2 tons"", star.toString());  }",testSetMemento
2679,"  private void <extra_id_0>() {    // If there are no pending requests, do nothing.    if (headIndex == tailIndex) {      return;    }    try {      var audioStream = getPendingAudio()[headIndex].getStream();      headIndex++;      var clip = AudioSystem.getClip();      clip.open(audioStream);      clip.start();    } catch (LineUnavailableException e) {      LOGGER.trace(""Error occurred while loading the audio: The line is unavailable"", e);    } catch (IOException e) {      LOGGER.trace(""Input/Output error while loading the audio"", e);    } catch (IllegalArgumentException e) {      LOGGER.trace(""The system doesn't support the sound: "" + e.getMessage(), e);    }  }  /**   * Returns the AudioInputStream of a file.   *   * @param filePath is the path of the audio file   * @return AudioInputStream   * @throws UnsupportedAudioFileException when the audio file is not supported   * @throws IOException                   when the file is not readable   */",update
1572,"  private static String <extra_id_0>(final String file) {    String firstLine = null;    try (var bufferedReader = new BufferedReader(new FileReader(file))) {      while (bufferedReader.ready()) {        /* Read the line */        firstLine = bufferedReader.readLine();      }      LOGGER.info(""ModuleTest::readFirstLine() : firstLine : "" + firstLine);    } catch (final IOException e) {      LOGGER.error(""ModuleTest::readFirstLine()"", e);    }    return firstLine;  }",readFirstLine
1840,  public void <extra_id_0>() {    this.finished = true;  },setFinished
3555,  void <extra_id_0>(String response);  // Get the current state of circuit breaker,recordFailure
1633,  public static void <extra_id_0>() {    bank = null;  }  @Test,TearDown
2518,"  void <extra_id_0>() {    var blacksmith = new OrcBlacksmith();    var weapon = blacksmith.manufactureWeapon(WeaponType.AXE);    verifyWeapon(weapon, WeaponType.AXE, OrcWeapon.class);  }  /**   * Testing {@link ElfBlacksmith} to produce a SHORT_SWORD asserting that the Weapon is an instance   * of {@link ElfWeapon}.   */  @Test",testOrcBlacksmithWithAxe
3036,  void <extra_id_0>(Product product) throws SQLException;,update
2989,  void <extra_id_0>() {    appender.stop();  }  /**   * The number of threads used to stress test the locking of the {@link Inventory#addItem(Item)}   * method   */,tearDown
2025,"  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);    when(cacheManager.getCache(""health-check"")).thenReturn(cache);    customHealthIndicator =        new CustomHealthIndicator(healthChecker, cacheManager, healthCheckRepository);  }  /**   * Test case for the `health()` method when the database is up.   *   * <p>Asserts that when the `health()` method is called and the database is up, it returns a   * Health object with Status.UP.   */  @Test",setUp
1257,  public int <extra_id_0>() {    return log.size();  },getLogSize
1304,"  void <extra_id_0>() {    var promise = new Promise<>();    var exceptionHandler = mock(Consumer.class);    promise.onError(exceptionHandler);    var exception = new Exception(""barf!"");    promise.fulfillExceptionally(exception);    verify(exceptionHandler).accept(eq(exception));  }",exceptionHandlerIsCalledWhenPromiseIsFulfilledExceptionally
1135,"  public void <extra_id_0>(Headers header, String value) {    headers.put(header, value);  }  @Override",addHeader
1590,"  void <extra_id_0>() {    final var server = mock(Server.class);    when(server.getHost()).thenReturn(""testhost"");    when(server.getPort()).thenReturn(1234);    doNothing().when(server).serve(any(Request.class));    final var loadBalancer = new LoadBalancer();    loadBalancer.addServer(server);    verifyNoMoreInteractions(server);    final var request = new Request(""test"");    for (var i = 0; i < loadBalancer.getNoOfServers() * 2; i++) {      loadBalancer.serverRequest(request);    }    verify(server, times(2)).serve(request);    verifyNoMoreInteractions(server);  }",testServe
147,"  private void <extra_id_0>(int count) throws Exception {    try (var allRooms = dao.getAll()) {      assertEquals(count, allRooms.count());    }  }  /**   * An arbitrary number which does not correspond to an active Room id.   *   * @return an int of a room id which doesn't exist   */",assertRoomCountIs
3410,"  public QueueTask <extra_id_0>(QueueTask t) {    data.enqueue(t);    return t;    //even if same thing queued twice, it is taken care of in other dbs  }  /**   * peek method returns object at front without removing it from queue.   *   * @return object at front of queue   * @throws IsEmptyException             if queue is empty   */",add
277,"  protected void <extra_id_0>(String soundName, int volume) {    logger.info(""Play {} with volume {}"", soundName, volume);  }  /**   * Spawn particles for the superpower.   * @param particleType Particle type.   * @param count Count of particles to be spawned.   */",playSound
2242,"  public void <extra_id_0>(LotteryService service, Scanner scanner) {    logger.info(""What is your email address?"");    var email = readString(scanner);    logger.info(""What is your bank account number?"");    var account = readString(scanner);    logger.info(""What is your phone number?"");    var phone = readString(scanner);    var details = new PlayerDetails(email, account, phone);    logger.info(""Give 4 comma separated lottery numbers?"");    var numbers = readString(scanner);    try {      var chosen = Arrays.stream(numbers.split("",""))          .map(Integer::parseInt)          .collect(Collectors.toSet());      var lotteryNumbers = LotteryNumbers.create(chosen);      var lotteryTicket = new LotteryTicket(new LotteryTicketId(), details, lotteryNumbers);      service.submitTicket(lotteryTicket).ifPresentOrElse(          (id) -> logger.info(""Submitted lottery ticket with id: {}"", id),          () -> logger.info(""Failed submitting lottery ticket - please try again."")      );    } catch (Exception e) {      logger.info(""Failed submitting lottery ticket - please try again."");    }  }  @Override",submitTicket
1009,"  void <extra_id_0>() {    SagaOrchestrator sagaOrchestrator = new SagaOrchestrator(newSaga(), serviceDiscovery());    Saga.Result badOrder = sagaOrchestrator.execute(""bad_order"");    Saga.Result crashedOrder = sagaOrchestrator.execute(""crashed_order"");    assertEquals(Saga.Result.ROLLBACK, badOrder);    assertEquals(Saga.Result.CRASHED, crashedOrder);  }",execute
720,"  public ReceiptViewModel <extra_id_0>(String userName, String itemName) {    Db.User user = Db.getInstance().findUserByUserName(userName);    if (user == null) {      return new InvalidUser(userName);    }    Db.Account account = Db.getInstance().findAccountByUser(user);    return purchase(user, account, itemName);  }  /**   * Domain purchase with user, account and itemName,   * with validation for whether product is out of stock   * and whether user has insufficient funds in the account.   *   * @param user in Db   * @param account in Db   * @param itemName of the item   * @return instance of ReceiptViewModel   */",purchase
2962,    Long <extra_id_0>();  }  /**   * Use this interface whenever you want to provide the product Name in your DTO.   */,getId
3395,  public ShippingRequest <extra_id_0>(String trasnactionId) {    return data.get(trasnactionId);  },get
3694,  public void <extra_id_0>(final Node node) {    if (node.previous != null) {      node.previous.next = node.next;    } else {      head = node.next;    }    if (node.next != null) {      node.next.previous = node.previous;    } else {      end = node.previous;    }  }  /**   * Move node to the front of the list.   *   * @param node {@link Node}   */,remove
3477,"  void <extra_id_0>() {    var res = expandedFinder(""It was"", ""kingdom"").find(text());    assertEquals(3, res.size());    assertEquals( ""It was many and many a year ago,"", res.get(0));    assertEquals( ""In a kingdom by the sea,"", res.get(1));    assertEquals( ""In this kingdom by the sea;"", res.get(2));  }",expandedFinderTest
1767,"  public void <extra_id_0>() {    // The target object for this example.    var sword = new SwordOfAragorn();    // Creation of creatures.    List<Creature> creatures = new ArrayList<>();    for (var i = 0; i < WORKERS; i++) {      creatures.add(new Elf(String.format(""Elf %s"", i)));      creatures.add(new Orc(String.format(""Orc %s"", i)));      creatures.add(new Human(String.format(""Human %s"", i)));    }    int totalFiends = WORKERS * MULTIPLICATION_FACTOR;    ExecutorService service = Executors.newFixedThreadPool(totalFiends);    // Attach every creature and the sword is a Fiend to fight for the sword.    for (var i = 0; i < totalFiends; i = i + MULTIPLICATION_FACTOR) {      service.submit(new Feind(creatures.get(i), sword));      service.submit(new Feind(creatures.get(i + 1), sword));      service.submit(new Feind(creatures.get(i + 2), sword));    }    // Wait for program to terminate.    try {      if (!service.awaitTermination(WAIT_TIME, TimeUnit.SECONDS)) {        LOGGER.info(""The master of the sword is now {}."", sword.getLocker().getName());      }    } catch (InterruptedException e) {      LOGGER.error(e.getMessage());      Thread.currentThread().interrupt();    } finally {      service.shutdown();    }  }",run
1124,  private T <extra_id_0>(int childIndex) {    return queue[parentIndex(childIndex)];  },parent
3782,  public String <extra_id_0>() {    return name().toLowerCase();  },toString
672,  public String <extra_id_0>() {    return name;  }  @Override,getName
3635,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[5];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = LITERAL.getIntValue();    bytecode[3] = 50;                        // health amount    bytecode[4] = SET_HEALTH.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(50, vm.getWizards()[wizardNumber].getHealth());  }  @Test",testSetHealth
2233,"  protected void <extra_id_0>() {    var position = controller.getBulletPosition();    logger.info(""Current bullet position: {}"", position);  }  /**   * execute game loop logic.   */",render
1862,"  void <extra_id_0>() {    appender.stop();  }  /**   * Verify if a party action triggers the correct output to the std-Out   */  @ParameterizedTest  @MethodSource(""dataProvider"")",tearDown
3760,  final void <extra_id_0>(final Weapon weapon) {    assertNotNull(weapon);    var enchantment = weapon.getEnchantment();    assertNotNull(enchantment);    assertNotNull(weapon.getEnchantment());    weapon.swing();    verify(enchantment).apply();    verifyNoMoreInteractions(enchantment);    weapon.wield();    verify(enchantment).onActivate();    verifyNoMoreInteractions(enchantment);    weapon.unwield();    verify(enchantment).onDeactivate();    verifyNoMoreInteractions(enchantment);  },testBasicWeaponActions
2805,"  public boolean <extra_id_0>() throws Exception {    try {      deleteschema.execute(DELETE_SCHEMA);      queryOrders.close();      queyOrderById.close();      deleteschema.close();      insertIntoOrders.close();      conn.close();      return true;    } catch (Exception e) {      LOGGER.error(e.getLocalizedMessage(), e.getCause());    }    return false;  }",deleteSchema
1545,  public void <extra_id_0>() {    isHappy = true;  }  @Override,makeHappy
3429,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObjectVanilla();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderVanilla
1726,  void <extra_id_0>() {    presenter.start();    presenter.cancelled();    assertFalse(stub.isOpened());  }  @Test,cancellation
2109,    public Long <extra_id_0>() {        return id;    },getId
3699,  public boolean <extra_id_0>() {    return cache.size() >= capacity;  }  /**   * Get LRU data.   *   * @return {@link UserAccount}   */,isFull
2782,"  void <extra_id_0>() {    var eventManager = new EventManager();    try {      var aEventId = eventManager.createAsync(60);      eventManager.start(aEventId);      assertEquals(1, eventManager.getEventPool().size());      assertTrue(eventManager.getEventPool().size() < EventManager.MAX_RUNNING_EVENTS);      assertEquals(-1, eventManager.numOfCurrentlyRunningSyncEvent());      eventManager.cancel(aEventId);      assertTrue(eventManager.getEventPool().isEmpty());    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException e) {      LOGGER.error(e.getMessage());    }  }  @Test",testAsynchronousEvent
3750,  void <extra_id_0>();,swing
3768,  public static void <extra_id_0>(String[] args) {    var host1 = new Client();    var host2 = new Client();    host1.useService(12);    host2.useService(73);  },main
1404,"  void <extra_id_0>() {    final var observer = mock(Race.class);    final var weather = new GenWeather();    weather.addObserver(observer);    verifyNoMoreInteractions(observer);    weather.timePasses();    assertEquals(""The weather changed to rainy."", appender.getLastMessage());    verify(observer).update(weather, WeatherType.RAINY);    weather.removeObserver(observer);    weather.timePasses();    assertEquals(""The weather changed to windy."", appender.getLastMessage());    verifyNoMoreInteractions(observer);    assertEquals(2, appender.getLogSize());  }  /**   * Verify if the weather passes in the order of the {@link WeatherType}s   */  @Test",testAddRemoveObserver
612,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    assertEquals(Nourishment.SATURATED, model.getNourishment());    var messageFormat = ""Giant giant1, The giant looks healthy, alert and %s."";    for (final var nourishment : Nourishment.values()) {      action.setNourishment(nourishment);      assertEquals(nourishment, model.getNourishment());      assertEquals(String.format(messageFormat, nourishment), model.toString());    }  }  /**   * Test update model.   */  @Test",testSetNourishment
694,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3565,"  public static void <extra_id_0>(String[] args) {    var serverStartTime = System.nanoTime();    var delayedService = new DelayedRemoteService(serverStartTime, 5);    var delayedServiceCircuitBreaker = new DefaultCircuitBreaker(delayedService, 3000, 2,        2000 * 1000 * 1000);    var quickService = new QuickRemoteService();    var quickServiceCircuitBreaker = new DefaultCircuitBreaker(quickService, 3000, 2,        2000 * 1000 * 1000);    //Create an object of monitoring service which makes both local and remote calls    var monitoringService = new MonitoringService(delayedServiceCircuitBreaker,        quickServiceCircuitBreaker);    //Fetch response from local resource    LOGGER.info(monitoringService.localResourceResponse());    //Fetch response from delayed service 2 times, to meet the failure threshold    LOGGER.info(monitoringService.delayedServiceResponse());    LOGGER.info(monitoringService.delayedServiceResponse());    //Fetch current state of delayed service circuit breaker after crossing failure threshold limit    //which is OPEN now    LOGGER.info(delayedServiceCircuitBreaker.getState());    //Meanwhile, the delayed service is down, fetch response from the healthy quick service    LOGGER.info(monitoringService.quickServiceResponse());    LOGGER.info(quickServiceCircuitBreaker.getState());    //Wait for the delayed service to become responsive    try {      LOGGER.info(""Waiting for delayed service to become responsive"");      Thread.sleep(5000);    } catch (InterruptedException e) {      e.printStackTrace();    }    //Check the state of delayed circuit breaker, should be HALF_OPEN    LOGGER.info(delayedServiceCircuitBreaker.getState());    //Fetch response from delayed service, which should be healthy by now    LOGGER.info(monitoringService.delayedServiceResponse());    //As successful response is fetched, it should be CLOSED again.    LOGGER.info(delayedServiceCircuitBreaker.getState());  }",main
681,  void <extra_id_0>() {    final var normalCreature = mock(Creature.class);    when(normalCreature.getSize()).thenReturn(Size.NORMAL);    final var smallCreature = mock(Creature.class);    when(smallCreature.getSize()).thenReturn(Size.SMALL);    final var normalSelector = new SizeSelector(Size.NORMAL);    assertTrue(normalSelector.test(normalCreature));    assertFalse(normalSelector.test(smallCreature));  },testMovement
2277,"  public void <extra_id_0>() {    administration.resetLottery();    logger.info(""The lottery ticket database was cleared."");  }",resetLottery
2288,  public MongoClient <extra_id_0>() {    return mongoClient;  }  /**   * Get mongo database.   *   * @return mongo database   */,getMongoClient
1549,  public boolean <extra_id_0>(King king) {    return this.isFlirty && king.isHappy && !king.isDrunk;  },getFlirted
1018,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""-1"");      return ChapterResult.success(value);    }  }  class Service2 extends Service<Integer> {    @Override    public String getName() {      return ""2"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+2"");      return ChapterResult.success(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-2"");      return ChapterResult.success(value);    }  }  class Service3 extends Service<Integer> {    @Override    public String getName() {      return ""3"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+3"");      return ChapterResult.success(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-3"");      return ChapterResult.success(value);    }  }  class Service4 extends Service<Integer> {    @Override    public String getName() {      return ""4"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+4"");      return ChapterResult.failure(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-4"");      return ChapterResult.success(value);    }  }}",rollback
2350,"  void <extra_id_0>() {    assertEquals(0, mongoEventLog.getEventsCollection().countDocuments());  }  @Test",testSetup
57,  public void <extra_id_0>(Soldier soldier) {    // Do nothing  }  /**   * Sergeant Visitor method.   * @param sergeant Sergeant to be visited   */  @Override,visit
3720,  public UserAccount <extra_id_0>(final String userId) {    if (db.containsKey(userId)) {      return db.get(userId);    }    return null;  }  /**   * Write to DB.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override,readFromDb
637,"  public Object <extra_id_0>(String serviceName) {    if (serviceName.equals(""jndi/serviceA"")) {      LOGGER.info(""Looking up service A and creating new service for A"");      return new ServiceImpl(""jndi/serviceA"");    } else if (serviceName.equals(""jndi/serviceB"")) {      LOGGER.info(""Looking up service B and creating new service for B"");      return new ServiceImpl(""jndi/serviceB"");    } else {      return null;    }  }",lookup
1098,  public Saga <extra_id_0>(Saga saga) {    var nextSaga = saga;    Object nextVal;    var chapterName = saga.getCurrent().getName();    if (chapterName.equals(getName())) {      if (saga.isForward()) {        nextSaga = process(saga);        nextVal = nextSaga.getCurrentValue();        if (nextSaga.isCurrentSuccess()) {          nextSaga.forward();        } else {          nextSaga.back();        }      } else {        nextSaga = rollback(saga);        nextVal = nextSaga.getCurrentValue();        nextSaga.back();      }      if (isSagaFinished(nextSaga)) {        return nextSaga;      }      nextSaga.setCurrentValue(nextVal);    }    var finalNextSaga = nextSaga;    return sd.find(chapterName).map(ch -> ch.execute(finalNextSaga))        .orElseThrow(serviceNotFoundException(chapterName));  },execute
814,"  public T <extra_id_0>() throws BusinessException {    do {      try {        return this.op.perform();      } catch (BusinessException e) {        this.errors.add(e);        if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {          throw e;        }        try {          var testDelay = (long) Math.pow(2, this.attempts()) * 1000 + RANDOM.nextInt(1000);          var delay = Math.min(testDelay, this.maxDelay);          Thread.sleep(delay);        } catch (InterruptedException f) {          //ignore        }      }    } while (true);  }",perform
2401,  public int <extra_id_0>() {    return number;  }  @Override,interpret
2978,"  public void <extra_id_0>() {    final var executorService = Executors.newSingleThreadScheduledExecutor();    executorService.scheduleAtFixedRate(new Runnable() {      final World world = new World();      @Override      public void run() {        var countries = world.fetch();        LOGGER.info(""Our world currently has the following countries:-"");        countries.stream().map(country -> ""\t"" + country).forEach(LOGGER::info);      }    }, 0, 15, TimeUnit.SECONDS); // Run at every 15 seconds.  }  /**   * Program entry point.   *   * @param args command line args   */",run
529,  void <extra_id_0>(E entity);,delete
909,  void <extra_id_0>() {    appender.stop();  },tearDown
3083,  public void <extra_id_0>() {    tobacco.smoke(this);  },smoke
2038,"  void <extra_id_0>() {    // Set thresholds for testing within the test method to avoid issues with Spring's @Value    cpuHealthIndicator.setSystemCpuLoadThreshold(80.0);    cpuHealthIndicator.setProcessCpuLoadThreshold(50.0);    cpuHealthIndicator.setLoadAverageThreshold(0.75);    // Mock the getters to return your desired values    when(mockOsBean.getCpuLoad()).thenReturn(0.5); // Simulate 50% system CPU load    when(mockOsBean.getProcessCpuLoad()).thenReturn(0.8); // Simulate 80% process CPU load    when(mockOsBean.getAvailableProcessors()).thenReturn(8);    when(mockOsBean.getSystemLoadAverage()).thenReturn(5.0);    // Execute the health check    Health health = cpuHealthIndicator.health();    // Assertions    assertEquals(        Status.DOWN,        health.getStatus(),        ""Health status should be DOWN when process CPU load is high"");    assertEquals(        ""High process CPU load"",        health.getDetails().get(""error""),        ""Error message should indicate high process CPU load"");  }",whenProcessCpuLoadIsHigh_thenHealthIsDown
3563,  public String <extra_id_0>() {    try {      return this.delayedService.attemptRequest();    } catch (RemoteServiceException e) {      return e.getMessage();    }  }  /**   * Fetches response from a healthy service without any failure.   *   * @return response string   */,delayedServiceResponse
251,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic mul {}"", VERSION);    return oldSource.accumulateMul(nums);  }  /**   * Chech if has any zero.   * @param nums numbers need to check   * @return if has any zero, return true, else, return false   */",mul
675,  public Color <extra_id_0>() {    return color;  }  @Override,getColor
1164,"  void <extra_id_0>() throws Exception {    final var messages = List.of(        createMessage(""you"", ""Hello!""),        createMessage(""me"", ""Hi!""),        Message.POISON_PILL,        createMessage(""late_for_the_party"", ""Hello? Anyone here?"")    );    final var queue = new SimpleMessageQueue(messages.size());    for (final var message : messages) {      queue.put(message);    }    new Consumer(""NSA"", queue).consume();    assertTrue(appender.logContains(""Message [Hello!] from [you] received by [NSA]""));    assertTrue(appender.logContains(""Message [Hi!] from [me] received by [NSA]""));    assertTrue(appender.logContains(""Consumer NSA receive request to terminate.""));  }  /**   * Create a new message from the given sender with the given message body   *   * @param sender  The sender's name   * @param message The message body   * @return The message instance   */",testConsume
1670,  public Nourishment <extra_id_0>() {    return giant.getNourishment();  },getNourishment
2078,"  public void <extra_id_0>() {    try {      HealthCheck healthCheck = new HealthCheck();      healthCheck.setStatus(HEALTH_CHECK_OK);      entityManager.persist(healthCheck);      entityManager.flush();      HealthCheck retrievedHealthCheck = entityManager.find(HealthCheck.class, healthCheck.getId());      entityManager.remove(retrievedHealthCheck);    } catch (Exception e) {      LOGGER.error(""Test transaction failed"", e);      throw e;    }  }",performTestTransaction
2922,  public void <extra_id_0>() {    // do nothing  },render
534,  public E <extra_id_0>(E entity) {    Transaction tx = null;    E result = null;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      result = (E) session.merge(entity);      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  }  @Override,merge
273,"  void <extra_id_0>() {    assertEquals(0, arithmetic.sum(-1, 0, 1));  }  @Test",testSum
1798,"  void <extra_id_0>() {    var guard = new Guard();    assertThat(guard, instanceOf(Permission.class));  }",testGuard
2566,"  private static void <extra_id_0>() {    LOGGER.info(""### Filtering ProbabilisticThreatAwareSystem by probability ###"");    var trojanArcBomb = new SimpleProbableThreat(""Trojan-ArcBomb"", 1, ThreatType.TROJAN, 0.99);    var rootkit = new SimpleProbableThreat(""Rootkit-Kernel"", 2, ThreatType.ROOTKIT, 0.8);    List<ProbableThreat> probableThreats = List.of(trojanArcBomb, rootkit);    var probabilisticThreatAwareSystem =        new SimpleProbabilisticThreatAwareSystem(""Sys-1"", probableThreats);    LOGGER.info(""Filtering ProbabilisticThreatAwareSystem. Initial : ""        + probabilisticThreatAwareSystem);    //Filtering using filterer    var filteredThreatAwareSystem = probabilisticThreatAwareSystem.filtered()        .by(probableThreat -> Double.compare(probableThreat.probability(), 0.99) == 0);    LOGGER.info(""Filtered by probability = 0.99 : "" + filteredThreatAwareSystem);  }  /**   * Demonstrates how to filter {@link ThreatAwareSystem} based on startingOffset property   * of {@link SimpleThreat}. The @{@link com.iluwatar.filterer.domain.Filterer#by(Predicate)}   * method is able to use {@link Threat} as predicate argument.   */",filteringSimpleProbableThreats
1888,  Heavy <extra_id_0>() {    return holder.getHeavy();  },getHeavy
950,  Person <extra_id_0>(String name);,findByName
3184,      void <extra_id_0>() throws Exception {        var result = dao.delete(existingCustomer);        assertTrue(result);        assertCustomerCountIs(0);        assertFalse(dao.getById(existingCustomer.getId()).isPresent());      }      @Test,deletionShouldBeSuccessAndCustomerShouldBeNonAccessible
3224,  public void <extra_id_0>(T message) {    this.data = message;  },setData
56,  public void <extra_id_0>(Commander commander) {    // Do nothing  },visit
2444,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
983,"  void <extra_id_0>() {    var core = new CustomerCore();    core.addRole(Role.Borrower);    var bRole = core.getRole(Role.Borrower, BorrowerRole.class);    assertTrue(bRole.isPresent());    var nonRole = core.getRole(Role.Borrower, InvestorRole.class);    assertFalse(nonRole.isPresent());    var invRole = core.getRole(Role.Investor, InvestorRole.class);    assertFalse(invRole.isPresent());  }  @Test",getRole
1029,"  private static Saga <extra_id_0>(Object value) {    return Saga        .create()        .chapter(""init an order"").setInValue(value)        .chapter(""booking a Fly"")        .chapter(""booking a Hotel"")        .chapter(""withdrawing Money"");  }",newSaga
734,"  void <extra_id_0>() {    var r1 = new Rect(10, 10, 20, 20);    var r2 = new Rect(15, 15, 20, 20);    var r3 = new Rect(50, 50, 20, 20);    //r1 intersects r2 and not r3    assertTrue(r1.intersects(r2));    assertFalse(r1.intersects(r3));  }",intersectsTest
3529,"      public int <extra_id_0>(Car car1, Car car2) {        return car1.getYear() - car2.getYear();      }    });",compare
3171,"  void <extra_id_0>() {    final var newLastname = ""Clinton"";    customer.setLastName(newLastname);    assertEquals(newLastname, customer.getLastName());  }  @Test",getAndSetLastname
3787,"  public static void <extra_id_0>(String[] args) {    var mage = new Hero.Builder(Profession.MAGE, ""Riobard"")        .withHairColor(HairColor.BLACK)        .withWeapon(Weapon.DAGGER)        .build();    LOGGER.info(mage.toString());    var warrior = new Hero.Builder(Profession.WARRIOR, ""Amberjill"")        .withHairColor(HairColor.BLOND)        .withHairType(HairType.LONG_CURLY).withArmor(Armor.CHAIN_MAIL).withWeapon(Weapon.SWORD)        .build();    LOGGER.info(warrior.toString());    var thief = new Hero.Builder(Profession.THIEF, ""Desmond"")        .withHairType(HairType.BALD)        .withWeapon(Weapon.BOW)        .build();    LOGGER.info(thief.toString());  }",main
2376,"  void <extra_id_0>() {    // new instance of an identity map(not connected to any DB here)    IdentityMap idMap = new IdentityMap();    // Dummy person instances    Person person1 = new Person(11, ""Michael"", 27304159);    Person person2 = new Person(22, ""John"", 42273631);    Person person3 = new Person(33, ""Arthur"", 27489171);    Person person4 = new Person(44, ""Finn"", 20499078);    Person person5 = new Person(55, ""Michael"", 40599078);    // All records go into identity map    idMap.addPerson(person1);    idMap.addPerson(person2);    idMap.addPerson(person3);    idMap.addPerson(person4);    idMap.addPerson(person5);    // Test for dummy persons in the map    Assertions.assertEquals(person1,idMap.getPerson(11),""Incorrect person record returned"");    Assertions.assertEquals(person4,idMap.getPerson(44),""Incorrect person record returned"");    // Test for person with given id not in map    Assertions.assertNull(idMap.getPerson(1), ""Incorrect person record returned"");  }",testGetFromMap
2488,"  public final boolean <extra_id_0>() {    next = computeNext();    return next != null;  }  /**   * Returns the next element of the Iterable.   *   * @return the next element of the Iterable, or null if not present.   */  @Override",hasNext
2063,"  public Health <extra_id_0>() {    List<GarbageCollectorMXBean> gcBeans = getGarbageCollectorMxBeans();    List<MemoryPoolMXBean> memoryPoolMxBeans = getMemoryPoolMxBeans();    Map<String, Map<String, String>> gcDetails = new HashMap<>();    for (GarbageCollectorMXBean gcBean : gcBeans) {      Map<String, String> collectorDetails = createCollectorDetails(gcBean, memoryPoolMxBeans);      gcDetails.put(gcBean.getName(), collectorDetails);    }    return Health.up().withDetails(gcDetails).build();  }  /**   * Creates details for the given garbage collector, including collection count, collection time,   * and memory pool information.   *   * @param gcBean The garbage collector MXBean   * @param memoryPoolMxBeans List of memory pool MXBeans   * @return Map containing details for the garbage collector   */",health
990,"  public String <extra_id_0>() {    return String.format(""Borrower %s wants to get some money."", name);  }",borrow
1594,"  public static void <extra_id_0>(String[] args) {    var loadBalancer1 = new LoadBalancer();    var loadBalancer2 = new LoadBalancer();    loadBalancer1.serverRequest(new Request(""Hello""));    loadBalancer2.serverRequest(new Request(""Hello World""));  }",main
1732,  void <extra_id_0>() {    CalculatorModel model = modelAfterExecutingActions(new ArrayList<>());    assert model.getVariable() == 0 && model.getOutput() == 0;  }  @Test,testSetup
3197,"  private static List<MmaFighter<?>> <extra_id_0>() {    return List.of(          new MmaBantamweightFighter(""Ed"", ""Edwards"", ""The Problem Solver"", ""Judo""),          new MmaLightweightFighter(""Evan"", ""Evans"", ""Clean Coder"", ""Sambo""),          new MmaHeavyweightFighter(""Dave"", ""Davidson"", ""The Bug Smasher"", ""Kickboxing""),          new MmaBantamweightFighter(""Ray"", ""Raymond"", ""Scrum Master"", ""Karate""),          new MmaHeavyweightFighter(""Jack"", ""Jackson"", ""The Pragmatic"", ""Brazilian Jiu-Jitsu"")    );  }",getOpponents
2364,  public int <extra_id_0>() {    if (personList == null) {      return 0;    }    return personList.size();  },size
88,  public void <extra_id_0>(Weapon weapon) {    //Some modify logic to DB  },modify
2703,"  public String <extra_id_0>() {    return ""Dwarf cart operator"";  }",name
2646,"  void <extra_id_0>() {    var user = new User(""Free User"");    UserGroup.addUserToPaidGroup(user);    assertThrows(IllegalArgumentException.class, () -> {      UserGroup.addUserToFreeGroup(user);    });  }",testAddUserToFreeWhenOnPaid
2996,"  public void <extra_id_0>(String message) {    LOGGER.info(""Canon Printer : {}"", message);  }",print
1970,"  public synchronized void <extra_id_0>(Integer e) {    LOGGER.info(""putting"");    sourceList.add(e);    LOGGER.info(""notifying"");    notify();  }",put
2114,    public void <extra_id_0>(Set<CakeLayer> layers) {        this.layers = layers;    },setLayers
3297,  public List<String> <extra_id_0>() {    return List.copyOf(messages);  },getMessages
2186,  public ItemType <extra_id_0>() {    return type;  },getType
2442,"  void <extra_id_0>() {    final var menuStore = new MenuStore();    final var view = mock(View.class);    menuStore.registerView(view);    verifyNoMoreInteractions(view);    // Menu should not react on content action ...    menuStore.onAction(new ContentAction(Content.COMPANY));    verifyNoMoreInteractions(view);    // ... but it should react on a menu action    menuStore.onAction(new MenuAction(MenuItem.PRODUCTS));    verify(view, times(1)).storeChanged(eq(menuStore));    verifyNoMoreInteractions(view);    assertEquals(MenuItem.PRODUCTS, menuStore.getSelected());  }",testOnAction
1592,  public int <extra_id_0>() {    return port;  },getPort
479,"  public static void <extra_id_0>(String[] args) {    // eagerly initialized singleton    var ivoryTower1 = IvoryTower.getInstance();    var ivoryTower2 = IvoryTower.getInstance();    LOGGER.info(""ivoryTower1={}"", ivoryTower1);    LOGGER.info(""ivoryTower2={}"", ivoryTower2);    // lazily initialized singleton    var threadSafeIvoryTower1 = ThreadSafeLazyLoadedIvoryTower.getInstance();    var threadSafeIvoryTower2 = ThreadSafeLazyLoadedIvoryTower.getInstance();    LOGGER.info(""threadSafeIvoryTower1={}"", threadSafeIvoryTower1);    LOGGER.info(""threadSafeIvoryTower2={}"", threadSafeIvoryTower2);    // enum singleton    var enumIvoryTower1 = EnumIvoryTower.INSTANCE;    var enumIvoryTower2 = EnumIvoryTower.INSTANCE;    LOGGER.info(""enumIvoryTower1={}"", enumIvoryTower1);    LOGGER.info(""enumIvoryTower2={}"", enumIvoryTower2);    // double checked locking    var dcl1 = ThreadSafeDoubleCheckLocking.getInstance();    LOGGER.info(dcl1.toString());    var dcl2 = ThreadSafeDoubleCheckLocking.getInstance();    LOGGER.info(dcl2.toString());    // initialize on demand holder idiom    var demandHolderIdiom = InitializingOnDemandHolderIdiom.getInstance();    LOGGER.info(demandHolderIdiom.toString());    var demandHolderIdiom2 = InitializingOnDemandHolderIdiom.getInstance();    LOGGER.info(demandHolderIdiom2.toString());    // initialize singleton using Bill Pugh's implementation    var billPughSingleton = BillPughImplementation.getInstance();    LOGGER.info(billPughSingleton.toString());    var billPughSingleton2 = BillPughImplementation.getInstance();    LOGGER.info(billPughSingleton2.toString());  }",main
398,"  public void <extra_id_0>() {    LOGGER.info(""{} is calm and peaceful."", mammoth);  }  @Override",observe
2924,  void <extra_id_0>();,render
259,"  void <extra_id_0>() {    assertEquals(0, arithmetic.sum(-1, 0, 1));  }  @Test",testSum
432,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", null);    assertNotEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals7
2548,"  void <extra_id_0>() {    var weapon = factory.create(WeaponType.SWORD);    verifyWeapon(weapon, Sword.class);  }  /**   * This method asserts that the weapon object that is passed is an instance of the clazz   *   * @param weapon weapon object which is to be verified   * @param clazz  expected class of the weapon   */",testWeapon
2905,  void <extra_id_0>(Student student) throws DataMapperException;,insert
588,"  void <extra_id_0>() {    final var all = this.dao.findAll();    for (final var entity : all) {      final var byId = this.dao.find(entity.getId());      assertNotNull(byId);      assertEquals(byId.getId(), byId.getId());    }  }  @Test",testFind
1063,  ChapterResult<K> <extra_id_0>(K value);,rollback
2806,  boolean <extra_id_0>(Rectangle r) {    return !(r.getLeft() > getRight() || r.getRight() < getLeft() || r.getTop() > getBottom() || r        .getBottom() < getTop());  }  @Override,intersectsWith
1460,  public synchronized T <extra_id_0>() {    if (available.isEmpty()) {      available.add(create());    }    var instance = available.iterator().next();    available.remove(instance);    inUse.add(instance);    return instance;  },checkOut
820,"  private static void <extra_id_0>() throws Exception {    op = new FindCustomer(""123"", new CustomerNotFoundException(NOT_FOUND));    try {      op.perform();    } catch (CustomerNotFoundException e) {      LOG.info(""Yet the operation will throw an error every once in a while."");    }  }",errorNoRetry
391,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    }  }},getLastMessage
2408,"  public String <extra_id_0>() {    return ""*"";  }",toString
1669,"  public void <extra_id_0>(Fatigue fatigue) {    this.giant.setFatigue(fatigue);  }  @SuppressWarnings(""UnusedReturnValue"")",setFatigue
2009,  public void <extra_id_0>(String contactNumber) {    this.contactNumber = contactNumber;  },setContactNumber
3493,"  void <extra_id_0>() {    final var king = new OrcKing();    REQUESTS.forEach(request -> {      king.makeRequest(request);      assertTrue(          request.isHandled(),          ""Expected all requests from King to be handled, but ["" + request + ""] was not!""      );    });  }",testMakeRequest
1694,  public void <extra_id_0>(String message) {    this.numOfMessageSent++;  }  @Override,showMessage
519,  public int <extra_id_0>() {    return id;  },getId
312,"  void <extra_id_0>() {    assertEquals(0, appender.getLogSize());    this.method.stealTheItem(this.expectedTarget);    assertEquals(this.expectedStealMethod, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }  /**   * Verify if the complete steal process goes as planned   */  @Test",testStealTheItem
1977,"  void <extra_id_0>() {    final var order = new Order();    order.setAddress(EXPECTED_VALUE);    assertEquals(EXPECTED_VALUE, order.getAddress());  }  @Test",testSetAddress
1896,  Heavy <extra_id_0>() throws Exception {    return holder.getHeavy();  },getHeavy
2177,  private boolean <extra_id_0>(T val) {    return this.val.compareTo(val) > 0;  },isGreaterThan
1146,"    public Map<Headers, String> <extra_id_0>() {      throw poison();    }    @Override",getHeaders
1149,"    private RuntimeException <extra_id_0>() {      return new UnsupportedOperationException(""Poison"");    }  };  /**   * Enumeration of Type of Headers.   */",poison
1212,    void <extra_id_0>() {        assertDoesNotThrow(() -> App.main(new String[]{}));    },shouldExecuteApplicationWithoutException
1940,"  public void <extra_id_0>(int currentId) {    var nextInstance = this.findNextInstance(currentId);    var heartbeatInvokeMessage = new Message(MessageType.HEARTBEAT_INVOKE, """");    nextInstance.onMessage(heartbeatInvokeMessage);  }  /**   * Find all the alive instances with smaller ID than current instance.   *   * @param currentId ID of current instance.   * @return ID list of all the candidate instance.   */",sendHeartbeatInvokeMessage
1662,"  void <extra_id_0>() {    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);    assertEquals(Health.HEALTHY, model.getHealth());    var messageFormat = ""The giant looks %s, alert and saturated."";    for (final var health : Health.values()) {      model.setHealth(health);      assertEquals(health, model.getHealth());      assertEquals(String.format(messageFormat, health), model.toString());    }  }  /**   * Verify if the fatigue level is set properly though the constructor and setter   */  @Test",testSetHealth
1479,"  public boolean <extra_id_0>() {    return ""Album List"".equals(page.getTitleText());  }  /**   * Selects an album by the given album title   *   * @param albumTitle the title of the album to click   * @return the album page   */",isAt
2606,  void <extra_id_0>() {    appender.stop();  },tearDown
2465,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1290,  private Promise<Integer> <extra_id_0>() {    return download(DEFAULT_URL).thenApply(Utility::countLines);  }  /*   * Return a promise to provide the local absolute path of the file downloaded in background.   * This is an async method and does not wait until the file is downloaded.   */,countLines
845,"  public void <extra_id_0>() throws InterruptedException {    executorService.shutdown();    if (executorService.awaitTermination(4, TimeUnit.SECONDS)) {      executorService.shutdownNow();    }  }",stop
1387,"  void <extra_id_0>() {    appender.stop();  }  /**   * Add a {@link WeatherObserver}, verify if it gets notified of a weather change, remove the   * observer again and verify that there are no more notifications.   */  @Test",tearDown
1661,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
3649,  public int <extra_id_0>(int wizard) {    return wizards[wizard].getHealth();  },getHealth
3763,  void <extra_id_0>() {    long result = new ServiceAmbassador().doRemoteFunction(10);    assertTrue(result == 100 || result == RemoteServiceStatus.FAILURE.getRemoteServiceStatusValue());  },test
583,"  void <extra_id_0>() {    final var dao = getDao();    final var allBooks = dao.findAll();    for (final var book : allBooks) {      final var spellByName = dao.findByName(book.getName());      assertNotNull(spellByName);      assertEquals(book.getId(), spellByName.getId());      assertEquals(book.getName(), spellByName.getName());    }  }",testFindByName
543,  public void <extra_id_0>(Set<Wizard> wizards) {    this.wizards = wizards;  },setWizards
181,  Boolean <extra_id_0>(Room room) throws Exception;,update
2881,  void <extra_id_0>();,commanderReady
1264,  public void <extra_id_0>(Exception exception) {    super.fulfillExceptionally(exception);    handleException(exception);    postFulfillment();  },fulfillExceptionally
3593,  void <extra_id_0>();,doProcessing
3864,  public int <extra_id_0>() {    return 5;  },getProductInventories
1827,"  private void <extra_id_0>(Result<?> data, int workerId) {    this.allResultData.put(workerId, data);    if (this.allResultData.size() == this.expectedNumResults) {      //all data received      this.finalResult = aggregateData();    }  }",collectResult
3881,  public void <extra_id_0>(int status) {    this.status = status;    this.thread.interrupt();  }    /**   * Returns the status of the thread of execution.   * @return the status of the thread of execution.   */,kill
936,"    public boolean <extra_id_0>(long time, TimeUnit unit) {      throw new UnsupportedOperationException();    }    @Override",tryLock
1378,  Node <extra_id_0>();,getRight
3491,  public void <extra_id_0>() {    var visible = getVisibility() == Visibility.INVISIBLE            ? Visibility.VISIBLE : Visibility.INVISIBLE;    setVisibility(visible);  },changeVisibility
255,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic mul {}"", VERSION);    return source.accumulateMul(nums);  }",mul
2551,"  public static void <extra_id_0>(String[] args) {    var factory = WeaponFactory.factory(builder -> {      builder.add(WeaponType.SWORD, Sword::new);      builder.add(WeaponType.AXE, Axe::new);      builder.add(WeaponType.SPEAR, Spear::new);      builder.add(WeaponType.BOW, Bow::new);    });    var list = new ArrayList<Weapon>();    list.add(factory.create(WeaponType.AXE));    list.add(factory.create(WeaponType.SPEAR));    list.add(factory.create(WeaponType.SWORD));    list.add(factory.create(WeaponType.BOW));    list.forEach(weapon -> LOGGER.info(""{}"", weapon.toString()));  }",main
148,  private int <extra_id_0>() {    return 999;  },getNonExistingRoomId
3280,  void <extra_id_0>() {    //given    final var dataBus = DataBus.getInstance();    dataBus.subscribe(member);    //when    dataBus.publish(event);    //then    then(member).should().accept(event);  }  @Test,publishedEventIsReceivedBySubscribedMember
1365,"  void <extra_id_0>() {    TREE_ROOT.walk();    assertTrue(appender.logContains(""root""));    assertTrue(appender.logContains(""level1_a""));    assertTrue(appender.logContains(""level2_a""));    assertTrue(appender.logContains(""level3_a""));    assertTrue(appender.logContains(""level3_b""));    assertTrue(appender.logContains(""level2_b""));    assertTrue(appender.logContains(""level1_b""));    assertEquals(7, appender.getLogSize());  }  @Test",testWalk
829,"  void <extra_id_0>() {    final var e = new CustomerNotFoundException(""customer not found"");    final var retry = new RetryExponentialBackoff<String>(        () -> {          throw e;        },        2,        0,        ex -> CustomerNotFoundException.class.isAssignableFrom(ex.getClass())    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.attempts(), is(2));  }",ignore
3703,"  public void <extra_id_0>(final int newCapacity) {    if (capacity > newCapacity) {      // Behavior can be modified to accommodate      // for decrease in cache size. For now, we'll      clear();      // just clear the cache.    } else {      this.capacity = newCapacity;    }  }",setCapacity
3754,"  public void <extra_id_0>() {    LOGGER.info(""The hammer is wielded."");    enchantment.onActivate();  }  @Override",wield
3729,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1778,"  void <extra_id_0>() throws InterruptedException {    var base = new Thread(new Feind(orc, sword));    Assertions.assertNull(sword.getLocker());    base.start();    base.join();    Assertions.assertEquals(orc, sword.getLocker());    var extend = new Thread(new Feind(elf, sword));    extend.start();    extend.join();    Assertions.assertTrue(sword.isLocked());    sword.unlock(elf.isAlive() ? elf : orc);    Assertions.assertNull(sword.getLocker());  }",testBaseCase
2135,    List<CakeToppingInfo> <extra_id_0>();    /**     * Add new cake layer.     */,getAvailableToppings
608,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    assertEquals(Fatigue.ALERT, model.getFatigue());    var messageFormat = ""Giant giant1, The giant looks healthy, %s and saturated."";    for (final var fatigue : Fatigue.values()) {      model.setFatigue(fatigue);      assertEquals(fatigue, model.getFatigue());      assertEquals(String.format(messageFormat, fatigue), model.toString());    }  }  /**   * Verify if the nourishment level is set properly though the constructor and setter   */  @Test",testSetFatigue
3724,  void <extra_id_0>() {    // VirtualDB (instead of MongoDB) was used in running the JUnit tests    // to avoid Maven compilation errors. Set flag to true to run the    // tests with MongoDB (provided that MongoDB is installed and socket    // connection is open).    app = new App(false);  }  @Test,setUp
821,"  private static void <extra_id_0>() throws Exception {    final var retry = new Retry<>(        new FindCustomer(""123"", new CustomerNotFoundException(NOT_FOUND)),        3,  //3 attempts        100, //100 ms delay between attempts        e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass())    );    op = retry;    final var customerId = op.perform();    LOG.info(String.format(        ""However, retrying the operation while ignoring a recoverable error will eventually yield ""            + ""the result %s after a number of attempts %s"", customerId, retry.attempts()    ));  }",errorWithRetry
2097,"  void <extra_id_0>() {    final var cake = new Cake();    assertNull(cake.getId());    final var expectedId = 1234L;    cake.setId(expectedId);    assertEquals(expectedId, cake.getId());  }  @Test",testSetId
388,"  void <extra_id_0>() {    final var toString = new Mammoth().toString();    assertNotNull(toString);    assertEquals(""The mammoth"", toString);  }",testToString
3488,  public String <extra_id_0>() {    return title;  },toString
532,"  public E <extra_id_0>(Long id) {    Transaction tx = null;    E result;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();      CriteriaQuery<E> builderQuery = criteriaBuilder.createQuery(persistentClass);      Root<E> root = builderQuery.from(persistentClass);      builderQuery.select(root).where(criteriaBuilder.equal(root.get(""id""), id));      Query<E> query = session.createQuery(builderQuery);      result = query.uniqueResult();      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  }  @Override",find
431,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""janedoe"");    assertNotEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals6
3615,"  boolean <extra_id_0>();  /**   * Gets the value of completed async task.   *   * @return evaluated value or throws ExecutionException if execution has failed   * @throws ExecutionException    if execution has failed, containing the root cause   * @throws IllegalStateException if execution is not completed   */",isCompleted
3084,  public static void <extra_id_0>(String[] args) {    var simpleWizard = new SimpleWizard();    simpleWizard.smoke();    var advancedWizard = new AdvancedWizard(new SecondBreakfastTobacco());    advancedWizard.smoke();    var advancedSorceress = new AdvancedSorceress();    advancedSorceress.setTobacco(new SecondBreakfastTobacco());    advancedSorceress.smoke();    var injector = Guice.createInjector(new TobaccoModule());    var guiceWizard = injector.getInstance(GuiceWizard.class);    guiceWizard.smoke();  },main
2943,      public Create <extra_id_0>(Double cost) {        this.cost = cost;        return this;      }      @Override,setCost
404,    public void <extra_id_0>() {        System.setOut(originalOut);    }    @Test,restoreStreams
762,  void <extra_id_0>();,getDrink
1630,  void <extra_id_0>() {    assertDoesNotThrow(() -> Main.main(new String[] {}));  }  @Test,shouldExecuteApplicationWithoutException
2630,"  public String <extra_id_0>(final User user) {    if (isEnhanced()) {      return ""Welcome "" + user + "". You're using the enhanced welcome message."";    }    return ""Welcome to the application."";  }",getWelcomeMessage
3046,  private static void <extra_id_0>(DataSource dataSource) throws SQLException {    try (var connection = dataSource.getConnection();        var statement = connection.createStatement()) {      statement.execute(DELETE_SCHEMA_SQL);    }  },deleteSchema
1047,"  public <K> Result <extra_id_0>(K value) {    state.cleanUp();    LOGGER.info("" The new saga is about to start"");    var result = FINISHED;    K tempVal = value;    while (true) {      var next = state.current();      var ch = saga.get(next);      var srvOpt = sd.find(ch.name);      if (srvOpt.isEmpty()) {        state.directionToBack();        state.back();        continue;      }      var srv = srvOpt.get();      if (state.isForward()) {        var processRes = srv.process(tempVal);        if (processRes.isSuccess()) {          next = state.forward();          tempVal = (K) processRes.getValue();        } else {          state.directionToBack();        }      } else {        var rlRes = srv.rollback(tempVal);        if (rlRes.isSuccess()) {          next = state.back();          tempVal = (K) rlRes.getValue();        } else {          result = CRASHED;          next = state.back();        }      }      if (!saga.isPresent(next)) {        return state.isForward() ? FINISHED : result == CRASHED ? CRASHED : ROLLBACK;      }    }  }",execute
1958,"  public void <extra_id_0>(Integer id, User user) {    LOGGER.info(""update user at "" + id);    try (var session = factory.openSession()) {      var tx = session.beginTransaction();      user.setId(id);      session.update(user);      tx.commit();    } catch (HibernateException e) {      LOGGER.debug(""fail to update user"", e);    }  }  /**   * Delete user.   * @param id user id   */",updateUser
1043,"  private static Saga <extra_id_0>() {    return Saga        .create()        .chapter(""init an order"")        .chapter(""booking a Fly"")        .chapter(""booking a Hotel"")        .chapter(""withdrawing Money"");  }",newSaga
3580,"  public String <extra_id_0>() {    var httpClient = HttpClient.newHttpClient();    var httpGet = HttpRequest.newBuilder()        .GET()        .uri(URI.create(""http://localhost:50006/price""))        .build();    try {      LOGGER.info(""Sending request to fetch price info"");      var httpResponse = httpClient.send(httpGet, BodyHandlers.ofString());      logResponse(httpResponse);      return httpResponse.body();    } catch (IOException e) {      LOGGER.error(""Failure occurred while getting price info"", e);    } catch (InterruptedException e) {      LOGGER.error(""Failure occurred while getting price info"", e);      Thread.currentThread().interrupt();    }    return null;  }",getPrice
781,"  void <extra_id_0>() {    final var goodMoodRoyalty = mock(Royalty.class);    when(goodMoodRoyalty.getMood()).thenReturn(true);    final var badMoodRoyalty = mock(Royalty.class);    when(badMoodRoyalty.getMood()).thenReturn(true);    final var goodCompany = List.of(goodMoodRoyalty, goodMoodRoyalty, goodMoodRoyalty);    final var badCompany = List.of(goodMoodRoyalty, goodMoodRoyalty, badMoodRoyalty);    assertTrue(new Servant(""test"").checkIfYouWillBeHanged(goodCompany));    assertTrue(new Servant(""test"").checkIfYouWillBeHanged(badCompany));  }",testCheckIfYouWillBeHanged
2808,  public void <extra_id_0>(GameObject gameObject) {    gameObject.collisionResolve(this);  },collision
2665,  private void <extra_id_0>(BigDecimal money) {    this.money = this.money.subtract(money);  },withdrawMoney
169,"  public static List<Room> <extra_id_0>() {    final var room1 = new Room(1, ""Single"", 50, false);    final var room2 = new Room(2, ""Double"", 80, false);    final var room3 = new Room(3, ""Queen"", 120, false);    final var room4 = new Room(4, ""King"", 150, false);    final var room5 = new Room(5, ""Single"", 50, false);    final var room6 = new Room(6, ""Double"", 80, false);    return List.of(room1, room2, room3, room4, room5, room6);  }  /**   * An arbitrary number which does not correspond to an active Room id.   *   * @return an int of a room id which doesn't exist   */",generateSampleRooms
2394,"  static Stream<Arguments> <extra_id_0>(final IntBinaryOperator resultCalc) {    final var testData = new ArrayList<Arguments>();    for (var i = -10; i < 10; i++) {      for (var j = -10; j < 10; j++) {        testData.add(Arguments.of(            new NumberExpression(i),            new NumberExpression(j),            resultCalc.applyAsInt(i, j)        ));      }    }    return testData.stream();  }  /**   * The expected {@link E#toString()} response   */",prepareParameters
1382,  public Node <extra_id_0>() {    return null;  }  @Override,getLeft
2780,  public final void <extra_id_0>() {    this.eventListener = null;  },removeListener
3182,      void <extra_id_0>() throws Exception {        assertFalse(dao.getById(getNonExistingCustomerId()).isPresent());      }    }    /**     * Represents a scenario where DAO operations are being performed on an already existing     * customer.     */    @Nested,retrieveShouldReturnNoCustomer
3194,"  private void <extra_id_0>(int count) throws Exception {    try (var allCustomers = dao.getAll()) {      assertEquals(count, allCustomers.count());    }  }  /**   * An arbitrary number which does not correspond to an active Customer id.   *   * @return an int of a customer id which doesn't exist   */",assertCustomerCountIs
3048,"  public Optional<Product> <extra_id_0>(String name) throws SQLException {    var sql = ""select * from PRODUCTS where name = ?;"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, name);      ResultSet rs = preparedStatement.executeQuery();      if (rs.next()) {        return Optional.of(            Product.builder()                .name(rs.getString(""name""))                .price(Money.of(USD, rs.getBigDecimal(""price"")))                .expirationDate(rs.getDate(""expiration_date"").toLocalDate())                .productDao(this)                .build());      } else {        return Optional.empty();      }    }  }  @Override",findByName
43,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    }  }},getLastMessage
1214,"  public void <extra_id_0>() {    LOGGER.info(""Load data from PresentationModel"");    txtArtist.setText(model.getArtist());    txtTitle.setText(model.getTitle());    chkClassical.setSelected(model.getIsClassical());    txtComposer.setEditable(model.getIsClassical());    txtComposer.setText(model.getComposer());  }  /**   * initialize the GUI.   */",loadFromMod
3219,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3548,"  void <extra_id_0>() {    var delayedService = new DelayedRemoteService(System.nanoTime(), STARTUP_DELAY);    //Set the circuit Breaker parameters    delayedServiceCircuitBreaker = new DefaultCircuitBreaker(delayedService, 3000,        FAILURE_THRESHOLD,        RETRY_PERIOD * 1000 * 1000 * 1000);    var quickService = new QuickRemoteService();    //Set the circuit Breaker parameters    quickServiceCircuitBreaker = new DefaultCircuitBreaker(quickService, 3000, FAILURE_THRESHOLD,        RETRY_PERIOD * 1000 * 1000 * 1000);    monitoringService = new MonitoringService(delayedServiceCircuitBreaker,        quickServiceCircuitBreaker);  }  @Test",setupCircuitBreakers
1857,  void <extra_id_0>() throws InterruptedException {    var taskHandler = new TaskHandler();    var handle = new Task(100);    taskHandler.handleTask(handle);    assertTrue(handle.isFinished());  },testHandleTask
3442,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            for (Exception e : exceptionList) {                Commander c = buildCommanderObjectWithDB(true, true, e);                var order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithDB(true, false, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithDB(false, false, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithDB(false, true, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }            }        }    }    @Test",testPlaceOrderWithDatabaseAndExceptions
309,  void <extra_id_0>() {    appender.stop();  }  /**   * The tested stealing method   */,tearDown
1854,  void <extra_id_0>() {    var workCenter = new WorkCenter();    workCenter.promoteLeader();    assertNull(workCenter.getLeader());  }  @Test,testNullLeader
2959,      public Double <extra_id_0>() {        return cost;      },getCost
131,    void <extra_id_0>() throws Exception {      var dataSource = new JdbcDataSource();      dataSource.setURL(DB_URL);      dao = new HotelDaoImpl(dataSource);      var result = dao.add(existingRoom);      Assertions.assertTrue(result);    }    /**     * Represents the scenario when DAO operations are being performed on a non existing room.     */    @Nested,setUp
1501,  void <extra_id_0>() {    var albumListPage = albumPage.cancelChanges();    albumListPage.navigateToPage();    assertTrue(albumListPage.isAt());  },testCancelChanges
1375,  String <extra_id_0>();,getName
898,  public Customer <extra_id_0>(String id) {    return customerMap.get(id);  },getCustomer
2384,"  void <extra_id_0>(){    // dummy persons.    Person person1 = new Person(1,""Harry"",989950022);    Person person2 = new Person(2,""Kane"",989920011);    Assertions.assertNotEquals(person1,person2,""Incorrect equality condition"");    // person with duplicate nationalID.    Person person3 = new Person(2,""John"",789012211);    // If nationalID is equal then persons are equal(even if name or phoneNum are different).    // This situation will never arise in this implementation. Only for testing.    Assertions.assertEquals(person2,person3,""Incorrect inequality condition"");  }",testEquality
743,"  static void <extra_id_0>(int numOfMovements, Map<Integer, Bubble> bubbles) {    //all bubbles have to be checked for collision for all bubbles    var bubblesToCheck = bubbles.values();    //will run numOfMovement times or till all bubbles have popped    while (numOfMovements > 0 && !bubbles.isEmpty()) {      bubbles.forEach((i, bubble) -> {        // bubble moves, new position gets updated        // and collisions are checked with all bubbles in bubblesToCheck        bubble.move();        bubbles.replace(i, bubble);        bubble.handleCollision(bubblesToCheck, bubbles);      });      numOfMovements--;    }    //bubbles not popped    bubbles.keySet().forEach(key -> LOGGER.info(""Bubble {} not popped"", key));  }",noSpatialPartition
528,  E <extra_id_0>(E entity);,merge
2435,  public MenuItem <extra_id_0>() {    return menuItem;  },getMenuItem
2743,  public String <extra_id_0>() {    return description;  },toString
37,  void <extra_id_0>() {    appender.stop();  }  /**   * The tested visitor instance.   */,tearDown
1328,"  public static void <extra_id_0>(String[] args) {    /* set up */    var charProto = new Character();    charProto.set(Stats.STRENGTH, 10);    charProto.set(Stats.AGILITY, 10);    charProto.set(Stats.ARMOR, 10);    charProto.set(Stats.ATTACK_POWER, 10);    var mageProto = new Character(Type.MAGE, charProto);    mageProto.set(Stats.INTELLECT, 15);    mageProto.set(Stats.SPIRIT, 10);    var warProto = new Character(Type.WARRIOR, charProto);    warProto.set(Stats.RAGE, 15);    warProto.set(Stats.ARMOR, 15); // boost default armor for warrior    var rogueProto = new Character(Type.ROGUE, charProto);    rogueProto.set(Stats.ENERGY, 15);    rogueProto.set(Stats.AGILITY, 15); // boost default agility for rogue    /* usage */    var mag = new Character(""Player_1"", mageProto);    mag.set(Stats.ARMOR, 8);    LOGGER.info(mag.toString());    var warrior = new Character(""Player_2"", warProto);    LOGGER.info(warrior.toString());    var rogue = new Character(""Player_3"", rogueProto);    LOGGER.info(rogue.toString());    var rogueDouble = new Character(""Player_4"", rogue);    rogueDouble.set(Stats.ATTACK_POWER, 12);    LOGGER.info(rogueDouble.toString());  }",main
113,"  void <extra_id_0>() {    var matrix = new Cell[2][2];    var c1 = new Candy(""green jelly"", ""jelly"", Type.CRUSHABLE_CANDY, 5);    var c2 = new Candy(""purple jelly"", ""jelly"", Type.CRUSHABLE_CANDY, 5);    var c3 = new Candy(""green apple"", ""apple"", Type.REWARD_FRUIT, 10);    matrix[0][0] = new Cell(c1, 0, 0);    matrix[0][1] = new Cell(c2, 1, 0);    matrix[1][0] = new Cell(c3, 0, 1);    matrix[1][1] = new Cell(c2, 1, 1);    var p = new CellPool(4);    var cg = new CandyGame(2, p);    cg.cells = matrix;    var fruitInLastRow = cg.continueRound();    matrix[1][0].crush(p, matrix);    matrix[0][0] = new Cell(c3, 0, 0);    var matchingCandy = cg.continueRound();    matrix[0][1].crush(p, matrix);    matrix[0][1] = new Cell(c3, 1, 0);    var noneLeft = cg.continueRound();    assertTrue(fruitInLastRow && matchingCandy && !noneLeft);  }",continueRoundTest
3738,"  public void <extra_id_0>() {    LOGGER.info(""The item's glow fades."");  }",onDeactivate
3277,"  void <extra_id_0>() {    var bookCount = queryService.getAuthorBooksCount(""username1"");    assertEquals(new BigInteger(""2""), bookCount);  }  @Test",testGetAuthorBooksCount
91,  void <extra_id_0>(T entity);  /**   * Any register delete operation occurring on UnitOfWork is only going to be performed on commit.   */,registerModified
1743,  void <extra_id_0>(final Double value) {    viewModel.handleAction(new SetVariableCalculatorAction(value));  },setVariable
1347,"  public String <extra_id_0>(SignupModel form) {    LOGGER.info(""Redirect to user page with "" + ""name "" + form.getName() + "" email "" + form.getEmail());    return ""redirect:/user"";  }",redirect
599,"  void <extra_id_0>() {    final var bookname = ""bookname"";    final var spellbook = mock(Spellbook.class);    final var wizards = Set.of(        mock(Wizard.class),        mock(Wizard.class),        mock(Wizard.class)    );    when(spellbook.getWizards()).thenReturn(wizards);    final var spellbookDao = mock(SpellbookDao.class);    when(spellbookDao.findByName(bookname)).thenReturn(spellbook);    final var wizardDao = mock(WizardDao.class);    final var spellDao = mock(SpellDao.class);    final var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    verifyNoInteractions(wizardDao, spellbookDao, spellDao, spellbook);    final var result = service.findWizardsWithSpellbook(bookname);    verify(spellbookDao).findByName(bookname);    verify(spellbook).getWizards();    assertNotNull(result);    assertEquals(3, result.size());    verifyNoMoreInteractions(wizardDao, spellbookDao, spellDao);  }  @Test",testFindWizardsWithSpellbook
882,"    public void <extra_id_0>() {      try (var socket = new Socket(InetAddress.getLocalHost(), serverPort)) {        var outputStream = socket.getOutputStream();        var writer = new PrintWriter(outputStream);        sendLogRequests(writer, socket.getInputStream());      } catch (IOException e) {        LOGGER.error(""error sending requests"", e);        throw new RuntimeException(e);      }    }",run
1904,"  void <extra_id_0>() {    var content = ""test"";    var message = new Message(MessageType.HEARTBEAT, content);    assertEquals(content, message.getContent());  }",testGetContent
2584,  public double <extra_id_0>() {    return probability;  }  @Override,probability
724,"  public void <extra_id_0>() {    LOGGER.info(String.format(""Invalid user: %s"", userName));  }",show
116,"  void <extra_id_0>() {    long result = TrampolineApp.loop(10, 1).result();    assertEquals(3_628_800, result);  }",testTrampolineWithFactorialFunction
2386,"  void <extra_id_0>(){    // personFinderInstance    PersonFinder personFinder = new PersonFinder();    // init database for our personFinder    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    // Dummy persons    Person person1 = new Person(1, ""John"", 27304159);    Person person2 = new Person(2, ""Thomas"", 42273631);    Person person3 = new Person(3, ""Arthur"", 27489171);    Person person4 = new Person(4, ""Finn"", 20499078);    Person person5 = new Person(5, ""Michael"", 40599078);    // Add data to the database.    db.insert(person1);    db.insert(person2);    db.insert(person3);    db.insert(person4);    db.insert(person5);    personFinder.setDb(db);    // Assure key is not in the ID map.    Assertions.assertFalse(personFinder.getIdentityMap().getPersonMap().containsKey(3));    // Assure key is in the database.    Assertions.assertEquals(person3,personFinder.getPerson(3),""Finder returns incorrect record."");    // Assure that the record for this key is cached in the Map now.    Assertions.assertTrue(personFinder.getIdentityMap().getPersonMap().containsKey(3));    // Find the record again. This time it will be found in the map.    Assertions.assertEquals(person3,personFinder.getPerson(3),""Finder returns incorrect record."");  }  @Test",personFoundInIdMap
2622,  public void <extra_id_0>() {    new CatapultView().display();  },process
51,  void <extra_id_0>(Soldier soldier);,visit
3549,"  void <extra_id_0>() {    //Calling delayed service, which will be unhealthy till 4 seconds    assertEquals(""Delayed service is down"", monitoringService.delayedServiceResponse());    //As failure threshold is ""1"", the circuit breaker is changed to OPEN    assertEquals(""OPEN"", delayedServiceCircuitBreaker.getState());    //As circuit state is OPEN, we expect a quick fallback response from circuit breaker.    assertEquals(""Delayed service is down"", monitoringService.delayedServiceResponse());    //Meanwhile, the quick service is responding and the circuit state is CLOSED    assertEquals(""Quick Service is working"", monitoringService.quickServiceResponse());    assertEquals(""CLOSED"", quickServiceCircuitBreaker.getState());  }  @Test",testFailure_OpenStateTransition
3788,"    public static void <extra_id_0>(String args[]) {        System.out.println(""- Downloader started"");        File baseDirectory = new File(args[0]);        System.out.println(""- Using base directory: "" + baseDirectory.getAbsolutePath());        // If the maven-wrapper.properties exists, read it and check if it contains a custom        // wrapperUrl parameter.        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);        String url = DEFAULT_DOWNLOAD_URL;        if(mavenWrapperPropertyFile.exists()) {            FileInputStream mavenWrapperPropertyFileInputStream = null;            try {                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);                Properties mavenWrapperProperties = new Properties();                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);            } catch (IOException e) {                System.out.println(""- ERROR loading '"" + MAVEN_WRAPPER_PROPERTIES_PATH + ""'"");            } finally {                try {                    if(mavenWrapperPropertyFileInputStream != null) {                        mavenWrapperPropertyFileInputStream.close();                    }                } catch (IOException e) {                    // Ignore ...                }            }        }        System.out.println(""- Downloading from: "" + url);        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);        if(!outputFile.getParentFile().exists()) {            if(!outputFile.getParentFile().mkdirs()) {                System.out.println(                        ""- ERROR creating output directory '"" + outputFile.getParentFile().getAbsolutePath() + ""'"");            }        }        System.out.println(""- Downloading to: "" + outputFile.getAbsolutePath());        try {            downloadFileFromURL(url, outputFile);            System.out.println(""Done"");            System.exit(0);        } catch (Throwable e) {            System.out.println(""- Error downloading"");            e.printStackTrace();            System.exit(1);        }    }",main
3354,  void <extra_id_0>(Order order) throws Exception {    sendShippingRequest(order);  },placeOrder
2942,      public Double <extra_id_0>() {        return cost;      },getCost
1900,      public Heavy <extra_id_0>() {        return heavyInstance;      }    }    if (!(heavy instanceof HeavyFactory)) {      heavy = new HeavyFactory();    }    return heavy.get();  }},get
1311,"  void <extra_id_0>() {    final var prototype = new Character();    prototype.set(Stats.ARMOR, 1);    prototype.set(Stats.INTELLECT, 2);    assertNull(prototype.name());    final var stupid = new Character(Type.ROGUE, prototype);    stupid.remove(Stats.INTELLECT);    assertNull(stupid.name());    final var weak = new Character(""weak"", prototype);    weak.remove(Stats.ARMOR);    assertEquals(""weak"", weak.name());  }  @Test",testName
2826,  public abstract void <extra_id_0>(FlamingAsteroid asteroid);,collisionResolve
925,    public void <extra_id_0>() {      synchronized (readerMutex) {        currentReaderCount++;        if (currentReaderCount == 1) {          acquireForReaders();        }      }    }    /**     * Acquire the globalMutex lock on behalf of current and future concurrent readers. Make sure no     * writers currently owns the lock.     */,lock
2972,"  void <extra_id_0>() {    var customers = List.of(new CustomerDto(""1"", ""Melody"", ""Yates""));    var customerResource = new CustomerResource(customers);    var allCustomers = customerResource.getAllCustomers();    assertEquals(1, allCustomers.size());    assertEquals(""1"", allCustomers.get(0).getId());    assertEquals(""Melody"", allCustomers.get(0).getFirstName());    assertEquals(""Yates"", allCustomers.get(0).getLastName());  }  @Test",shouldGetAllCustomers
1211,"  void <extra_id_0>(){    Album album = new Album(""a"", ""b"", false, """");    album.setClassical(true);    album.setComposer(""w"");    assertEquals(""w"", album.getComposer());  }",testSetComposer
2184,  private int <extra_id_0>() {    var items = chest.getItems();    var tempIdx = idx;    while (true) {      tempIdx++;      if (tempIdx >= items.size()) {        tempIdx = -1;        break;      }      if (type.equals(ItemType.ANY) || items.get(tempIdx).getType().equals(type)) {        break;      }    }    return tempIdx;  },findNextIdx
1535,  void <extra_id_0>();,makeHappy
1081,  public void <extra_id_0>(ChapterResult result) {    chapters.get(pos).setResult(result);  },setCurrentStatus
243,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Source module {}"", VERSION);    return Arrays.stream(nums).reduce(0, Integer::sum);  }  /**   * Check if all number is not zero.   * New feature.   */",accumulateSum
3346,  public static void <extra_id_0>(String[] args) throws Exception {    var aefc = new AppEmployeeDbFailCases();    //aefc.employeeDatabaseUnavailableCase();    aefc.employeeDbSuccessCase();  },main
3195,  private int <extra_id_0>() {    return 999;  },getNonExistingCustomerId
1579,  public static void <extra_id_0>() throws FileNotFoundException {    /* Create new singleton objects and prepare their modules */    fileLoggerModule = FileLoggerModule.getSingleton().prepare();    consoleLoggerModule = ConsoleLoggerModule.getSingleton().prepare();  }  /**   * Following method performs the finalization.   */,prepare
866,"  private void <extra_id_0>() throws IOException {    // honor interrupt request    while (!Thread.interrupted()) {      // honor any pending commands first      processPendingCommands();      /*       * Synchronous event de-multiplexing happens here, this is blocking call which returns when it       * is possible to initiate non-blocking operation on any of the registered channels.       */      selector.select();      /*       * Represents the events that have occurred on registered handles.       */      var keys = selector.selectedKeys();      var iterator = keys.iterator();      while (iterator.hasNext()) {        var key = iterator.next();        if (!key.isValid()) {          iterator.remove();          continue;        }        processKey(key);      }      keys.clear();    }  }",eventLoop
504,  public int <extra_id_0>() {    return key;  },getKey
1702,  public boolean <extra_id_0>() {    return this.isVisible();  }  @Override,isOpened
2070,"  public Health <extra_id_0>() {    LOGGER.info(""Performing health check"");    CompletableFuture<Health> healthFuture =        healthChecker.performCheck(this::check, timeoutInSeconds);    try {      return healthFuture.get(timeoutInSeconds, TimeUnit.SECONDS);    } catch (InterruptedException e) {      Thread.currentThread().interrupt();      LOGGER.error(""Health check interrupted"", e);      throw new HealthCheckInterruptedException(e);    } catch (Exception e) {      LOGGER.error(""Health check failed"", e);      return Health.down(e).build();    }  }  /**   * Checks the health of the database by querying for a simple constant value expected from the   * database.   *   * @return Health indicating UP if the database returns the constant correctly, otherwise DOWN.   */",health
1615,"  public static void <extra_id_0>(String[] args) {    useOfLoggedMute();    useOfMute();  }  /*   * Typically used when the API declares some exception but cannot do so. Usually a   * signature mistake.In this example out is not supposed to throw exception as it is a   * ByteArrayOutputStream. So we utilize mute, which will throw AssertionError if unexpected   * exception occurs.   */",main
134,"      void <extra_id_0>() throws Exception {        final var nonExistingId = getNonExistingRoomId();        final var newRoomType = ""Double"";        final var newPrice = 80;        final var room = new Room(nonExistingId, newRoomType, newPrice, false);        var result = dao.update(room);        Assertions.assertFalse(result);        assertFalse(dao.getById(nonExistingId).isPresent());      }      @Test",updationShouldBeFailureAndNotAffectExistingRooms
3496,  public int <extra_id_0>() {    return 3;  }  @Override,getPriority
2579,  public String <extra_id_0>() {    return systemId;  }  /**   * {@inheritDoc}   */  @Override,systemId
3125,"  void <extra_id_0>() {    assertAll(        () -> assertNull(layerA.getContext().getAccountService()),        () -> assertNull(layerA.getContext().getSearchService()),        () -> assertNull(layerA.getContext().getSessionService())        );    layerA.addAccountInfo(SERVICE);    assertAll(        () -> assertEquals(SERVICE, layerA.getContext().getAccountService()),        () -> assertNull(layerA.getContext().getSearchService()),        () -> assertNull(layerA.getContext().getSessionService())    );    var layerB = new LayerB(layerA);    layerB.addSessionInfo(SERVICE);    assertAll(        () -> assertEquals(SERVICE, layerB.getContext().getAccountService()),        () -> assertEquals(SERVICE, layerB.getContext().getSessionService()),        () -> assertNull(layerB.getContext().getSearchService())    );    var layerC = new LayerC(layerB);    layerC.addSearchInfo(SERVICE);    assertAll(        () -> assertEquals(SERVICE, layerC.getContext().getAccountService()),        () -> assertEquals(SERVICE, layerC.getContext().getSearchService()),        () -> assertEquals(SERVICE, layerC.getContext().getSessionService())    );  }",testLayerContexts
3570,"  public String <extra_id_0>() {    LOGGER.info(""Successfully found image path"");    return ""/product-image.png"";  }",getImagePath
3514,  boolean <extra_id_0>(Request req);,canHandleRequest
1956,"  public List<User> <extra_id_0>() {    LOGGER.info(""list all users."");    List<User> users = new ArrayList<>();    try (var session = factory.openSession()) {      var tx = session.beginTransaction();      List<User> userIter = session.createQuery(""FROM User"").list();      for (var iterator = userIter.iterator(); iterator.hasNext();) {        users.add(iterator.next());      }      tx.commit();    } catch (HibernateException e) {      LOGGER.debug(""fail to get users"", e);    }    return users;  }  /**   * Add a user.   * @param user user entity   * @return user id   */",listUser
2671,"  public void <extra_id_0>(MoneyTransferEvent moneyTransferEvent) {    handleDeposit(moneyTransferEvent.getMoney(), moneyTransferEvent.isRealTime());  }",handleTransferToEvent
2602,  void <extra_id_0>() {    appender.stop();  },tearDown
1370,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
3806,  public static void <extra_id_0>(String[] args) {    var app = new App();    app.run();  }  @Override,main
3803,"  void <extra_id_0>() {    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);    final var kingdom = app.getKingdom();    final var king = kingdom.getKing();    final var castle = kingdom.getCastle();    final var army = kingdom.getArmy();    assertTrue(king instanceof ElfKing);    assertEquals(ElfKing.DESCRIPTION, king.getDescription());    assertTrue(castle instanceof ElfCastle);    assertEquals(ElfCastle.DESCRIPTION, castle.getDescription());    assertTrue(army instanceof ElfArmy);    assertEquals(ElfArmy.DESCRIPTION, army.getDescription());  }  @Test",verifyElfKingdomCreation
2369,"  public Person <extra_id_0>(int key) {    // Try to find person in the identity map    Person person = this.identityMap.getPerson(key);    if (person != null) {      LOGGER.info(""Person found in the Map"");      return person;    } else {      // Try to find person in the database      person = this.db.find(key);      if (person != null) {        this.identityMap.addPerson(person);        LOGGER.info(""Person found in DB."");        return person;      }      LOGGER.info(""Person with this ID does not exist."");      return null;    }  }",getPerson
984,"  void <extra_id_0>() {    var core = new CustomerCore();    core.addRole(Role.Borrower);    assertEquals(""Customer{roles=[Borrower]}"", core.toString());    core = new CustomerCore();    core.addRole(Role.Investor);    assertEquals(""Customer{roles=[Investor]}"", core.toString());    core = new CustomerCore();    assertEquals(""Customer{roles=[]}"", core.toString());  }",toStringTest
2024,"  void <extra_id_0>() {    // Make the HTTP request to the health endpoint    Response response = given(requestSpec).get(getEndpointBasePath()).andReturn();    // Log the response details    logResponseDetails(response);    // Check if the status is 503 (SERVICE_UNAVAILABLE)    if (response.getStatusCode() == HttpStatus.SERVICE_UNAVAILABLE.value()) {      LOGGER.warn(          ""Custom health indicator returned 503 Service Unavailable. This may be due to CI pipeline ""              + ""configuration. Please check the CI pipeline logs."");      // If status is 503, the test passes without further checks      response          .then()          .assertThat()          .statusCode(HttpStatus.SERVICE_UNAVAILABLE.value())          .log()          .all(); // Log the entire response for visibility      return;    }    // If status is 200, proceed with additional checks    response        .then()        .assertThat()        .statusCode(HttpStatus.OK.value()) // Check that the status is UP        .body(""components.custom.status"", equalTo(""UP"")) // Verify the custom component status        .body(""components.custom.details.database"", equalTo(""reachable"")); // Verify custom details    // Check for ""DOWN"" status and high CPU load    if (""DOWN"".equals(response.path(""status""))) {      LOGGER.error(""Custom health indicator response: "" + response.getBody().asString());      LOGGER.error(""Custom health indicator status: "" + response.path(""status""));      LOGGER.error(          ""High CPU load detected: "" + response.path(""components.cpu.details.processCpuLoad""));    }  }",customHealthIndicatorShouldReturnUpStatusAndDetails
3541,"  void <extra_id_0>() {    var delayedService = new DelayedRemoteService(System.nanoTime()-2*1000*1000*1000, 2);    var delayedServiceCircuitBreaker = new DefaultCircuitBreaker(delayedService, 3000,        1,        2 * 1000 * 1000 * 1000);    var monitoringService = new MonitoringService(delayedServiceCircuitBreaker,null);    //Set time in past to make the server work    var response = monitoringService.delayedServiceResponse();    assertEquals(response, ""Delayed service is working"");  }  @Test",testDelayedRemoteResponseSuccess
2811,"  public void <extra_id_0>(FlamingAsteroid asteroid) {    LOGGER.info(AppConstants.HITS + "" {} is damaged! {} is set on fire!"", asteroid.getClass()            .getSimpleName(),        this.getClass().getSimpleName(), this.getClass().getSimpleName(), this.getClass()            .getSimpleName());    setDamaged(true);    setOnFire(true);  }  @Override",collisionResolve
2895,"  public void <extra_id_0>() {    LOGGER.info(""The troll tries to grab you!"");  }  @Override",attack
1132,"  public void <extra_id_0>() {    for (var i = 0; i <= size / 2; i++) {      LOGGER.info("" PARENT : "" + queue[i] + "" LEFT CHILD : ""          + left(i) + "" RIGHT CHILD :"" + right(i));    }  }",print
3648,"  public void <extra_id_0>(int wizard, int amount) {    wizards[wizard].setAgility(amount);  }",setAgility
3538,  void <extra_id_0>();,call
45,"  abstract void <extra_id_0>(final U unit, final UnitVisitor mockedVisitor);",verifyVisit
2240,"  private static String <extra_id_0>(Scanner scanner) {    LOGGER.info(""> "");    return scanner.next();  }",readString
3357,"  private void <extra_id_0>(QueueTask qt) {    if (System.currentTimeMillis() - qt.order.createdTime >= this.queueTime) {      // since payment time is lesser than queuetime it would have already failed..      // additional check not needed      LOG.trace(ORDER_ID + "": Queue time for order over, failed.."", qt.order.id);      return;    } else if (qt.taskType.equals(TaskType.PAYMENT) && !qt.order.paid.equals(PaymentStatus.TRYING)        || qt.taskType.equals(TaskType.MESSAGING) && (qt.messageType == 1        && !qt.order.messageSent.equals(MessageSent.NONE_SENT)        || qt.order.messageSent.equals(MessageSent.PAYMENT_FAIL)        || qt.order.messageSent.equals(MessageSent.PAYMENT_SUCCESSFUL))        || qt.taskType.equals(TaskType.EMPLOYEE_DB) && qt.order.addedToEmployeeHandle) {      LOG.trace(ORDER_ID + "": Not queueing task since task already done.."", qt.order.id);      return;    }    var list = queue.exceptionsList;    Thread t = new Thread(() -> {      Retry.Operation op = (list1) -> {        if (!list1.isEmpty()) {          LOG.warn(ORDER_ID + "": Error in connecting to queue db, trying again.."", qt.order.id);          throw list1.remove(0);        }        queue.add(qt);        queueItems++;        LOG.info(ORDER_ID + "": {}"" + "" task enqueued.."", qt.order.id, qt.getType());        tryDoingTasksInQueue();      };      Retry.HandleErrorIssue<QueueTask> handleError = (qt1, err) -> {        if (qt1.taskType.equals(TaskType.PAYMENT)) {          qt1.order.paid = PaymentStatus.NOT_DONE;          sendPaymentFailureMessage(qt1.order);          LOG.error(ORDER_ID + "": Unable to enqueue payment task,""              + "" payment failed.."", qt1.order.id);        }        LOG.error(ORDER_ID + "": Unable to enqueue task of type {}""                + "", trying to add to employee handle.."", qt1.order.id, qt1.getType());        employeeHandleIssue(qt1.order);      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, qt);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",updateQueue
2517,"  void <extra_id_0>() {    var blacksmith = new OrcBlacksmith();    var weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);    verifyWeapon(weapon, WeaponType.SPEAR, OrcWeapon.class);  }  /**   * Testing {@link OrcBlacksmith} to produce an AXE asserting that the Weapon is an instance of   * {@link OrcWeapon}.   */  @Test",testOrcBlacksmithWithSpear
3700,  public UserAccount <extra_id_0>() {    return end.userAccount;  }  /**   * Clear cache.   */,getLruData
918,"  public void <extra_id_0>() {    readLock.lock();    try {      read();    } catch (InterruptedException e) {      LOGGER.info(""InterruptedException when reading"", e);      Thread.currentThread().interrupt();    } finally {      readLock.unlock();    }  }  /**   * Simulate the read operation.   */",run
2916,"  public void <extra_id_0>() {    LOGGER.info(""Update Game Component"");    // Process AI.    aiComponentManager.update();    // update physics.    physicsComponentManager.update();    // Draw to screen.    renderComponentManager.render();  }",update
2463,  protected FluentIterable<Integer> <extra_id_0>(Iterable<Integer> integers) {    return SimpleFluentIterable.fromCopyOf(integers);  },createFluentIterable
3000,  void <extra_id_0>() {    appender.stop();  },tearDown
782,  void <extra_id_0>() {    final var king = new King();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testHungrySoberUncomplimentedKing
2698,"  public void <extra_id_0>() {    makeActions(workers, DwarvenMineWorker.Action.WAKE_UP, DwarvenMineWorker.Action.GO_TO_MINE);  }",startNewDay
1724,"  void <extra_id_0>() {    stub.setFileName(""RandomName.txt"");    presenter.start();    presenter.fileNameChanged();    presenter.confirmed();    assertFalse(loader.isLoaded());    assertEquals(1, stub.getMessagesSent());  }  /**   * Tests if we can open the file, when it exists.   */  @Test",fileConfirmationWhenFileDoesNotExist
2218,  public float <extra_id_0>() {    return position;  },getPosition
2824,  public void <extra_id_0>(boolean damaged) {    this.damaged = damaged;  },setDamaged
826,"  void <extra_id_0>() {    final var e = new CustomerNotFoundException(""customer not found"");    final var retry = new Retry<String>(        () -> {          throw e;        },        2,        0,        ex -> CustomerNotFoundException.class.isAssignableFrom(ex.getClass())    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.attempts(), is(2));  }",ignore
1620,"  private static Resource <extra_id_0>() {    return new Resource() {      @Override      public void close() throws IOException {        throw new IOException(""Error in closing resource: "" + this);      }    };  }",acquireResource
3722,  public UserAccount <extra_id_0>(final UserAccount userAccount) {    return writeToDb(userAccount);  }  /**   * Update.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override,updateDb
3726,  void <extra_id_0>() {    assertNotNull(app);    app.useReadThroughAndWriteAroundStrategy();  }  @Test,testReadThroughAndWriteAroundStrategy
1027,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""-4"");      return ChapterResult.success(value);    }  }}",rollback
351,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Poor warrior"")        .fighterClass(""none"")        .noWeapon()        .build();    assertEquals(""Poor warrior"", character.getName());    assertEquals(""none"", character.getFighterClass());    assertNull(character.getWeapon());    assertNull(character.getAbilities());    assertNotNull(character.toString());  }  /**   * Build a new warrior {@link Character} without any abilities, but with a weapon and verify if it   * has the expected attributes   */  @Test",testBuildPoorWarrior
186,        public boolean <extra_id_0>(Consumer<? super Room> action) {          try {            if (!resultSet.next()) {              return false;            }            action.accept(createRoom(resultSet));            return true;          } catch (Exception e) {            throw new RuntimeException(e); // NOSONAR          }        },tryAdvance
2591,  private List<Threat> <extra_id_0>(Predicate<? super Threat> predicate) {    return this.issues.stream()            .filter(predicate).toList();  },filteredItems
2126,    private List<CakeLayer> <extra_id_0>() {        List<CakeLayer> result = new ArrayList<>();        for (CakeLayer next : cakeLayerDao.findAll()) {            if (next.getCake() == null) {                result.add(next);            }        }        return result;    }    @Override,getAvailableLayerEntities
2519,"  void <extra_id_0>() {    var blacksmith = new ElfBlacksmith();    var weapon = blacksmith.manufactureWeapon(WeaponType.SHORT_SWORD);    verifyWeapon(weapon, WeaponType.SHORT_SWORD, ElfWeapon.class);  }  /**   * Testing {@link ElfBlacksmith} to produce a SPEAR asserting that the Weapon is an instance of   * {@link ElfWeapon}.   */  @Test",testElfBlacksmithWithShortSword
2331,  void <extra_id_0>() {    repository.deleteAll();  }  @Test,clear
1946,"  public void <extra_id_0>(int currentId) {    var nextInstance = this.findNextInstance(currentId);    var heartbeatInvokeMessage = new Message(MessageType.HEARTBEAT_INVOKE, """");    nextInstance.onMessage(heartbeatInvokeMessage);  }",sendHeartbeatInvokeMessage
2833,"  void <extra_id_0>() {    assertTrue(new Rectangle(0, 0, 1, 1).intersectsWith(new Rectangle(0, 0, 1, 1)));    assertTrue(new Rectangle(0, 0, 1, 1).intersectsWith(new Rectangle(-1, -5, 7, 8)));    assertFalse(new Rectangle(0, 0, 1, 1).intersectsWith(new Rectangle(2, 2, 3, 3)));    assertFalse(new Rectangle(0, 0, 1, 1).intersectsWith(new Rectangle(-2, -2, -1, -1)));  }",testIntersection
305,"  protected void <extra_id_0>(String target) {    LOGGER.info(""Approach the {} from behind."", target);  }  @Override",confuseTarget
2354,  static void <extra_id_0>() {    mongoClient.close();    mongodProcess.stop();    mongodExe.stop();  }  @Test,tearDown
1066,"  public static void <extra_id_0>(String[] args) {    var sd = serviceDiscovery();    var service = sd.findAny();    var goodOrderSaga = service.execute(newSaga(""good_order""));    var badOrderSaga = service.execute(newSaga(""bad_order""));    LOGGER.info(""orders: goodOrder is {}, badOrder is {}"",        goodOrderSaga.getResult(), badOrderSaga.getResult());  }",main
2323,"  public void <extra_id_0>(String dbName, String accountsCollectionName) {    if (mongoClient != null) {      mongoClient.close();    }    mongoClient = new MongoClient(System.getProperty(""mongo-host""),        Integer.parseInt(System.getProperty(""mongo-port"")));    database = mongoClient.getDatabase(dbName);    accountsCollection = database.getCollection(accountsCollectionName);  }  /**   * Get mongo client.   *   * @return mongo client   */",connect
2846,"  void <extra_id_0>() {    testCollision(        new SpaceStationMir(1, 1, 3, 4),        true, true,        false, true    );  }",testCollideSpaceStationMir
1952,  protected void <extra_id_0>(Message message) {    // Not used in Ring instance.  }  @Override,handleHeartbeatMessage
2266,  public Optional<LotteryTicket> <extra_id_0>(LotteryTicketId id) {    return Optional.ofNullable(tickets.get(id));  }  @Override,findById
2129,    public void <extra_id_0>() {        cakeLayerDao.deleteAll();    }    @Override,deleteAllLayers
2214,  void <extra_id_0>() {    assertFalse(gameLoop.isGameRunning());  },testIsGameRunning
1554,"  void <extra_id_0>() throws Exception {    var actualDetails = resource.getDetails(1);    var expectedDetails = ""{\""id\"": 1,\""title\"": \""Avatar\"",\""length\"": 178,\""description\"": ""        + ""\""epic science fiction film\"",\""director\"": \""James Cameron\"",\""language\"": \""English\"",}"";    Assertions.assertEquals(expectedDetails, actualDetails);  }  @Test",shouldGiveVideoDetailsById
1268,"  public Promise<Void> <extra_id_0>(Consumer<? super T> action) {    var dest = new Promise<Void>();    fulfillmentAction = new ConsumeAction(this, dest, action);    return dest;  }  /**   * Set the exception handler on this promise.   *   * @param exceptionHandler a consumer that will handle the exception occurred while fulfilling the   *                         promise.   * @return this   */",thenAccept
2215,  void <extra_id_0>() {    gameLoop = new FrameBasedGameLoop();  }  @AfterEach,setup
685,  void <extra_id_0>() {    final var swimmingHeavyCreature = mock(Creature.class);    when(swimmingHeavyCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingHeavyCreature.getMass()).thenReturn(new Mass(100.0));    final var swimmingLightCreature = mock(Creature.class);    when(swimmingLightCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingLightCreature.getMass()).thenReturn(new Mass(25.0));    final var lightOrSwimmingSelector = new MassSmallerThanOrEqSelector(50.0)        .or(new MovementSelector(Movement.SWIMMING));    assertTrue(lightOrSwimmingSelector.test(swimmingHeavyCreature));    assertTrue(lightOrSwimmingSelector.test(swimmingLightCreature));  }  /**   * Verify if the negation selector gives the correct results.   */  @Test,testOrComposition
3751,  void <extra_id_0>();,unwield
3518,"  public static void <extra_id_0>(String[] args) {    var king = new OrcKing();    king.makeRequest(new Request(RequestType.DEFEND_CASTLE, ""defend castle""));    king.makeRequest(new Request(RequestType.TORTURE_PRISONER, ""torture prisoner""));    king.makeRequest(new Request(RequestType.COLLECT_TAX, ""collect tax""));  }",main
3504,"  public String <extra_id_0>() {    return ""Orc soldier"";  }",name
792,  void <extra_id_0>() {    final var queen = new Queen();    queen.changeMood();    assertFalse(queen.getMood());  }  @Test,testFlirtyUncomplemented
1828,  abstract Result<?> <extra_id_0>();,aggregateData
2835,"  void <extra_id_0>() {    final var mir = new SpaceStationMir(1, 2, 3, 4);    assertEquals(1, mir.getLeft());    assertEquals(2, mir.getTop());    assertEquals(3, mir.getRight());    assertEquals(4, mir.getBottom());    assertFalse(mir.isOnFire());    assertFalse(mir.isDamaged());    assertEquals(""SpaceStationMir at [1,2,3,4] damaged=false onFire=false"", mir.toString());  }  /**   * Test what happens we collide with an asteroid   */  @Test",testConstructor
2932,"  public static void <extra_id_0>(String[] args) {    // Example 1: Customer DTO    var customerOne = new CustomerDto(""1"", ""Kelly"", ""Brown"");    var customerTwo = new CustomerDto(""2"", ""Alfonso"", ""Bass"");    var customers = new ArrayList<>(List.of(customerOne, customerTwo));    var customerResource = new CustomerResource(customers);    LOGGER.info(""All customers:-"");    var allCustomers = customerResource.getAllCustomers();    printCustomerDetails(allCustomers);    LOGGER.info(""----------------------------------------------------------"");    LOGGER.info(""Deleting customer with id {1}"");    customerResource.delete(customerOne.getId());    allCustomers = customerResource.getAllCustomers();    printCustomerDetails(allCustomers);    LOGGER.info(""----------------------------------------------------------"");    LOGGER.info(""Adding customer three}"");    var customerThree = new CustomerDto(""3"", ""Lynda"", ""Blair"");    customerResource.save(customerThree);    allCustomers = customerResource.getAllCustomers();    printCustomerDetails(allCustomers);    // Example 2: Product DTO    Product tv = Product.builder().id(1L).name(""TV"").supplier(""Sony"").price(1000D).cost(1090D).build();    Product microwave =        Product.builder()            .id(2L)            .name(""microwave"")            .supplier(""Delonghi"")            .price(1000D)            .cost(1090D).build();    Product refrigerator =        Product.builder()            .id(3L)            .name(""refrigerator"")            .supplier(""Botsch"")            .price(1000D)            .cost(1090D).build();    Product airConditioner =        Product.builder()            .id(4L)            .name(""airConditioner"")            .supplier(""LG"")            .price(1000D)            .cost(1090D).build();    List<Product> products =        new ArrayList<>(Arrays.asList(tv, microwave, refrigerator, airConditioner));    ProductResource productResource = new ProductResource(products);    LOGGER.info(        ""####### List of products including sensitive data just for admins:  {}"",        Arrays.toString(productResource.getAllProductsForAdmin().toArray()));    LOGGER.info(        ""####### List of products for customers:  {}"",        Arrays.toString(productResource.getAllProductsForCustomer().toArray()));    LOGGER.info(""####### Going to save Sony PS5 ..."");    ProductDto.Request.Create createProductRequestDto =        new ProductDto.Request.Create()            .setName(""PS5"")            .setCost(1000D)            .setPrice(1220D)            .setSupplier(""Sony"");    productResource.save(createProductRequestDto);    LOGGER.info(        ""####### List of products after adding PS5: {}"",        Arrays.toString(productResource.getProducts().toArray()));  }",main
2461,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3);    final Consumer<Integer> consumer = mock(Consumer.class);    createFluentIterable(integers).forEach(consumer);    verify(consumer, times(1)).accept(1);    verify(consumer, times(1)).accept(2);    verify(consumer, times(1)).accept(3);    verifyNoMoreInteractions(consumer);  }  @Test",testForEach
303,"  protected void <extra_id_0>(String target) {    LOGGER.info(""While in close contact grab the {}'s wallet."", target);  }",stealTheItem
2853,  abstract O <extra_id_0>();  /**   * Collide the tested item with the other given item and verify if the damage and fire state is as   * expected   *   * @param other        The other object we have to collide with   * @param otherDamaged Indicates if the other object should be damaged after the collision   * @param otherOnFire  Indicates if the other object should be burning after the collision   * @param thisDamaged  Indicates if the test object should be damaged after the collision   * @param thisOnFire   Indicates if the other object should be burning after the collision   */,getTestedObject
1802,"  public static void <extra_id_0>(String[] args) {    var mw = new ArrayTransposeMasterWorker();    var rows = 10;    var columns = 20;    var inputMatrix = ArrayUtilityMethods.createRandomIntMatrix(rows, columns);    var input = new ArrayInput(inputMatrix);    var result = (ArrayResult) mw.getResult(input);    if (result != null) {      ArrayUtilityMethods.printMatrix(inputMatrix);      ArrayUtilityMethods.printMatrix(result.data);    } else {      LOGGER.info(""Please enter non-zero input"");    }  }",main
1000,  public static Customer <extra_id_0>() {    return new CustomerCore();  }  /**   * Create {@link Customer} with given roles.   *   * @param role roles   * @return Customer   */,newCustomer
1165,"  private static Message <extra_id_0>(final String sender, final String message) {    final var msg = new SimpleMessage();    msg.addHeader(Message.Headers.SENDER, sender);    msg.addHeader(Message.Headers.DATE, LocalDateTime.now().toString());    msg.setBody(message);    return msg;  }",createMessage
2486,  public final int <extra_id_0>() {    var counter = 0;    for (var ignored : this) {      counter++;    }    return counter;  }  /**   * Collects the remaining objects of the given iterator into a List.   *   * @return a new List with the remaining objects.   */,getRemainingElementsCount
2226,  protected void <extra_id_0>() {    controller.moveBullet(0.5f * MS_PER_FRAME / 1000);  },update
3088,  void <extra_id_0>();,smoke
144,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.getById(existingRoom.getId());      });    }    @Test",retrievingARoomByIdFailsWithExceptionAsFeedbackToClient
2999,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1512,"  public boolean <extra_id_0>() {    return ""Login"".equals(page.getTitleText());  }  /**   * Enters the username into the username input text field.   *   * @param username the username to enter   * @return {@link LoginPage}   */",isAt
365,"  void <extra_id_0>(DragonSlayingStrategy strategy, String expectedResult) {    strategy.execute();    assertEquals(expectedResult, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testExecute
2337,"  void <extra_id_0>() {    var result1 = new LotteryTicketCheckResult(CheckResult.NO_PRIZE);    var result2 = new LotteryTicketCheckResult(CheckResult.NO_PRIZE);    assertEquals(result1, result2);    var result3 = new LotteryTicketCheckResult(CheckResult.WIN_PRIZE, 300000);    assertNotEquals(result1, result3);  }",testEquals
3188,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.add(new Customer(2, ""Bernard"", ""Montgomery""));      });    }    @Test",addingACustomerFailsWithExceptionAsFeedbackToClient
2326,  public MongoCollection<Document> <extra_id_0>() {    return accountsCollection;  }  @Override,getAccountsCollection
1020,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""+2"");      return ChapterResult.success(value);    }    @Override",process
274,"  void <extra_id_0>() {    assertEquals(0, arithmetic.mul(-1, 0, 1));  }",testMul
3471,  private static Finder <extra_id_0>() {    return txt -> new ArrayList<>();  },identSum
3091,  void <extra_id_0>() {    appender = new InMemoryAppender(Tobacco.class);  }  @AfterEach,setUp
3450,  public static PrinterQueue <extra_id_0>() {    if (Objects.isNull(currentInstance)) {      currentInstance = new PrinterQueue();    }    return currentInstance;  }  /**   * Empty the printer queue.   */,getInstance
2790,    public void <extra_id_0>() {        assertDoesNotThrow(() -> App.main(new String[] {}));    },doesNotThrowException
2227,  protected void <extra_id_0>() {    var lastFrameTime = System.currentTimeMillis();    while (isGameRunning()) {      processInput();      var currentFrameTime = System.currentTimeMillis();      var elapsedTime = currentFrameTime - lastFrameTime;      update(elapsedTime);      lastFrameTime = currentFrameTime;      render();    }  },processGameLoop
3473,"  void <extra_id_0>() {    var example = ""the first one the second one "";    var result = Finder.contains(""second"").find(example);    assertEquals(1, result.size());    assertEquals( ""the second one "", result.get(0));  }",contains
435,"  void <extra_id_0>() {    assertEquals(-1758941372, (new User(1, ""janedoe"",            ""iloveyou"")).hashCode());  }  @Test",testHashCode1
2222,  protected void <extra_id_0>() {    controller.moveBullet(0.5f);  },update
3294,"  public static void <extra_id_0>(String[] args) {    final var bus = DataBus.getInstance();    bus.subscribe(new StatusMember(1));    bus.subscribe(new StatusMember(2));    final var foo = new MessageCollectorMember(""Foo"");    final var bar = new MessageCollectorMember(""Bar"");    bus.subscribe(foo);    bus.publish(StartingData.of(LocalDateTime.now()));    bus.publish(MessageData.of(""Only Foo should see this""));    bus.subscribe(bar);    bus.publish(MessageData.of(""Foo and Bar should see this""));    bus.unsubscribe(foo);    bus.publish(MessageData.of(""Only Bar should see this""));    bus.publish(StoppingData.of(LocalDateTime.now()));  }",main
1521,  void <extra_id_0>() {    var soberUnhappyKing = RoyaltyObjectMother.createSoberUnhappyKing();    var flirtyQueen = RoyaltyObjectMother.createFlirtyQueen();    soberUnhappyKing.flirt(flirtyQueen);    assertFalse(soberUnhappyKing.isHappy());  }  @Test,unsuccessfulKingFlirt
276,"  protected void <extra_id_0>(double x, double y, double z) {    logger.info(""Move to ( {}, {}, {} )"", x, y, z);  }  /**   * Play sound effect for the superpower.   * @param soundName Sound name.   * @param volume Value of volume.   */",move
3257,"  private Book <extra_id_0>(String title) {    Book book;    try (var session = sessionFactory.openSession()) {      var query = session.createQuery(""from Book where title=:title"");      query.setParameter(""title"", title);      book = (Book) query.uniqueResult();    }    if (book == null) {      HibernateUtil.getSessionFactory().close();      throw new NullPointerException(""Book "" + title + "" doesn't exist!"");    }    return book;  }  @Override",getBookByTitle
3359,"  private void <extra_id_0>() {    var list = queue.exceptionsList;    var t3 = new Thread(() -> {      Retry.Operation op = (list1) -> {        if (!list1.isEmpty()) {          LOG.warn(""Error in accessing queue db to dequeue task, trying again.."");          throw list1.remove(0);        }        queue.dequeue();        queueItems--;      };      Retry.HandleErrorIssue<QueueTask> handleError = (o, err) -> {      };      var r = new Retry<QueueTask>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, null);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t3.start();  }",tryDequeue
1325,  boolean <extra_id_0>(Stats stat);,has
55,  public void <extra_id_0>(Sergeant sergeant) {    // Do nothing  }  /**   * Commander Visitor method.   * @param commander Commander to be visited   */  @Override,visit
1576,"  public void <extra_id_0>() {    if (this.output != null) {      this.output.flush();      this.output.close();    }    if (this.error != null) {      this.error.flush();      this.error.close();    }    LOGGER.debug(""ConsoleLoggerModule::unprepare();"");  }  /**   * Used to print a message.   *   * @param value will be printed on console   */",unprepare
1593,"  public void <extra_id_0>(Request request) {    LOGGER.info(""Server ID {} associated to host : {} and port {}. Processed request with value {}"",        id, host, port, request.value);  }",serve
1649,"  void <extra_id_0>() {    for (final var name : NazgulName.values()) {      final var nazgul = Nazgul.getInstance(name);      assertNotNull(nazgul);      assertSame(nazgul, Nazgul.getInstance(name));      assertEquals(name, nazgul.getName());    }  }",testGetInstance
1343,  public Item <extra_id_0>() throws InterruptedException {    return queue.take();  },take
1303,"  void <extra_id_0>()      throws ExecutionException {    var promise = new Promise<Integer>();    promise.fulfill(NumberCrunchingTask.CRUNCHED_NUMBER);    Integer result = promise.get(1000, TimeUnit.SECONDS);    assertEquals(NumberCrunchingTask.CRUNCHED_NUMBER, result);  }  @SuppressWarnings(""unchecked"")  @Test",fetchingAnAlreadyFulfilledPromiseReturnsTheFulfilledValueImmediately
2765,"  public void <extra_id_0>() {    eventPool.entrySet().forEach(entry -> ((AsyncEvent) ((Map.Entry) entry).getValue()).status());  }  /**   * Stop all running events.   */  @SuppressWarnings(""rawtypes"")",statusOfAllEvents
2611,  public String <extra_id_0>() {    return log.get(log.size() - 1).getFormattedMessage();  },getLastMessage
2279,"  private static void <extra_id_0>() {    LOGGER.info("""");    LOGGER.info(""### Lottery Administration Console ###"");    LOGGER.info(""(1) Show all submitted tickets"");    LOGGER.info(""(2) Perform lottery draw"");    LOGGER.info(""(3) Reset lottery ticket database"");    LOGGER.info(""(4) Exit"");  }",printMainMenu
3537,"  public void <extra_id_0>() {    LOGGER.info(""Perform some important activity and after call the callback method."");  }",execute
3409,"  public String <extra_id_0>() {    if (!this.taskType.equals(TaskType.MESSAGING)) {      return this.taskType.toString();    } else {      if (this.messageType == 0) {        return ""Payment Failure Message"";      } else if (this.messageType == 1) {        return ""Payment Error Message"";      } else {        return ""Payment Success Message"";      }    }  }",getType
2383,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    // delete the record.    db.delete(1);    // test size of database after deletion.    Assertions.assertEquals(1,db.size(),""Size after deletion is incorrect."");    // try to find deleted record in db.    Assertions.assertThrows(IdNotFoundException.class,()->db.find(1));  }",deleteInDb
1879,"  public String <extra_id_0>() {    return ""Wizard"";  }",toString
778,"  void <extra_id_0>() {    final var royalty = mock(Royalty.class);    final var servant = new Servant(""test"");    servant.feed(royalty);    verify(royalty).getFed();    verifyNoMoreInteractions(royalty);  }  @Test",testFeed
3001,"  void <extra_id_0>() throws Exception {    var printerController = new PrinterController(new CanonPrinter());    printerController.print(MESSAGE);    assertEquals(""Canon Printer : Test Message Printed"", appender.getLastMessage());  }  @Test",testCanonPrinter
609,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    assertEquals(Nourishment.SATURATED, model.getNourishment());    var messageFormat = ""Giant giant1, The giant looks healthy, alert and %s."";    for (final var nourishment : Nourishment.values()) {      model.setNourishment(nourishment);      assertEquals(nourishment, model.getNourishment());      assertEquals(String.format(messageFormat, nourishment), model.toString());    }  }",testSetNourishment
3487,  public String <extra_id_0>() {    return title;  },toString
1037,  public static Saga <extra_id_0>() {    return new Saga();  }  /**   * result for saga.   */,create
2792,  boolean <extra_id_0>() throws SQLException;  ,createSchema
3421,"    private Commander <extra_id_0>() {        PaymentService paymentService = new PaymentService                (new PaymentDatabase(), new IllegalStateException());        var shippingService = new ShippingService(new ShippingDatabase());        var messagingService = new MessagingService(new MessagingDatabase());        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new IllegalStateException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new IllegalStateException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectUnknownException
3193,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);    }  },deleteSchema
2446,"  void <extra_id_0>() {    final var store = mock(MenuStore.class);    when(store.getSelected()).thenReturn(MenuItem.HOME);    final var view = new MenuView();    view.storeChanged(store);    verify(store, times(1)).getSelected();    verifyNoMoreInteractions(store);  }  @Test",testStoreChanged
2885,  void <extra_id_0>() {    appender = new InMemoryAppender(SimpleTroll.class);  }  @AfterEach,setUp
451,  public void <extra_id_0>(String tenantName) {    tenantCallsCount.get(tenantName).incrementAndGet();  }  /**   * Get count of tenant based on tenant name.   *   * @param tenantName name of the tenant.   * @return the count of the tenant.   */,incrementCount
859,  public ChannelHandler <extra_id_0>() {    return handler;  }  /*   * Called from the context of reactor thread when the key becomes writable. The channel writes the   * whole pending block of data at once.   */,getHandler
650,  public String <extra_id_0>() {    return title;  },toString
3611,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var asyncResult = executor.startProcess(null);      assertNotNull(asyncResult, ""The AsyncResult should not be 'null', even though the task was 'null'."");      asyncResult.await(); // Prevent timing issues, and wait until the result is available      assertTrue(asyncResult.isCompleted());      try {        asyncResult.getValue();        fail(""Expected ExecutionException with NPE as cause"");      } catch (final ExecutionException e) {        assertNotNull(e.getMessage());        assertNotNull(e.getCause());        assertEquals(NullPointerException.class, e.getCause().getClass());      }    });  }  /**   * Test used to verify the behaviour of {@link ThreadAsyncExecutor#startProcess(Callable,   * AsyncCallback)} when the callable is 'null', but the asynchronous callback is provided   */  @Test",testNullTask
3574,"  public String <extra_id_0>() {    var httpClient = HttpClient.newHttpClient();    var httpGet = HttpRequest.newBuilder()        .GET()        .uri(URI.create(""http://localhost:50005/image-path""))        .build();    try {      LOGGER.info(""Sending request to fetch image path"");      var httpResponse = httpClient.send(httpGet, BodyHandlers.ofString());      logResponse(httpResponse);      return httpResponse.body();    } catch (IOException ioe) {      LOGGER.error(""Failure occurred while getting image path"", ioe);    } catch (InterruptedException ie) {      LOGGER.error(""Failure occurred while getting image path"", ie);      Thread.currentThread().interrupt();    }    return null;  }",getImagePath
2348,"  public static LotteryTicket <extra_id_0>(String email, String account, String phone,                                                  Set<Integer> givenNumbers) {    var details = new PlayerDetails(email, account, phone);    var numbers = LotteryNumbers.create(givenNumbers);    return new LotteryTicket(new LotteryTicketId(), details, numbers);  }",createLotteryTicket
3432,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObjectNoPaymentException1();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoException1
1133,"  public void <extra_id_0>() throws Exception {    while (true) {      var message = queueManager.receiveMessage();      if (message == null) {        LOGGER.info(""No Message ... waiting"");        Thread.sleep(200);      } else {        processMessage(message);      }    }  }  /**   * Process message.   */",run
3243,"  public static void <extra_id_0>(String[] args) {    var commands = new CommandServiceImpl();    // Create Authors and Books using CommandService    commands.authorCreated(AppConstants.E_EVANS, ""Eric Evans"", ""evans@email.com"");    commands.authorCreated(AppConstants.J_BLOCH, ""Joshua Bloch"", ""jBloch@email.com"");    commands.authorCreated(AppConstants.M_FOWLER, ""Martin Fowler"", ""mFowler@email.com"");    commands.bookAddedToAuthor(""Domain-Driven Design"", 60.08, AppConstants.E_EVANS);    commands.bookAddedToAuthor(""Effective Java"", 40.54, AppConstants.J_BLOCH);    commands.bookAddedToAuthor(""Java Puzzlers"", 39.99, AppConstants.J_BLOCH);    commands.bookAddedToAuthor(""Java Concurrency in Practice"", 29.40, AppConstants.J_BLOCH);    commands.bookAddedToAuthor(""Patterns of Enterprise""        + "" Application Architecture"", 54.01, AppConstants.M_FOWLER);    commands.bookAddedToAuthor(""Domain Specific Languages"", 48.89, AppConstants.M_FOWLER);    commands.authorNameUpdated(AppConstants.E_EVANS, ""Eric J. Evans"");    var queries = new QueryServiceImpl();    // Query the database using QueryService    var nullAuthor = queries.getAuthorByUsername(""username"");    var evans = queries.getAuthorByUsername(AppConstants.E_EVANS);    var blochBooksCount = queries.getAuthorBooksCount(AppConstants.J_BLOCH);    var authorsCount = queries.getAuthorsCount();    var dddBook = queries.getBook(""Domain-Driven Design"");    var blochBooks = queries.getAuthorBooks(AppConstants.J_BLOCH);    LOGGER.info(""Author username : {}"", nullAuthor);    LOGGER.info(""Author evans : {}"", evans);    LOGGER.info(""jBloch number of books : {}"", blochBooksCount);    LOGGER.info(""Number of authors : {}"", authorsCount);    LOGGER.info(""DDD book : {}"", dddBook);    LOGGER.info(""jBloch books : {}"", blochBooks);    HibernateUtil.getSessionFactory().close();  }",main
3163,    void <extra_id_0>() throws Exception {      var result = dao.delete(CUSTOMER);      assertTrue(result);      assertCustomerCountIs(0);      assertFalse(dao.getById(CUSTOMER.getId()).isPresent());    }    @Test,deletionShouldBeSuccessAndCustomerShouldBeNonAccessible
437,"  void <extra_id_0>() {    assertEquals(-426522485, (new User(1, ""janedoe"",            null)).hashCode());  }  @Test",testHashCode3
835,  public DatagramChannel <extra_id_0>() {    return (DatagramChannel) super.getJavaChannel();  }  /**   * Binds UDP socket on the provided <code>port</code>.   *   * @throws IOException if any I/O error occurs.   */  @Override,getJavaChannel
3398,  public String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    return updateDb(parameters[0]);  },receiveRequest
2405,  public int <extra_id_0>() {    return leftExpression.interpret() + rightExpression.interpret();  }  @Override,interpret
3260,"  public void <extra_id_0>(String username, String name) {    var author = getAuthorByUsername(username);    author.setName(name);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.update(author);      session.getTransaction().commit();    }  }  @Override",authorNameUpdated
3627,"  public <T> AsyncResult<T> <extra_id_0>(Callable<T> task, AsyncCallback<T> callback) {    var result = new CompletableResult<>(callback);    new Thread(() -> {      try {        result.setValue(task.call());      } catch (Exception ex) {        result.setException(ex);      }    }, ""executor-"" + idx.incrementAndGet()).start();    return result;  }  @Override",startProcess
1692,  public String <extra_id_0>() {    return this.name;  }  @Override,getFileName
2259,  public MongoCollection<Document> <extra_id_0>() {    return ticketsCollection;  }  /**   * Get counters collection.   *   * @return counters collection   */,getTicketsCollection
2058,"  void <extra_id_0>()      throws NoSuchMethodException,          InvocationTargetException,          IllegalAccessException,          InterruptedException {    // Mock executor service to return false (incomplete termination)    when(executorService.awaitTermination(5, TimeUnit.SECONDS)).thenReturn(false);    // Use reflection to access the private method for code coverage.    Method privateMethod =        AsynchronousHealthChecker.class.getDeclaredMethod(""awaitTerminationWithTimeout"");    privateMethod.setAccessible(true);    // When    boolean result = (boolean) privateMethod.invoke(healthChecker);    // Then    assertTrue(result, ""Termination should be incomplete"");  }",awaitTerminationWithTimeout_IncompleteTermination_ReturnsTrue
3479,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2769,"  public Map<Integer, AsyncEvent> <extra_id_0>() {    return eventPool;  }  /**   * Get number of currently running Synchronous events.   */",getEventPool
586,  void <extra_id_0>() {    HibernateUtil.dropSession();  },tearDown
2030,"    public CacheManager <extra_id_0>() {      return new ConcurrentMapCacheManager(""health-check"");    }  }}",cacheManager
3883,  public static void <extra_id_0>(String[] args) {      var app = new App();    app.run();  }    @Override,main
2968,  public List<ProductDto.Response.Public> <extra_id_0>() {    return products            .stream()            .map(p -> new ProductDto.Response.Public().setId(p.getId()).setName(p.getName())                    .setPrice(p.getPrice()))            .toList();  }  /**   * Save new product.   *   * @param createProductDto save new product to list.   */,getAllProductsForCustomer
2598,  void <extra_id_0>() {    appender.stop();  },tearDown
3262,"  public void <extra_id_0>(String username, String email) {    var author = getAuthorByUsername(username);    author.setEmail(email);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.update(author);      session.getTransaction().commit();    }  }  @Override",authorEmailUpdated
420,"  void <extra_id_0>() throws SQLException {    var dataSource = createDataSource();    var userTableModule = new UserTableModule(dataSource);    var user = new User(1, ""123456"", ""123456"");    userTableModule.registerUser(user);    assertEquals(1, userTableModule.login(user.getUsername(),            user.getPassword()));  }  @Test",loginShouldSucceed
2998,"  public void <extra_id_0>(String message) {    LOGGER.info(""HP Printer : {}"", message);  }",print
3096,"  void <extra_id_0>() throws Exception {    List<Tobacco> tobaccos = List.of(        new OldTobyTobacco(),        new RivendellTobacco(),        new SecondBreakfastTobacco()    );    // Verify if the wizard is smoking the correct tobacco ...    tobaccos.forEach(tobacco -> {      final GuiceWizard guiceWizard = new GuiceWizard(tobacco);      guiceWizard.smoke();      String lastMessage = appender.getLastMessage();      assertEquals(""GuiceWizard smoking "" + tobacco.getClass().getSimpleName(), lastMessage);    });    // ... and nothing else is happening.    assertEquals(tobaccos.size(), appender.getLogSize());  }  /**   * Test if the {@link GuiceWizard} smokes whatever instance of {@link Tobacco} is passed to him   * through the Guice google inject framework   */  @Test",testSmokeEveryThingThroughConstructor
380,"  public String <extra_id_0>() {    return String.format(""id=%d timeMs=%d"", id, timeMs);  }",toString
731,"  static Hashtable<Integer, Point> <extra_id_0>(Collection<Point> points, Rect queryRange) {    return points.stream()        .filter(queryRange::contains)        .collect(Collectors.toMap(point -> point.id, point -> point, (a, b) -> b, Hashtable::new));  }",verify
1987,"  private void <extra_id_0>(ActionEvent e) {    var fieldText1 = jtFields[0].getText();    var fieldText2 = jtFields[1].getText();    var areaText1 = jtAreas[0].getText();    var fieldText3 = jtFields[2].getText();    var areaText2 = jtAreas[1].getText();    var order = new Order(fieldText1, fieldText2, areaText1, fieldText3, areaText2);    jl.setText(sendRequest(order));  }",actionPerformed
629,"  public void <extra_id_0>(Command s, int actionIndex) {    actions.get(actionIndex).updateModel(s);  }  /**   * Update view.   *   * @param giantModel the giant model   */",performAction
2014,  public String <extra_id_0>() {    return orderItem;  },getOrderItem
2535,  public final List<Potion> <extra_id_0>() {    return List.copyOf(this.topShelf);  }  /**   * Get a read-only list of all the items on the bottom shelf.   *   * @return The bottom shelf potions   */,getTopShelf
2850,"  void <extra_id_0>() {    testCollision(        new Meteoroid(1, 1, 3, 4),        false, false,        false, false    );  }  /**   * Test what happens we collide with ISS   */  @Test",testCollideMeteoroid
2700,"  public void <extra_id_0>() {    makeActions(workers, DwarvenMineWorker.Action.GO_HOME, DwarvenMineWorker.Action.GO_TO_SLEEP);  }",endDay
353,  void <extra_id_0>();,execute
516,"  public void <extra_id_0>(Data data) {    dataStore.put(data.getKey(), data);  }",storeData
1833,"  void <extra_id_0>() {    var atm = new ArrayTransposeMaster(1);    var atw = new ArrayTransposeWorker(atm, 1);    var matrix = new int[][]{{2, 4}, {3, 5}};    var matrixTranspose = new int[][]{{2, 3}, {4, 5}};    var i = new ArrayInput(matrix);    atw.setReceivedData(atm, i);    var r = atw.executeOperation();    assertTrue(ArrayUtilityMethods.matricesSame(r.data, matrixTranspose));  }",executeOperationTest
648,  public final boolean <extra_id_0>(Mass other) {    return this.value >= other.value;  },greaterThanOrEq
81,"  public void <extra_id_0>(Weapon weapon) {    LOGGER.info(""Registering {} for delete in context."", weapon.getName());    register(weapon, UnitActions.DELETE.getActionValue());  }",registerDeleted
2719,"  void <extra_id_0>() throws Exception {    final var temporaryFile = this.testFolder.newFile();    new SimpleFileWriter(temporaryFile.getPath(), Assertions::assertNotNull);  }  @Test",testWriterNotNull
1722,"  void <extra_id_0>() {    var expectedFile = ""Stamatis"";    stub.setFileName(expectedFile);    presenter.start();    presenter.fileNameChanged();    assertEquals(expectedFile, loader.getFileName());  }  /**   * Tests if we receive a confirmation when we attempt to open a file that it's name is null or an   * empty string.   */  @Test",updateFileNameToLoader
2182,  public boolean <extra_id_0>() {    return findNextIdx() != -1;  }  @Override,hasNext
40,"  void <extra_id_0>() {    this.visitor.visit(new Soldier());    if (this.soldierResponse.isPresent()) {      assertEquals(this.soldierResponse.get(), appender.getLastMessage());      assertEquals(1, appender.getLogSize());    }  }",testVisitSoldier
3762,  void <extra_id_0>() {    Client client = new Client();    var result = client.useService(10);    assertTrue(result == 100 || result == RemoteServiceStatus.FAILURE.getRemoteServiceStatusValue());  },test
2433,  public void <extra_id_0>(Action action) {    if (action.getType().equals(ActionType.CONTENT_CHANGED)) {      var contentAction = (ContentAction) action;      content = contentAction.getContent();      notifyChange();    }  },onAction
3254,"  private static SessionFactory <extra_id_0>() {    // configures settings from hibernate.cfg.xml    final var registry = new StandardServiceRegistryBuilder().configure().build();    try {      return new MetadataSources(registry).buildMetadata().buildSessionFactory();    } catch (Exception ex) {      StandardServiceRegistryBuilder.destroy(registry);      LOGGER.error(""Initial SessionFactory creation failed."", ex);      throw new ExceptionInInitializerError(ex);    }  }",buildSessionFactory
1676,  public String <extra_id_0>() {    return title;  },toString
2423,  public void <extra_id_0>(Store store) {    var contentStore = (ContentStore) store;    content = contentStore.getContent();    render();  }  @Override,storeChanged
1998,"  public String <extra_id_0>(Order order) {    if (getNext() != null) {      return getNext().execute(order);    } else {      return """";    }  }",execute
2027,"  void <extra_id_0>() {    CompletableFuture<Health> future =        CompletableFuture.completedFuture(            Health.down().withDetail(""database"", ""unreachable"").build());    when(healthChecker.performCheck(any(), anyLong())).thenReturn(future);    when(healthCheckRepository.checkHealth()).thenReturn(null);    Health health = customHealthIndicator.health();    assertEquals(Status.DOWN, health.getStatus());  }  /**   * Test case for the `health()` method when the health check times out.   *   * <p>Asserts that when the `health()` method is called and the health check times out, it returns   * a Health object with Status.DOWN.   */  @Test",whenDatabaseIsDown_thenHealthIsDown
1444,    public ParameterObject <extra_id_0>() {      return new ParameterObject(this);    }  }},build
1820,"  Hashtable<Integer, Result<?>> <extra_id_0>() {    return this.allResultData;  }",getAllResultData
1070,"  public String <extra_id_0>() {    return ""booking a Fly"";  }",getName
922,  public Lock <extra_id_0>() {    return writerLock;  }  /**   * return true when globalMutex hold the reference of writerLock.   */,writeLock
758,  public void <extra_id_0>() {    complimentReceived = true;  }  @Override,receiveCompliments
3033,"  void <extra_id_0>(Product product, Customer customer) throws SQLException;",deleteProduct
3153,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setURL(DB_URL);    return dataSource;  },createDataSource
903,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
2949,      public Public <extra_id_0>(String name) {        this.name = name;        return this;      }      @Override,setName
347,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Merlin"")        .wizardClass(""alchemist"")        .withSpell(""poison"")        .withAbility(""invisibility"")        .withAbility(""wisdom"")        .noMoreAbilities()        .build();    assertEquals(""Merlin"", character.getName());    assertEquals(""alchemist"", character.getWizardClass());    assertEquals(""poison"", character.getSpell());    assertNotNull(character.toString());    final var abilities = character.getAbilities();    assertNotNull(abilities);    assertEquals(2, abilities.size());    assertTrue(abilities.contains(""invisibility""));    assertTrue(abilities.contains(""wisdom""));  }  /**   * Build a new wizard {@link Character} without spell or abilities and verify if it has the   * expected attributes   */  @Test",testBuildWizard
2253,"  Map<LotteryTicketId, LotteryTicket> <extra_id_0>();  /**   * Delete all lottery tickets.   */",findAll
721,"  private ReceiptViewModel <extra_id_0>(Db.User user, Db.Account account, String itemName) {    Db.Product item = Db.getInstance().findProductByItemName(itemName);    if (item == null) {      return new OutOfStock(user.getUserName(), itemName);    }    ReceiptDto receipt = user.purchase(item);    MoneyTransaction transaction = account.withdraw(receipt.getPrice());    if (transaction == null) {      return new InsufficientFunds(user.getUserName(), account.getAmount(), itemName);    }    return receipt;  }",purchase
3323,"  public void <extra_id_0>(Request request) {    LOGGER.info(""Processing Request with client: "" + request.getSession().getClientName() + "" data: "" + request.getData());  }",process
1491,"  public AlbumPage <extra_id_0>(String albumRating) {    var albumRatingInputTextField = (HtmlTextInput) page.getElementById(""albumRating"");    albumRatingInputTextField.setText(albumRating);    return this;  }  /**   * Sets the number of songs number input field   *   * @param numberOfSongs the new number of songs value to be set   * @return {@link AlbumPage}   */",changeAlbumRating
653,  public String <extra_id_0>() {    return title;  },toString
2029,"  void <extra_id_0>() {    doNothing().when(cache).clear();    customHealthIndicator.evictHealthCache();    verify(cache, times(1)).clear();    verify(cacheManager, times(1)).getCache(""health-check"");  }  /** Configuration static class for the health check cache. */  @Configuration",whenEvictHealthCache_thenCacheIsCleared
3453,  public void <extra_id_0>(PrinterItem printerItem) {    currentInstance.getPrinterQueue().add(printerItem);  },addPrinterItem
2462,"  void <extra_id_0>() throws Exception {    final var integers = List.of(1, 2, 3);    final var split = createFluentIterable(integers).spliterator();    assertNotNull(split);  }",testSpliterator
1979,"  void <extra_id_0>() {    final var order = new Order();    order.setOrderItem(EXPECTED_VALUE);    assertEquals(EXPECTED_VALUE, order.getOrderItem());  }",testSetOrder
1914,"  void <extra_id_0>() {    try {      var instance1 = new BullyInstance(null, 1, 1);      var instance2 = new BullyInstance(null, 1, 2);      var instance3 = new BullyInstance(null, 1, 3);      var instance4 = new BullyInstance(null, 1, 4);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3, 4, instance4);      instance1.setAlive(false);      var messageManager = new BullyMessageManager(instanceMap);      var result = messageManager.sendElectionMessage(3, ""3"");      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var message2 = ((Queue<Message>) messageQueueField.get(instance2)).poll();      var instance4QueueSize = ((Queue<Message>) messageQueueField.get(instance4)).size();      var expectedMessage = new Message(MessageType.ELECTION_INVOKE, """");      assertEquals(message2, expectedMessage);      assertEquals(instance4QueueSize, 0);      assertEquals(result, false);    } catch (IllegalAccessException | NoSuchFieldException e) {      fail(""Error to access private field."");    }  }  @Test",testSendElectionMessageNotAccepted
1569,"  void <extra_id_0>() throws IOException {    /* Get singleton instance of File Logger Module */    final var fileLoggerModule = FileLoggerModule.getSingleton();    /* Prepare the essential sub modules, to perform the sequence of jobs */    fileLoggerModule.prepare();    /* Test if nothing is printed in file */    assertNull(readFirstLine(OUTPUT_FILE));    /* Unprepare to cleanup the modules */    fileLoggerModule.unprepare();  }  /**   * This test verify that 'ERROR' is perfectly printed in error file   *   * @throws FileNotFoundException if program is not able to find log files (output.txt and   *                               error.txt)   */  @Test",testNoFileMessage
2957,      public Double <extra_id_0>() {        return price;      },getPrice
1210,"  void <extra_id_0>(){    Album album = new Album(""a"", ""b"", false, """");    album.setClassical(true);    assertTrue(album.isClassical());  }  @Test",testSetClassical
2831,"  void <extra_id_0>() {    final var rectangle = new Rectangle(1, 2, 3, 4);    assertEquals(1, rectangle.getLeft());    assertEquals(2, rectangle.getTop());    assertEquals(3, rectangle.getRight());    assertEquals(4, rectangle.getBottom());  }  /**   * Test if the values passed through the constructor matches the values in the {@link   * #toString()}   */  @Test",testConstructor
190,"  public Boolean <extra_id_0>(Room room) throws Exception {    try (var connection = getConnection();         var statement = connection.prepareStatement(""DELETE FROM ROOMS WHERE ID = ?"")) {      statement.setInt(1, room.getId());      return statement.executeUpdate() > 0;    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }",delete
402,  public static void <extra_id_0>(String[] args) {    var mammoth = new Mammoth();    mammoth.observe();    mammoth.timePasses();    mammoth.observe();    mammoth.timePasses();    mammoth.observe();  },main
3600,"  public static void <extra_id_0>(String... args) {    final var washingMachine = new WashingMachine();    var executorService = Executors.newFixedThreadPool(3);    for (int i = 0; i < 3; i++) {      executorService.execute(washingMachine::wash);    }    executorService.shutdown();    try {      if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {        executorService.shutdownNow();      }    } catch (InterruptedException ie) {      LOGGER.error(""ERROR: Waiting on executor service shutdown!"");      Thread.currentThread().interrupt();    }  }",main
2809,  public void <extra_id_0>(GameObject gameObject) {    gameObject.collisionResolve(this);  },collision
2254,  void <extra_id_0>();,deleteAll
1875,  public static void <extra_id_0>(String[] args) {    // create party and members    Party party = new PartyImpl();    var hobbit = new Hobbit();    var wizard = new Wizard();    var rogue = new Rogue();    var hunter = new Hunter();    // add party members    party.addMember(hobbit);    party.addMember(wizard);    party.addMember(rogue);    party.addMember(hunter);    // perform actions -> the other party members    // are notified by the party    hobbit.act(Action.ENEMY);    wizard.act(Action.TALE);    rogue.act(Action.GOLD);    hunter.act(Action.HUNT);  },main
184,"  public void <extra_id_0>(int roomNumber) throws Exception {    var room = hotelDao.getById(roomNumber);    if (room.isEmpty()) {      throw new Exception(""Room number: "" + roomNumber + "" does not exist"");    } else {      if (room.get().isBooked()) {        var updateRoomBooking = room.get();        updateRoomBooking.setBooked(false);        int refundAmount = updateRoomBooking.getPrice();        hotelDao.update(updateRoomBooking);        LOGGER.info(""Booking cancelled for room number: "" + roomNumber);        LOGGER.info(refundAmount + "" is refunded"");      } else {        throw new Exception(""No booking for the room exists"");      }    }  }",cancelRoomBooking
3295,  public void <extra_id_0>(final DataType data) {    if (data instanceof MessageData) {      handleEvent((MessageData) data);    }  },accept
2573,  String <extra_id_0>();  /**   * Returns list of threats for this system.   * @return list of threats for this system.   */,systemId
723,"  public void <extra_id_0>() {    LOGGER.info(""Down for maintenance"");  }",show
1086,  Chapter <extra_id_0>() {    return chapters.get(pos);  },getCurrent
2692,"  public void <extra_id_0>(UserCreatedEvent event) {    LOGGER.info(""User '{}' has been Created!"", event.getUser().getUsername());  }",onEvent
1414,"  public void <extra_id_0>(WeatherType currentWeather) {    LOGGER.info(""The orcs are facing "" + currentWeather.getDescription() + "" weather now"");  }",update
457,"  public void <extra_id_0>() {    new Timer(true).schedule(new TimerTask() {      @Override      public void run() {        callsCount.reset();      }    }, 0, throttlePeriod);  }",start
1358,"  void <extra_id_0>() {    SignupModel model = new SignupModel();    model.setName(""Lily"");    assertEquals(""Lily"", model.getName());  }  /**   * Verify if a user can set an email properly   */  @Test",testSetName
466,"  public static void <extra_id_0>(String[] args) throws IOException, ClassNotFoundException {    final var dataSource = createDataSource();    deleteSchema(dataSource);    createSchema(dataSource);    // Initializing Country Object China    final var China = new Country(            86,            ""China"",            ""Asia"",            ""Chinese""    );    // Initializing Country Object UnitedArabEmirates    final var UnitedArabEmirates = new Country(            971,            ""United Arab Emirates"",            ""Asia"",            ""Arabic""    );    // Initializing CountrySchemaSql Object with parameter ""China"" and ""dataSource""    final var serializedChina = new CountrySchemaSql(China, dataSource);    // Initializing CountrySchemaSql Object with parameter ""UnitedArabEmirates"" and ""dataSource""    final var serializedUnitedArabEmirates = new CountrySchemaSql(UnitedArabEmirates, dataSource);    /*    By using CountrySchemaSql.insertCountry() method, the private (Country) type variable  within Object    CountrySchemaSql will be serialized to a set of bytes and persist to database.    For more details of CountrySchemaSql.insertCountry() method please refer to CountrySchemaSql.java file    */    serializedChina.insertCountry();    serializedUnitedArabEmirates.insertCountry();    /*    By using CountrySchemaSql.selectCountry() method, CountrySchemaSql object will read the sets of bytes from database    and deserialize it to Country object.    For more details of CountrySchemaSql.selectCountry() method please refer to CountrySchemaSql.java file    */    serializedChina.selectCountry();    serializedUnitedArabEmirates.selectCountry();  }",main
288,"  void <extra_id_0>() throws Exception {    var groundDive = new GroundDive();    groundDive.move(1.0, 1.0, 1.0);    var outputLog = getLogContent(() -> groundDive.move(1.0, 1.0, 1.0));    var expectedLog = ""Move to ( 1.0, 1.0, 1.0 )"";    assertEquals(outputLog, expectedLog);  }  @Test",testMove
1925,"  boolean <extra_id_0>(int currentId, int leaderId);  /**   * Send heartbeat invoke message. This will invoke heartbeat task in the target instance.   *   * @param currentId Instance ID of which sends this message.   */",sendLeaderMessage
473,"  int <extra_id_0>() throws IOException, ClassNotFoundException;",selectCountry
415,  private String <extra_id_0>() {    return Thread.currentThread().getName();  },getThreadName
3458,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },executesWithoutException
830,"  void <extra_id_0>() throws Exception {    assertThat(new FindCustomer(""123"").perform(), is(""123""));  }  /**   * Throws the given exception.   */  @Test",noExceptions
269,"  void <extra_id_0>() {    assertEquals(0, arithmetic.mul(-1, 0, 1));  }  @Test",testMul
2660,"  public void <extra_id_0>() {    var account = AccountAggregate.getAccount(accountNo);    if (account != null) {      throw new RuntimeException(""Account already exists"");    }    account = new Account(accountNo, owner);    account.handleEvent(this);  }",process
783,  void <extra_id_0>() {    final var king = new King();    king.getFed();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testFedSoberUncomplimentedKing
3220,"  public void <extra_id_0>(String message, String signal) {    console.setData(message, signal);  }",setData
3551,"  void <extra_id_0>() {    //Calling delayed service, which will be unhealthy till 4 seconds    assertEquals(""Delayed service is down"", monitoringService.delayedServiceResponse());    //As failure threshold is ""1"", the circuit breaker is changed to OPEN    assertEquals(""OPEN"", delayedServiceCircuitBreaker.getState());    //Waiting for 4 seconds, which is enough for DelayedService to become healthy and respond successfully.    try {      LOGGER.info(""Waiting 4s for delayed service to become responsive"");      Thread.sleep(4000);    } catch (InterruptedException e) {      e.printStackTrace();    }    //As retry period is 2 seconds (<4 seconds of wait), hence the circuit breaker should be back in HALF_OPEN state.    assertEquals(""HALF_OPEN"", delayedServiceCircuitBreaker.getState());    //Check the success response from delayed service.    assertEquals(""Delayed service is working"", monitoringService.delayedServiceResponse());    //As the response is success, the state should be CLOSED    assertEquals(""CLOSED"", delayedServiceCircuitBreaker.getState());  }",testRecovery_ClosedStateTransition
140,    private DataSource <extra_id_0>() throws SQLException {      var mockedDataSource = mock(DataSource.class);      var mockedConnection = mock(Connection.class);      var exception = new SQLException(EXCEPTION_CAUSE);      doThrow(exception).when(mockedConnection).prepareStatement(Mockito.anyString());      doReturn(mockedConnection).when(mockedDataSource).getConnection();      return mockedDataSource;    }    @Test,mockedDatasource
2969,  public void <extra_id_0>(ProductDto.Request.Create createProductDto) {    products.add(Product.builder()            .id((long) (products.size() + 1))            .name(createProductDto.getName())            .supplier(createProductDto.getSupplier())            .price(createProductDto.getPrice())            .cost(createProductDto.getCost())            .build());  }  /**   * List of all products in an entity representation.   *   * @return : all the products entity that stored in the products list   */,save
3869,"  public Integer <extra_id_0>() {    var response = """";    var request = HttpRequest.newBuilder()        .GET()        .uri(URI.create(""http://localhost:51516/inventories""))        .build();    var client = HttpClient.newHttpClient();    try {      var httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());      response = httpResponse.body();    } catch (IOException ioe) {      LOGGER.error(""IOException Occurred"", ioe);    } catch (InterruptedException ie) {      LOGGER.error(""InterruptedException Occurred"", ie);      Thread.currentThread().interrupt();    }    if ("""".equalsIgnoreCase(response)) {      return null;    } else {      return Integer.parseInt(response);    }  }",getProductInventories
3744,"  public void <extra_id_0>() {    LOGGER.info(""The item eats the soul of enemies."");  }  @Override",apply
3303,  public static DataType <extra_id_0>(final LocalDateTime when) {    return new StoppingData(when);  },of
2513,  private static Predicate<? super Integer> <extra_id_0>() {    return integer -> integer > 0;  },positives
1195,"  void <extra_id_0>(){    View view = new View();    view.createView();    view.getModel().setSelectedAlbumNumber(4);    view.loadFromMod();    assertEquals(albumList[3], view.getModel().getTitle());  }",testLoad_2
1547,  public boolean <extra_id_0>() {    return isFlirty;  },isFlirty
3772,  static synchronized RemoteService <extra_id_0>() {    if (service == null) {      service = new RemoteService();    }    return service;  },getRemoteService
1963,  public static SessionFactory <extra_id_0>() {    return sessionFactory;  }  /**   * Close session factory.   */,getSessionFactory
1160,"  void <extra_id_0>() {    final var message = new SimpleMessage();    assertNotNull(message.getHeaders());    assertTrue(message.getHeaders().isEmpty());    final var senderName = ""test"";    message.addHeader(Message.Headers.SENDER, senderName);    assertNotNull(message.getHeaders());    assertFalse(message.getHeaders().isEmpty());    assertEquals(senderName, message.getHeaders().get(Message.Headers.SENDER));  }  @Test",testGetHeaders
2752,"  public void <extra_id_0>() {    var prop = new Properties();    var inputStream = App.class.getClassLoader().getResourceAsStream(PROP_FILE_NAME);    if (inputStream != null) {      try {        prop.load(inputStream);      } catch (IOException e) {        LOGGER.error(""{} was not found. Defaulting to non-interactive mode."", PROP_FILE_NAME, e);      }      var property = prop.getProperty(""INTERACTIVE_MODE"");      if (property.equalsIgnoreCase(""YES"")) {        interactiveMode = true;      }    }  }  /**   * Run program in either interactive mode or not.   */",setUp
850,"  protected void <extra_id_0>(Object pendingWrite, SelectionKey key) throws IOException {    var pendingBuffer = (ByteBuffer) pendingWrite;    ((SocketChannel) key.channel()).write(pendingBuffer);  }",doWrite
768,  public void <extra_id_0>(Royalty r) {    r.receiveCompliments();  }  /**   * Check if we will be hanged.   */,giveCompliments
3664,"  void <extra_id_0>() {    //Arrange    var cash = new Cash(5);    //Act    cash.plus(6);    var result = cash.minus(3);    //Assert    assertTrue(result);    assertEquals(8, cash.count());  }",testUpdate
2599,"  static List<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new ArcherCommand(), ""Displaying archers""},        new Object[]{new CatapultCommand(), ""Displaying catapults""},        new Object[]{new UnknownCommand(), ""Error 500""}    );  }  /**   * @param command        The command that's been tested   * @param displayMessage The expected display message   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
1470,  void <extra_id_0>() {    albumPage.navigateToPage();  }  @Test,setUp
3712,"  public void <extra_id_0>() {    MongoCredential mongoCredential = MongoCredential.createCredential(MONGO_USER,                    DATABASE_NAME,                    MONGO_PASSWORD.toCharArray());    MongoClientOptions options = MongoClientOptions.builder().build();    client = new MongoClient(new ServerAddress(), mongoCredential, options);    db = client.getDatabase(DATABASE_NAME);  }  @Override",connect
1679,  void <extra_id_0>();  /**   * Closes the view.   */,open
5,"  void <extra_id_0>() throws Exception {    final var outputPath = Files.createFile(testFolder.resolve(""outputFile2""));    RainbowFishSerializer.writeV2(V2, outputPath.toString());    final var fish = RainbowFishSerializer.readV1(outputPath.toString());    assertNotSame(V2, fish);    assertEquals(V2.getName(), fish.getName());    assertEquals(V2.getAge(), fish.getAge());    assertEquals(V2.getLengthMeters(), fish.getLengthMeters());    assertEquals(V2.getWeightTons(), fish.getWeightTons());  }",testWriteV2ReadV1
1598,  public synchronized void <extra_id_0>(Request request) {    if (lastServedId >= SERVERS.size()) {      lastServedId = 0;    }    var server = SERVERS.get(lastServedId++);    server.serve(request);  },serverRequest
1260,"  public void <extra_id_0>(Wizard wizard) {    if (numWizards < NUM_WIZARDS_ALLOWED) {      tower.enter(wizard);      numWizards++;    } else {      LOGGER.info(""{} is not allowed to enter!"", wizard);    }  }",enter
2410,  void <extra_id_0>() {    final var goldCoin = CoinFactory.getCoin(CoinType.GOLD);    assertTrue(goldCoin instanceof GoldCoin);  },shouldReturnGoldCoinInstance
1636,"  void <extra_id_0>() {    bank.transfer(0, 1, 1000);    int[] accounts = bank.getAccounts();    assertEquals(0, accounts[0]);    assertEquals(2000, accounts[1]);  }  @Test",TransferMethodHaveToTransferAmountFromAnAccountToOtherAccount
1031,  void <extra_id_0>() {    assertDoesNotThrow(() -> SagaApplication.main(new String[]{}));  },shouldExecuteWithoutException
301,"  protected String <extra_id_0>() {    return ""shop keeper"";  }  @Override",pickTarget
2546,"  void <extra_id_0>() {    var weapon = factory.create(WeaponType.SPEAR);    verifyWeapon(weapon, Spear.class);  }  /**   * Testing {@link WeaponFactory} to produce a AXE asserting that the Weapon is an instance of   * {@link Axe}   */  @Test",testSpearWeapon
714,    public ReceiptDto <extra_id_0>(Product item) {      return new ReceiptDto(item.getPrice());    }  }  /**   * Account info.   */,purchase
2498,"  public Optional<E> <extra_id_0>() {    var resultIterator = last(1).iterator();    return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();  }  /**   * Can be used to collect objects from the Iterable. Is a terminating operation. This operation is   * memory intensive, because the contents of this Iterable are collected into a List, when the   * next object is requested.   *   * @param count defines the number of objects to return   * @return the same FluentIterable with a collection decimated to a maximum of 'count' last   *     objects   */  @Override",last
314,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
207,  public void <extra_id_0>(long version) {    this.version = version;  },setVersion
871,"  private void <extra_id_0>(SelectionKey key, Object readObject) {    dispatcher.onChannelReadEvent((AbstractNioChannel) key.attachment(), readObject, key);  }",dispatchReadEvent
2173,  public void <extra_id_0>(T valToInsert) {    var parent = getParentNodeOfValueToBeInserted(valToInsert);    parent.insertNewChild(valToInsert);  }  /**   * Fetch the Parent TreeNode for a given value to insert into the BST.   *   * @param valToInsert Value of the new TreeNode to be inserted   * @return Parent TreeNode of `valToInsert`   */,insert
1583,  public static FileLoggerModule <extra_id_0>() {    if (FileLoggerModule.singleton == null) {      FileLoggerModule.singleton = new FileLoggerModule();    }    return FileLoggerModule.singleton;  }  /**   * Following method performs the initialization.   *   * @throws FileNotFoundException if program is not able to find log files (output.txt and   *                               error.txt)   */,getSingleton
1287,"  private void <extra_id_0>() {    countLines().thenAccept(        count -> {          LOGGER.info(""Line count is: {}"", count);          taskCompleted();        }    );  }  /*   * Calculate the character frequency of a file and when that promise is fulfilled,   * then promise to apply function to calculate lowest character frequency.   */",calculateLineCount
3391,  public static void <extra_id_0>(String[] args) throws Exception {    var aqfc = new AppQueueFailCases();    //aqfc.queuePaymentTaskDatabaseUnavailableCase();    //aqfc.queueMessageTaskDatabaseUnavailableCase();    //aqfc.queueEmployeeDbTaskDatabaseUnavailableCase();    aqfc.queueSuccessCase();  },main
2658,  public abstract void <extra_id_0>();,process
2934,  public List<CustomerDto> <extra_id_0>() {    return customers;  }  /**   * Save new customer.   *   * @param customer save new customer to list.   */,getAllCustomers
77,"  void <extra_id_0>() {    context.put(UnitActions.INSERT.getActionValue(), List.of(weapon1));    context.put(UnitActions.MODIFY.getActionValue(), List.of(weapon1));    armsDealer.commit();    verify(weaponDatabase, never()).delete(weapon1);  }",shouldNotDeleteFromDbIfNotRegisteredStudentsToBeCommitted
2666,"  private void <extra_id_0>(BigDecimal money, boolean realTime) {    depositMoney(money);    AccountAggregate.putAccount(this);    if (realTime) {      LOGGER.info(MSG);    }  }",handleDeposit
2839,"  void <extra_id_0>() {    testCollision(        new SpaceStationMir(1, 1, 3, 4),        true, false,        false, false    );  }",testCollideSpaceStationMir
3619,"  public static void <extra_id_0>(String[] args) throws Exception {    // construct a new executor that will run async tasks    var executor = new ThreadAsyncExecutor();    // start few async tasks with varying processing times, two last with callback handlers    final var asyncResult1 = executor.startProcess(lazyval(10, 500));    final var asyncResult2 = executor.startProcess(lazyval(""test"", 300));    final var asyncResult3 = executor.startProcess(lazyval(50L, 700));    final var asyncResult4 = executor.startProcess(lazyval(20, 400),        callback(""Deploying lunar rover""));    final var asyncResult5 =        executor.startProcess(lazyval(""callback"", 600), callback(""Deploying lunar rover""));    // emulate processing in the current thread while async tasks are running in their own threads    Thread.sleep(350); // Oh boy, we are working hard here    log(""Mission command is sipping coffee"");    // wait for completion of the tasks    final var result1 = executor.endProcess(asyncResult1);    final var result2 = executor.endProcess(asyncResult2);    final var result3 = executor.endProcess(asyncResult3);    asyncResult4.await();    asyncResult5.await();    // log the results of the tasks, callbacks log immediately when complete    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result1));    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result2));    log(String.format(ROCKET_LAUNCH_LOG_PATTERN, result3));  }  /**   * Creates a callable that lazily evaluates to given value with artificial delay.   *   * @param value       value to evaluate   * @param delayMillis artificial delay in milliseconds   * @return new callable for lazy evaluation   */",main
1765,  String <extra_id_0>();,getName
2228,  protected void <extra_id_0>(Long elapsedTime) {    controller.moveBullet(0.5f * elapsedTime / 1000);  },update
3113,"  public static void <extra_id_0>(String[] args) {    Converter<UserDto, User> userConverter = new UserConverter();    UserDto dtoUser = new UserDto(""John"", ""Doe"", true, ""whatever[at]wherever.com"");    User user = userConverter.convertFromDto(dtoUser);    LOGGER.info(""Entity converted from DTO: {}"", user);    var users = List.of(        new User(""Camile"", ""Tough"", false, ""124sad""),        new User(""Marti"", ""Luther"", true, ""42309fd""),        new User(""Kate"", ""Smith"", true, ""if0243"")    );    LOGGER.info(""Domain entities:"");    users.stream().map(User::toString).forEach(LOGGER::info);    LOGGER.info(""DTO entities converted from domain:"");    List<UserDto> dtoEntities = userConverter.createFromEntities(users);    dtoEntities.stream().map(UserDto::toString).forEach(LOGGER::info);  }",main
2484,  public void <extra_id_0>(Consumer<? super E> action) {    iterable.forEach(action);  }  @Override,forEach
3428,"    private Commander <extra_id_0>(boolean includeException, boolean includeDBException, Exception e) {        var l = includeDBException ? new DatabaseUnavailableException() : e;        PaymentService paymentService;        ShippingService shippingService;        MessagingService messagingService;        EmployeeHandle employeeHandle;        if (includeException) {            paymentService = new PaymentService                    (null, l);            shippingService = new ShippingService(null, l);            messagingService = new MessagingService(null, l);            employeeHandle = new EmployeeHandle                    (null, l);        } else {            paymentService = new PaymentService                    (null);            shippingService = new ShippingService(null);            messagingService = new MessagingService(null);            employeeHandle = new EmployeeHandle                    (null);        }        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, null, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }    @Test",buildCommanderObjectWithoutDB
1269,"  public Promise<T> <extra_id_0>(Consumer<? super Throwable> exceptionHandler) {    this.exceptionHandler = exceptionHandler;    return this;  }  /**   * Returns a new promise that, when this promise is fulfilled normally, is fulfilled with result   * of this promise as argument to the function provided.   *   * @param func function to be executed.   * @return a new promise.   */",onError
521,  protected int <extra_id_0>(Data data) {    var shardCount = shardMap.size();    var hash = data.getKey() % shardCount;    return hash == 0 ? hash + shardCount : hash;  },allocateShard
10,"  public static void <extra_id_0>(String[] args) throws IOException, ClassNotFoundException {    // Write V1    var fishV1 = new RainbowFish(""Zed"", 10, 11, 12);    LOGGER.info(""fishV1 name={} age={} length={} weight={}"", fishV1.getName(),        fishV1.getAge(), fishV1.getLengthMeters(), fishV1.getWeightTons());    RainbowFishSerializer.writeV1(fishV1, ""fish1.out"");    // Read V1    var deserializedRainbowFishV1 = RainbowFishSerializer.readV1(""fish1.out"");    LOGGER.info(""deserializedFishV1 name={} age={} length={} weight={}"",        deserializedRainbowFishV1.getName(), deserializedRainbowFishV1.getAge(),        deserializedRainbowFishV1.getLengthMeters(), deserializedRainbowFishV1.getWeightTons());    // Write V2    var fishV2 = new RainbowFishV2(""Scar"", 5, 12, 15, true, true, true);    LOGGER.info(        ""fishV2 name={} age={} length={} weight={} sleeping={} hungry={} angry={}"",        fishV2.getName(), fishV2.getAge(), fishV2.getLengthMeters(), fishV2.getWeightTons(),        fishV2.isHungry(), fishV2.isAngry(), fishV2.isSleeping());    RainbowFishSerializer.writeV2(fishV2, ""fish2.out"");    // Read V2 with V1 method    var deserializedFishV2 = RainbowFishSerializer.readV1(""fish2.out"");    LOGGER.info(""deserializedFishV2 name={} age={} length={} weight={}"",        deserializedFishV2.getName(), deserializedFishV2.getAge(),        deserializedFishV2.getLengthMeters(), deserializedFishV2.getWeightTons());  }",main
920,"  public static void <extra_id_0>(String[] args) {    var executeService = Executors.newFixedThreadPool(10);    var lock = new ReaderWriterLock();    // Start writers    for (var i = 0; i < 5; i++) {      var writingTime = ThreadLocalRandom.current().nextLong(5000);      executeService.submit(new Writer(""Writer "" + i, lock.writeLock(), writingTime));    }    LOGGER.info(""Writers added..."");    // Start readers    for (var i = 0; i < 5; i++) {      var readingTime = ThreadLocalRandom.current().nextLong(10);      executeService.submit(new Reader(""Reader "" + i, lock.readLock(), readingTime));    }    LOGGER.info(""Readers added..."");    try {      Thread.sleep(5000L);    } catch (InterruptedException e) {      LOGGER.error(""Error sleeping before adding more readers"", e);      Thread.currentThread().interrupt();    }    // Start readers    for (var i = 6; i < 10; i++) {      var readingTime = ThreadLocalRandom.current().nextLong(10);      executeService.submit(new Reader(""Reader "" + i, lock.readLock(), readingTime));    }    LOGGER.info(""More readers added..."");    // In the system console, it can see that the read operations are executed concurrently while    // write operations are exclusive.    executeService.shutdown();    try {      executeService.awaitTermination(5, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"", e);      Thread.currentThread().interrupt();    }  }",main
2305,  public static LotteryNumbers <extra_id_0>(Set<Integer> givenNumbers) {    return new LotteryNumbers(givenNumbers);  }  /**   * Get numbers.   *   * @return lottery numbers   */,create
1868,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    }  }},getLastMessage
400,  void <extra_id_0>();,onEnterState
28,"  void <extra_id_0>() {    final var ballItem = new BallItem();    final var ballThread = mock(BallThread.class);    ballItem.setTwin(ballThread);    ballItem.move();    assertTrue(appender.logContains(""move""));    verifyNoMoreInteractions(ballThread);    assertEquals(1, appender.getLogSize());  }  /**   * Logging Appender Implementation   */",testMove
146,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);    }  },deleteSchema
2120,"    public static void <extra_id_0>(String[] args) {        SpringApplication.run(LayersApp.class, args);    }",main
348,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Merlin"")        .wizardClass(""alchemist"")        .noSpell()        .build();    assertEquals(""Merlin"", character.getName());    assertEquals(""alchemist"", character.getWizardClass());    assertNull(character.getSpell());    assertNull(character.getAbilities());    assertNotNull(character.toString());  }  /**   * Build a new wizard {@link Character} and verify if it has the expected attributes   */  @Test",testBuildPoorWizard
1652,"  void <extra_id_0>() {    final var model = mock(GiantModel.class);    final var view = mock(GiantView.class);    final var controller = new GiantController(model, view);    verifyNoMoreInteractions(model, view);    for (final var health : Health.values()) {      controller.setHealth(health);      verify(model).setHealth(health);      verifyNoMoreInteractions(view);    }    controller.getHealth();    //noinspection ResultOfMethodCallIgnored    verify(model).getHealth();    verifyNoMoreInteractions(model, view);  }  /**   * Verify if the controller passes the fatigue level through to the model and vice versa   */  @Test",testSetHealth
298,  protected abstract void <extra_id_0>(String target);,confuseTarget
574,  public void <extra_id_0>(String name) {    this.name = name;  },setName
73,"  void <extra_id_0>() {    var weaponRepository = new ArmsDealer(null, weaponDatabase);    weaponRepository.commit();    verifyNoMoreInteractions(weaponDatabase);  }  @Test",shouldNotWriteToDbIfContextIsNull
2387,"  void <extra_id_0>(){    PersonFinder personFinder = new PersonFinder();    // init database for our personFinder    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    personFinder.setDb(db);    Assertions.assertThrows(IdNotFoundException.class,()->personFinder.getPerson(1));    // Dummy persons    Person person1 = new Person(1, ""John"", 27304159);    Person person2 = new Person(2, ""Thomas"", 42273631);    Person person3 = new Person(3, ""Arthur"", 27489171);    Person person4 = new Person(4, ""Finn"", 20499078);    Person person5 = new Person(5, ""Michael"", 40599078);    db.insert(person1);    db.insert(person2);    db.insert(person3);    db.insert(person4);    db.insert(person5);    personFinder.setDb(db);    // Assure that the database has been updated.    Assertions.assertEquals(person4,personFinder.getPerson(4),""Find returns incorrect record"");    // Assure key is in DB now.    Assertions.assertDoesNotThrow(()->personFinder.getPerson(1));    // Assure key not in DB.    Assertions.assertThrows(IdNotFoundException.class,()->personFinder.getPerson(6));  }",personNotFoundInDB
127,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Start calculating war casualties"");    var result = loop(10, 1).result();    LOGGER.info(""The number of orcs perished in the war: {}"", result);  }  /**   * Manager for pattern. Define it with a factorial function.   */",main
957,  public JpaTransactionManager <extra_id_0>() {    var transactionManager = new JpaTransactionManager();    transactionManager.setEntityManagerFactory(entityManagerFactory().getObject());    return transactionManager;  }  /**   * Program entry point.   *   * @param args command line args   */,transactionManager
354,    public void <extra_id_0>() {      dragonSlayingStrategy.execute();    }  }},execute
2944,      public String <extra_id_0>() {        return supplier;      },getSupplier
3819,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
2941,      public Create <extra_id_0>(Double price) {        this.price = price;        return this;      }      @Override,setPrice
690,"  void <extra_id_0>(Creature testedCreature, String name, Size size, Movement movement) {    assertEquals(movement, testedCreature.getMovement());  }  @ParameterizedTest  @MethodSource(""dataProvider"")",testGetMovement
571,  public Long <extra_id_0>() {    return id;  },getId
3542,"  void <extra_id_0>() {    var delayedService = new DelayedRemoteService(System.nanoTime(), 2);    var delayedServiceCircuitBreaker = new DefaultCircuitBreaker(delayedService, 3000,        1,        2 * 1000 * 1000 * 1000);    var monitoringService = new MonitoringService(delayedServiceCircuitBreaker,null);    //Set time as current time as initially server fails    var response = monitoringService.delayedServiceResponse();    assertEquals(response, ""Delayed service is down"");  }  @Test",testDelayedRemoteResponseFailure
1042,"  public static void <extra_id_0>(String[] args) {    var sagaOrchestrator = new SagaOrchestrator(newSaga(), serviceDiscovery());    Saga.Result goodOrder = sagaOrchestrator.execute(""good_order"");    Saga.Result badOrder = sagaOrchestrator.execute(""bad_order"");    Saga.Result crashedOrder = sagaOrchestrator.execute(""crashed_order"");    LOGGER.info(""orders: goodOrder is {}, badOrder is {},crashedOrder is {}"",        goodOrder, badOrder, crashedOrder);  }",main
1461,  public synchronized void <extra_id_0>(T instance) {    inUse.remove(instance);    available.add(instance);  }  @Override,checkIn
1951,  protected void <extra_id_0>() {    // Not used in Ring instance.  }  @Override,handleLeaderInvokeMessage
1733,  void <extra_id_0>() {    List<CalculatorAction> actions = List.of(        new SetVariableCalculatorAction(10.0)    );    CalculatorModel model = modelAfterExecutingActions(actions);    assert model.getVariable() == 10.0 && model.getOutput() == 0;  }  @Test,testSetVariable
2081,  void <extra_id_0>() {    final var exception = new CakeBakingException();    assertNull(exception.getMessage());    assertNull(exception.getCause());  }  @Test,testConstructor
567,"  public Wizard <extra_id_0>(String name) {    Transaction tx = null;    Wizard result;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();      CriteriaQuery<Wizard> builderQuery = criteriaBuilder.createQuery(Wizard.class);      Root<Wizard> root = builderQuery.from(Wizard.class);      builderQuery.select(root).where(criteriaBuilder.equal(root.get(""name""), name));      Query<Wizard> query = session.createQuery(builderQuery);      result = query.uniqueResult();      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  }",findByName
3085,  public void <extra_id_0>() {    tobacco.smoke(this);  },smoke
332,    BuildStep <extra_id_0>();,noMoreAbilities
1658,"  void <extra_id_0>() {    final var view = new GiantView();    final var model = mock(GiantModel.class);    view.displayGiant(model);    assertEquals(model.toString(), appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }  /**   * Logging Appender Implementation   */",testDisplayGiant
659,"  public AbstractSelector<T> <extra_id_0>(AbstractSelector<T> other) {    return new ConjunctionSelector<>(this, other);  }",and
1725,"  void <extra_id_0>() {    stub.setFileName(""etc/data/test.txt"");    presenter.start();    presenter.fileNameChanged();    presenter.confirmed();    assertTrue(loader.isLoaded());    assertTrue(stub.dataDisplayed());  }  /**   * Tests if the view closes after cancellation.   */  @Test",fileConfirmationWhenFileExists
199,"  public static void <extra_id_0>(String[] args) throws      BookDuplicateException,      BookNotFoundException,      VersionMismatchException {    var bookId = 1;    var bookRepository = new BookRepository();    var book = new Book();    book.setId(bookId);    bookRepository.add(book); // adding a book with empty title and author    LOGGER.info(""An empty book with version {} was added to repository"", book.getVersion());    // Alice and Bob took the book concurrently    final var aliceBook = bookRepository.get(bookId);    final var bobBook = bookRepository.get(bookId);    aliceBook.setTitle(""Kama Sutra""); // Alice has updated book title    bookRepository.update(aliceBook); // and successfully saved book in database    LOGGER.info(""Alice updates the book with new version {}"", aliceBook.getVersion());    // now Bob has the stale version of the book with empty title and version = 0    // while actual book in database has filled title and version = 1    bobBook.setAuthor(""Vatsyayana Mallanaga""); // Bob updates the author    try {      LOGGER.info(""Bob tries to update the book with his version {}"", bobBook.getVersion());      bookRepository.update(bobBook); // Bob tries to save his book to database    } catch (VersionMismatchException e) {      // Bob update fails, and book in repository remained untouchable      LOGGER.info(""Exception: {}"", e.getMessage());      // Now Bob should reread actual book from repository, do his changes again and save again    }  }",main
952,"    public Predicate <extra_id_0>(Root<Person> root, CriteriaQuery<?> query, CriteriaBuilder cb) {      return cb.between(root.get(""age""), from, to);    }  }  /**   * Name specification.   */  public static class NameEqualSpec implements Specification<Person> {    public final String name;    public NameEqualSpec(String name) {      this.name = name;    }    /**     * Get predicate.     */    public Predicate toPredicate(Root<Person> root, CriteriaQuery<?> query, CriteriaBuilder cb) {      return cb.equal(root.get(""name""), this.name);    }  }}",toPredicate
1890,"  Heavy <extra_id_0>() throws Exception {    final var holderField = HolderThreadSafe.class.getDeclaredField(""heavy"");    holderField.setAccessible(true);    return (Heavy) holderField.get(this.holder);  }  @Override",getInternalHeavyValue
3221,  public String[] <extra_id_0>() {    return console.getData();  },getData
2555,"  public String <extra_id_0>() {    return ""Axe"";  }",toString
3261,"  public void <extra_id_0>(String oldUsername, String newUsername) {    var author = getAuthorByUsername(oldUsername);    author.setUsername(newUsername);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.update(author);      session.getTransaction().commit();    }  }  @Override",authorUsernameUpdated
1402,  void <extra_id_0>() {    appender = new InMemoryAppender(GenWeather.class);  }  @AfterEach,setUp
3508,"  public String <extra_id_0>() {    return ""Orc commander"";  }",name
873,"  public void <extra_id_0>(SelectionKey key, int interestedOps) {    pendingCommands.add(new ChangeKeyOpsCommand(key, interestedOps));    selector.wakeup();  }  /**   * A command that changes the interested operations of the key provided.   */",changeOps
2672,"  public static void <extra_id_0>(String[] args) {    var eventProcessor = new DomainEventProcessor(new JsonFileJournal());    LOGGER.info(""Running the system first time............"");    eventProcessor.reset();    LOGGER.info(""Creating the accounts............"");    eventProcessor.process(new AccountCreateEvent(        0, new Date().getTime(), ACCOUNT_OF_DAENERYS, ""Daenerys Targaryen""));    eventProcessor.process(new AccountCreateEvent(        1, new Date().getTime(), ACCOUNT_OF_JON, ""Jon Snow""));    LOGGER.info(""Do some money operations............"");    eventProcessor.process(new MoneyDepositEvent(        2, new Date().getTime(), ACCOUNT_OF_DAENERYS, new BigDecimal(""100000"")));    eventProcessor.process(new MoneyDepositEvent(        3, new Date().getTime(), ACCOUNT_OF_JON, new BigDecimal(""100"")));    eventProcessor.process(new MoneyTransferEvent(        4, new Date().getTime(), new BigDecimal(""10000""), ACCOUNT_OF_DAENERYS,        ACCOUNT_OF_JON));    LOGGER.info(""...............State:............"");    LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS).toString());    LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_JON).toString());    LOGGER.info(""At that point system had a shut down, state in memory is cleared............"");    AccountAggregate.resetState();    LOGGER.info(""Recover the system by the events in journal file............"");    eventProcessor = new DomainEventProcessor(new JsonFileJournal());    eventProcessor.recover();    LOGGER.info(""...............Recovered State:............"");    LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS).toString());    LOGGER.info(AccountAggregate.getAccount(ACCOUNT_OF_JON).toString());  }",main
3216,"  public void <extra_id_0>(HttpServletRequest req, HttpServletResponse resp)          throws ServletException, IOException {    resp.setContentType(CONTENT_TYPE);    try (PrintWriter out = resp.getWriter()) {      out.println(msgPartOne + "" Put "" + msgPartTwo);    }  }",doPut
2035,"  void <extra_id_0>() {    // Mock the com.sun.management.OperatingSystemMXBean    mockOsBean = Mockito.mock(com.sun.management.OperatingSystemMXBean.class);    cpuHealthIndicator = new CpuHealthIndicator();    setOperatingSystemMXBean(cpuHealthIndicator, mockOsBean);  }  /**   * Reflection method to set the private osBean in CpuHealthIndicator.   *   * @param indicator The CpuHealthIndicator instance to set the osBean for.   * @param osBean The OperatingSystemMXBean to set.   */",setUp
3431,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObject(false);            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrder2
2560,"  void <extra_id_0>() {    Consumer consumer = new Consumer(10L);    SquareNumberRequest squareNumberRequest = new SquareNumberRequest(5L);    squareNumberRequest.delayedSquaring(consumer);    Assertions.assertEquals(35, consumer.getSumOfSquaredNumbers().get());  }",delayedSquaringTest
336,    public WeaponStep <extra_id_0>(String fighterClass) {      this.fighterClass = fighterClass;      return this;    }    @Override,fighterClass
2088,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
1737,"  void <extra_id_0>() {    List<CalculatorAction> actions = List.of(        new SetVariableCalculatorAction(2.0),        new AdditionCalculatorAction(),        new AdditionCalculatorAction(),        new SetVariableCalculatorAction(2.0),        new DivisionCalculatorAction()    );    CalculatorModel model = modelAfterExecutingActions(actions);    assert model.getVariable() == 2.0 && model.getOutput() == 2.0;  }",testDivision
511,"  public boolean <extra_id_0>(final Shard shard) {    var shardId = shard.getId();    if (!shardMap.containsKey(shardId)) {      shardMap.put(shardId, shard);      return true;    } else {      return false;    }  }  /**   * Remove a shard instance by provided Id.   *   * @param shardId Id of shard instance to remove.   * @return {@code true} if removed. {@code false} if the shardId is not existed.   */",addNewShard
2801,"  public boolean <extra_id_0>(Order order) {    try {      conn.setAutoCommit(false);      insertIntoOrders.setString(1, order.getItem());      insertIntoOrders.setString(2, order.getOrderedBy());      var address = order.getShippingAddress();      insertIntoOrders.setString(3, address.getCity());      insertIntoOrders.setString(4, address.getState());      insertIntoOrders.setString(5, address.getPincode());      var affectedRows = insertIntoOrders.executeUpdate();      if (affectedRows == 1) {        var rs = insertIntoOrders.getGeneratedKeys();        rs.last();        var insertedAddress = new ShippingAddress(address.getCity(), address.getState(), address.getPincode());        var insertedOrder = new Order(rs.getInt(1), order.getItem(), order.getOrderedBy(),            insertedAddress);         conn.commit();        LOGGER.info(""Inserted: {}"", insertedOrder);      } else {        conn.rollback();      }    } catch (Exception e) {      LOGGER.error(e.getLocalizedMessage());    } finally {      try {        conn.setAutoCommit(true);      } catch (SQLException e) {        LOGGER.error(e.getLocalizedMessage());      }    }    return true;  }  @Override",insertOrder
1291,"  private Promise<String> <extra_id_0>(String urlString) {    return new Promise<String>()        .fulfillInAsync(            () -> Utility.downloadFile(urlString), executor)        .onError(            throwable -> {              throwable.printStackTrace();              taskCompleted();            }        );  }",download
801,  public double <extra_id_0>(double amount) {    return amount * TAX_PERCENTAGE / 100.0;  },calculate
3064,    void <extra_id_0>() throws SQLException {        TestUtils.deleteSchema(dataSource);    }    @Test,tearDown
3774,  public long <extra_id_0>(int value) {    return safeCall(value);  },doRemoteFunction
2324,  public MongoClient <extra_id_0>() {    return mongoClient;  }  /**   * Get mongo database.   *   * @return mongo database   */,getMongoClient
322,"  public static void <extra_id_0>(String[] args) {    var warrior = CharacterStepBuilder        .newBuilder()        .name(""Amberjill"")        .fighterClass(""Paladin"")        .withWeapon(""Sword"")        .noAbilities()        .build();    LOGGER.info(warrior.toString());    var mage = CharacterStepBuilder        .newBuilder()        .name(""Riobard"")        .wizardClass(""Sorcerer"")        .withSpell(""Fireball"")        .withAbility(""Fire Aura"")        .withAbility(""Teleport"")        .noMoreAbilities()        .build();    LOGGER.info(mage.toString());    var thief = CharacterStepBuilder        .newBuilder()        .name(""Desmond"")        .fighterClass(""Rogue"")        .noWeapon()        .build();    LOGGER.info(thief.toString());  }",main
1112,  public int <extra_id_0>(Message o) {    return priority - o.priority;  }  @Override,compareTo
3423,"    private Commander <extra_id_0>() {        PaymentService paymentService = new PaymentService                (new PaymentDatabase());        var shippingService = new ShippingService(new ShippingDatabase());        var messagingService = new MessagingService(new MessagingDatabase(), new IllegalStateException());        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new IllegalStateException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new IllegalStateException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectNoPaymentException2
378,  public int <extra_id_0>() {    return id;  },getId
1965,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteMetaMappingWithoutException
3377,"  public void <extra_id_0>(List<Exception> list, T obj) {    do {      try {        op.operation(list);        return;      } catch (Exception e) {        this.errors.add(e);        if (this.attempts.incrementAndGet() >= this.maxAttempts || !this.test.test(e)) {          this.handleError.handleIssue(obj, e);          return; //return here...dont go further        }        try {          long testDelay =              (long) Math.pow(2, this.attempts.intValue()) * 1000 + RANDOM.nextInt(1000);          long delay = Math.min(testDelay, this.maxDelay);          Thread.sleep(delay);        } catch (InterruptedException f) {          //ignore        }      }    } while (true);  }",perform
240,"  void <extra_id_0>() {    var heroStatA = HeroStat.valueOf(3, 9, 2);    var heroStatB = HeroStat.valueOf(3, 9, 2);    assertEquals(heroStatA, heroStatB);  }  /**   * The toString() for two equal values must be the same. For two non-equal values it must be   * different.   */  @Test",testEquals
3015,"  public void <extra_id_0>() {    Arrays.fill(pixels, Pixel.WHITE);  }  @Override",clearAll
1663,"  void <extra_id_0>() {    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);    assertEquals(Fatigue.ALERT, model.getFatigue());    var messageFormat = ""The giant looks healthy, %s and saturated."";    for (final var fatigue : Fatigue.values()) {      model.setFatigue(fatigue);      assertEquals(fatigue, model.getFatigue());      assertEquals(String.format(messageFormat, fatigue), model.toString());    }  }  /**   * Verify if the nourishment level is set properly though the constructor and setter   */  @Test",testSetFatigue
2724,"  void <extra_id_0>() {    Arrays.stream(Weekday.values()).forEach(weekday -> {      final String toString = weekday.toString();      assertNotNull(toString);      assertEquals(weekday.name(), toString.toUpperCase());    });  }",testToString
3613,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var asyncResult = executor.startProcess(null, null);      assertNotNull(          asyncResult,          ""The AsyncResult should not be 'null', even though the task and callback were 'null'.""      );      asyncResult.await(); // Prevent timing issues, and wait until the result is available      assertTrue(asyncResult.isCompleted());      try {        asyncResult.getValue();        fail(""Expected ExecutionException with NPE as cause"");      } catch (final ExecutionException e) {        assertNotNull(e.getMessage());        assertNotNull(e.getCause());        assertEquals(NullPointerException.class, e.getCause().getClass());      }    });  }",testNullTaskWithNullCallback
2680,"  public AudioInputStream <extra_id_0>(String filePath)      throws UnsupportedAudioFileException, IOException {    return AudioSystem.getAudioInputStream(new File(filePath).getAbsoluteFile());  }  /**   * Returns with the message array of the queue.   *   * @return PlayMessage[]   */",getAudioStream
16,"  public void <extra_id_0>() {    LOGGER.info(""move"");  }  @Override",move
1425,"  public void <extra_id_0>(GenWeather weather, WeatherType weatherType) {    LOGGER.info(""The orcs are facing "" + weatherType.getDescription() + "" weather now"");  }",update
2723,  void <extra_id_0>() {    Arrays.stream(Event.values()).map(Event::toString).forEach(toString -> {      assertNotNull(toString);      assertFalse(toString.trim().isEmpty());    });  },testToString
1654,"  void <extra_id_0>() {    final var model = mock(GiantModel.class);    final var view = mock(GiantView.class);    final var controller = new GiantController(model, view);    verifyNoMoreInteractions(model, view);    for (final var nourishment : Nourishment.values()) {      controller.setNourishment(nourishment);      verify(model).setNourishment(nourishment);      verifyNoMoreInteractions(view);    }    controller.getNourishment();    //noinspection ResultOfMethodCallIgnored    verify(model).getNourishment();    verifyNoMoreInteractions(model, view);  }  @Test",testSetNourishment
1729,"    void <extra_id_0>() {      assertDoesNotThrow(() ->{        FileSelectorJframe jFrame = new FileSelectorJframe();        ActionEvent action = new ActionEvent(""dummy"", 1, ""dummy"");        jFrame.actionPerformed(action);      });    }",testActionEvent
3079,"  void <extra_id_0>() throws SQLException {    customerDao.save(customer);    try (var connection = dataSource.getConnection();        var statement = connection.createStatement();        ResultSet rs = statement.executeQuery(SELECT_CUSTOMERS_SQL)) {      assertTrue(rs.next());      assertEquals(customer.getName(), rs.getString(""name""));      assertEquals(customer.getMoney(), Money.of(USD, rs.getBigDecimal(""money"")));    }    assertThrows(SQLException.class, () -> customerDao.save(customer));  }  @Test",shouldSaveCustomer
1503,"  public boolean <extra_id_0>() {    return ""Album Page"".equals(page.getTitleText());  }  /**   * Sets the album title input text field.   *   * @param albumTitle the new album title value to set   * @return {@link AlbumPage}   */",isAt
2604,"  void <extra_id_0>(View view, String displayMessage) {    assertEquals(0, appender.getLogSize());    view.display();    assertEquals(displayMessage, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testDisplay
2223,  public void <extra_id_0>(float offset) {    var currentPosition = bullet.getPosition();    bullet.setPosition(currentPosition + offset);  }  /**   * Get current position of the bullet.   *   * @return position of bullet   */,moveBullet
2760,"  public int <extra_id_0>(int eventTime) throws MaxNumOfEventsAllowedException,      LongRunningEventException {    return createEvent(eventTime, false);  }",createAsync
2300,"  void <extra_id_0>(PlayerDetails details, int prizeAmount);",prizeError
2102,    public void <extra_id_0>() {        cakeBakingService.getAllCakes().forEach(cake -> LOGGER.info(cake.toString()));    },render
863,"  public void <extra_id_0>() {    reactorMain.execute(() -> {      try {        LOGGER.info(""Reactor started, waiting for events..."");        eventLoop();      } catch (IOException e) {        LOGGER.error(""exception in event loop"", e);      }    });  }  /**   * Stops the reactor and related resources such as dispatcher.   *   * @throws InterruptedException if interrupted while stopping the reactor.   * @throws IOException          if any I/O error occurs.   */",start
3567,"  public String <extra_id_0>() {    LOGGER.info(""Successfully found price info"");    return ""20"";  }",getPrice
3764,"  void <extra_id_0>() {    var remoteService = new RemoteService(new StaticRandomProvider(0.21));    var result = remoteService.doRemoteFunction(10);    assertEquals(RemoteServiceStatus.FAILURE.getRemoteServiceStatusValue(), result);  }  @Test",testFailedCall
1837,  private static void <extra_id_0>(TaskSet taskSet) throws InterruptedException {    var rand = new SecureRandom();    for (var i = 0; i < 5; i++) {      var time = Math.abs(rand.nextInt(1000));      taskSet.addTask(new Task(time));    }  },addTasks
1075,  public static Saga <extra_id_0>() {    return new Saga();  }  /**   * get resuzlt of saga.   *   * @return result of saga @see {@link SagaResult}   */,create
2725,  void <extra_id_0>() {    appender = new InMemoryAppender(KingJoffrey.class);  }  @AfterEach,setUp
3701,  public void <extra_id_0>() {    head = null;    end = null;    cache.clear();  }  /**   * Returns cache data in list form.   *   * @return {@link List}   */,clear
2414,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
1188,"  public String <extra_id_0>() {    return ""Orcish wolf attacks with "" + weapon;  }",toString
1453,"  public Card <extra_id_0>(Card obj, long id) {    float additionalSum = obj.getSum();    Card cardToUpdate = cardJpaRepository.findById(id);    int initialVersion = cardToUpdate.getVersion();    float resultSum = cardToUpdate.getSum() + additionalSum;    cardToUpdate.setSum(resultSum);    //Maybe more complex business-logic e.g. HTTP-requests and so on    if (initialVersion != cardJpaRepository.getEntityVersionById(id)) {      String exMessage =          String.format(""Entity with id %s were updated in another transaction"", id);      throw new ApplicationException(exMessage);    }    cardJpaRepository.update(cardToUpdate);    return cardToUpdate;  }",doUpdate
2929,"  public void <extra_id_0>() {    LOGGER.info(""Start Render Game Component "");    IntStream.range(0, numEntities).forEach(i -> renderComponents[i] = new RenderComponent());  }  /**   * render component.   */",start
3670,"  public UserAccount <extra_id_0>(final String userId) {    LOGGER.info(""Trying to find {} in cache"", userId);    if (cachingPolicy == CachingPolicy.THROUGH            || cachingPolicy == CachingPolicy.AROUND) {      return cacheStore.readThrough(userId);    } else if (cachingPolicy == CachingPolicy.BEHIND) {      return cacheStore.readThroughWithWriteBackPolicy(userId);    } else if (cachingPolicy == CachingPolicy.ASIDE) {      return findAside(userId);    }    return null;  }  /**   * Save user account.   *   * @param userAccount {@link UserAccount}   */",find
3672,  public String <extra_id_0>() {    return cacheStore.print();  }  /**   * Cache-Aside save user account helper.   *   * @param userAccount {@link UserAccount}   */,printCacheContent
1145,    public String <extra_id_0>(Headers header) {      throw poison();    }    @Override,getHeader
3290,  public void <extra_id_0>(final Member member) {    this.listeners.remove(member);  }  /**   * Publish and event to all members.   *   * @param event The event   */,unsubscribe
122,"  static <T> Trampoline<T> <extra_id_0>(final Trampoline<Trampoline<T>> trampoline) {    return new Trampoline<T>() {      @Override      public boolean complete() {        return false;      }      @Override      public Trampoline<T> jump() {        return trampoline.result();      }      @Override      public T get() {        return trampoline(this);      }      T trampoline(final Trampoline<T> trampoline) {        return Stream.iterate(trampoline, Trampoline::jump)            .filter(Trampoline::complete)            .findFirst()            .map(Trampoline::result)            .get();      }    };  }",more
383,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Program started"");    // Create a list of tasks to be executed    var tasks = List.of(        new PotatoPeelingTask(3),        new PotatoPeelingTask(6),        new CoffeeMakingTask(2),        new CoffeeMakingTask(6),        new PotatoPeelingTask(4),        new CoffeeMakingTask(2),        new PotatoPeelingTask(4),        new CoffeeMakingTask(9),        new PotatoPeelingTask(3),        new CoffeeMakingTask(2),        new PotatoPeelingTask(4),        new CoffeeMakingTask(2),        new CoffeeMakingTask(7),        new PotatoPeelingTask(4),        new PotatoPeelingTask(5));    // Creates a thread pool that reuses a fixed number of threads operating off a shared    // unbounded queue. At any point, at most nThreads threads will be active processing    // tasks. If additional tasks are submitted when all threads are active, they will wait    // in the queue until a thread is available.    var executor = Executors.newFixedThreadPool(3);    // Allocate new worker for each task    // The worker is executed when a thread becomes    // available in the thread pool    tasks.stream().map(Worker::new).forEach(executor::execute);    // All tasks were executed, now shutdown    executor.shutdown();    while (!executor.isTerminated()) {      Thread.yield();    }    LOGGER.info(""Program finished"");  }",main
1262,"  public static void <extra_id_0>(String[] args) {    var proxy = new WizardTowerProxy(new IvoryTower());    proxy.enter(new Wizard(""Red wizard""));    proxy.enter(new Wizard(""White wizard""));    proxy.enter(new Wizard(""Black wizard""));    proxy.enter(new Wizard(""Green wizard""));    proxy.enter(new Wizard(""Brown wizard""));  }",main
1152,"  Map<Headers, String> <extra_id_0>();",getHeaders
2372,  void <extra_id_0>(Person person);,insert
3215,"  public void <extra_id_0>(HttpServletRequest req, HttpServletResponse resp)          throws ServletException, IOException {    resp.setContentType(CONTENT_TYPE);    try (PrintWriter out = resp.getWriter()) {      out.println(msgPartOne + "" Delete "" + msgPartTwo);    }  }  @Override",doDelete
85,"  private void <extra_id_0>() {    var modifiedWeapons = context.get(UnitActions.MODIFY.getActionValue());    for (var weapon : modifiedWeapons) {      LOGGER.info(""Scheduling {} for modification work."", weapon.getName());      weaponDatabase.modify(weapon);    }  }",commitModify
86,"  private void <extra_id_0>() {    var deletedWeapons = context.get(UnitActions.DELETE.getActionValue());    for (var weapon : deletedWeapons) {      LOGGER.info(""Scrapping {}."", weapon.getName());      weaponDatabase.delete(weapon);    }  }",commitDelete
1236,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1515,"  public AlbumListPage <extra_id_0>() {    var loginButton = (HtmlSubmitInput) page.getElementById(""loginButton"");    try {      loginButton.click();    } catch (IOException e) {      LOGGER.error(""An error occurred on login."", e);    }    return new AlbumListPage(webClient);  }",login
2175,"  private TreeNode<T> <extra_id_0>(T value) {    if (this.isGreaterThan(value)) {      return this.left;    }    return this.right;  }  /**   * Add a new Child TreeNode of given value to self. WARNING: This method is destructive (will   * overwrite existing tree structure, if any), and should be called only by this class's insert()   * method.   *   * @param valToInsert Value of the new TreeNode to be inserted   */",traverseOneLevelDown
1763,  void <extra_id_0>(Creature creature);  /**   * Gets the locker.   *   * @return the Creature that holds the object. Returns null if no one is locking.   */,unlock
3316,  protected void <extra_id_0>() {  },printThisBefore
112,"  void <extra_id_0>() {    var cg = new CandyGame(3, new CellPool(9));    var arr1 = cg.adjacentCells(0, 0);    var arr2 = cg.adjacentCells(1, 2);    var arr3 = cg.adjacentCells(1, 1);    assertTrue(arr1.size() == 2 && arr2.size() == 3 && arr3.size() == 4);  }  @Test",adjacentCellsTest
3317,  protected void <extra_id_0>() {  }  /**   * Print.   */,printThisAfter
2624,"  public void <extra_id_0>() {    LOGGER.info(""Displaying archers"");  }",display
2975,  void <extra_id_0>() {    var df = new DataFetcher();    var countries = df.fetch();    Assertions.assertFalse(countries.isEmpty());  }  @Test,testIsDirty
1817,"  ArrayList<Worker> <extra_id_0>(int num) {    //i+1 will be id    return IntStream.range(0, num)        .mapToObj(i -> new ArrayTransposeWorker(this, i + 1))        .collect(Collectors.toCollection(() -> new ArrayList<>(num)));  }  @Override",setWorkers
2349,"  void <extra_id_0>() {    MongoConnectionPropertiesLoader.load();    var mongoClient = new MongoClient(System.getProperty(""mongo-host""),        Integer.parseInt(System.getProperty(""mongo-port"")));    mongoClient.dropDatabase(TEST_DB);    mongoClient.close();    mongoEventLog = new MongoEventLog(TEST_DB, TEST_EVENTS_COLLECTION);  }  @Test",init
2842,"  void <extra_id_0>() {    final var asteroid = new FlamingAsteroid(1, 2, 3, 4);    assertEquals(1, asteroid.getLeft());    assertEquals(2, asteroid.getTop());    assertEquals(3, asteroid.getRight());    assertEquals(4, asteroid.getBottom());    assertTrue(asteroid.isOnFire());    assertFalse(asteroid.isDamaged());    assertEquals(""FlamingAsteroid at [1,2,3,4] damaged=false onFire=true"", asteroid.toString());  }  /**   * Test what happens we collide with an asteroid   */  @Test",testConstructor
2064,"  private Map<String, String> <extra_id_0>(      GarbageCollectorMXBean gcBean, List<MemoryPoolMXBean> memoryPoolMxBeans) {    Map<String, String> collectorDetails = new HashMap<>();    long count = gcBean.getCollectionCount();    long time = gcBean.getCollectionTime();    collectorDetails.put(""count"", String.format(""%d"", count));    collectorDetails.put(""time"", String.format(""%dms"", time));    String[] memoryPoolNames = gcBean.getMemoryPoolNames();    List<String> memoryPoolNamesList = Arrays.asList(memoryPoolNames);    if (!memoryPoolNamesList.isEmpty()) {      addMemoryPoolDetails(collectorDetails, memoryPoolMxBeans, memoryPoolNamesList);    } else {      LOGGER.error(""Garbage collector '{}' does not have any memory pools"", gcBean.getName());    }    return collectorDetails;  }  /**   * Adds memory pool details to the collector details.   *   * @param collectorDetails Map containing details for the garbage collector   * @param memoryPoolMxBeans List of memory pool MXBeans   * @param memoryPoolNamesList List of memory pool names associated with the garbage collector   */",createCollectorDetails
478,"  public static ThreadSafeDoubleCheckLocking <extra_id_0>() {    // local variable increases performance by 25 percent    // Joshua Bloch ""Effective Java, Second Edition"", p. 283-284    var result = instance;    // Check if singleton instance is initialized.    // If it is initialized then we can return the instance.    if (result == null) {      // It is not initialized but we cannot be sure because some other thread might have      // initialized it in the meanwhile.      // So to make sure we need to lock on an object to get mutual exclusion.      synchronized (ThreadSafeDoubleCheckLocking.class) {        // Again assign the instance to local variable to check if it was initialized by some        // other thread while current thread was blocked to enter the locked zone.        // If it was initialized then we can return the previously created instance        // just like the previous null check.        result = instance;        if (result == null) {          // The instance is still not initialized so we can safely          // (no other thread can enter this zone)          // create an instance and make it our singleton instance.          result = new ThreadSafeDoubleCheckLocking();          instance = result;        }      }    }    return result;  }",getInstance
736,"  void <extra_id_0>() {    var b1 = new Bubble(0, 0, 1, 2);    var b2 = new Bubble(1, 1, 2, 1);    var b3 = new Bubble(10, 10, 3, 1);    //b1 touches b2 but not b3    assertTrue(b1.touches(b2));    assertFalse(b1.touches(b3));  }  @Test",touchesTest
2066,  protected List<GarbageCollectorMXBean> <extra_id_0>() {    return ManagementFactory.getGarbageCollectorMXBeans();  }  /**   * Retrieves the list of memory pool MXBeans using ManagementFactory.   *   * @return a list of {@link MemoryPoolMXBean} objects representing the memory pools   */,getGarbageCollectorMxBeans
3659,  private static boolean <extra_id_0>(String value) {    try {      Integer.parseInt(value);      return true;    } catch (NumberFormatException e) {      return false;    }  },isValidInt
1895,"  Heavy <extra_id_0>() throws Exception {    final var holderField = Java8Holder.class.getDeclaredField(""heavy"");    holderField.setAccessible(true);    final var supplier = (Supplier<Heavy>) holderField.get(this.holder);    final var supplierClass = supplier.getClass();    // This is a little fishy, but I don't know another way to test this:    // The lazy holder is at first a lambda, but gets replaced with a new supplier after loading ...    if (supplierClass.isLocalClass()) {      final var instanceField = supplierClass.getDeclaredField(""heavyInstance"");      instanceField.setAccessible(true);      return (Heavy) instanceField.get(supplier);    } else {      return null;    }  }  @Override",getInternalHeavyValue
773,  public void <extra_id_0>() {    if (complimentReceived && isFlirty && isDrunk && !isHungry) {      isHappy = true;    }  }  @Override,changeMood
233,  private void <extra_id_0>() {    // Does Nothing  }  /**   * Run game loop.   */,render
747,  abstract boolean <extra_id_0>(T obj);  /**   * handling interactions/collisions with other objects.   *   * @param toCheck contains the objects which need to be checked   * @param all     contains hashtable of all points on field at this time   */,touches
1686,  void <extra_id_0>(String message);  /**   * Displays the data to the view.   *   * @param data The data to be written.   */,showMessage
299,  protected abstract void <extra_id_0>(String target);  /**   * Steal.   */,stealTheItem
2812,"  public void <extra_id_0>(Meteoroid meteoroid) {    LOGGER.info(AppConstants.HITS + "" {} is damaged!"", meteoroid.getClass().getSimpleName(),        this.getClass().getSimpleName(), this.getClass().getSimpleName());    setDamaged(true);  }  @Override",collisionResolve
2514,"  private static <E> void <extra_id_0>(String prefix, Iterable<E> iterable) {    prettyPrint("", "", prefix, iterable);  }",prettyPrint
234,"  public void <extra_id_0>() {    LOGGER.info(""Start game."");    isRunning = true;    var thread = new Thread(this::gameLoop);    thread.start();  }  /**   * Stop game loop.   */",run
2051,"  void <extra_id_0>() {    healthChecker.shutdown();    ((LoggerContext) LoggerFactory.getILoggerFactory()).reset();  }  /**   * Tests that the {@link performCheck()} method completes normally when the health supplier   * returns a successful health check.   *   * <p>Given a health supplier that returns a healthy status, the test verifies that the {@link   * performCheck()} method completes normally and returns the expected health object.   */  @Test",tearDown
69,"  void <extra_id_0>() {    armsDealer.registerNew(weapon1);    armsDealer.registerNew(weapon2);    assertEquals(2, context.get(UnitActions.INSERT.getActionValue()).size());    verifyNoMoreInteractions(weaponDatabase);  }  @Test",shouldSaveNewStudentWithoutWritingToDb
3786,  public String <extra_id_0>() {    return name().toLowerCase();  },toString
915,  public boolean <extra_id_0>(String message) {    return log.stream().anyMatch(event -> event.getFormattedMessage().contains(message));  },logContains
1401,"  public Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{WeatherType.SUNNY, ""The hobbits are facing Sunny weather now""},        new Object[]{WeatherType.RAINY, ""The hobbits are facing Rainy weather now""},        new Object[]{WeatherType.WINDY, ""The hobbits are facing Windy weather now""},        new Object[]{WeatherType.COLD, ""The hobbits are facing Cold weather now""}    );  }  /**   * Create a new test with the given weather and expected response   */",dataProvider
2907,  void <extra_id_0>(Student student) throws DataMapperException;,delete
163,"  void <extra_id_0>() {    assertThrows(Exception.class, () -> {      hotel.cancelRoomBooking(getNonExistingRoomId());    });  }  @Test",cancelRoomBookingWithInvalidIdShouldRaiseException
2142,  void <extra_id_0>(O result);  /**   * A callback called if computing the task resulted in some exception. This method is called when   * either of {@link #call()} or {@link #onPreCall()} throw any exception.   *   * @param throwable error cause   */,onPostCall
2707,"  public String <extra_id_0>() {    return ""Dwarven tunnel digger"";  }",name
1849,  public void <extra_id_0>() {    Worker leader = null;    if (workers.size() > 0) {      leader = workers.get(0);    }    this.leader = leader;  },promoteLeader
2537,"  public void <extra_id_0>() {    LOGGER.info(""Drinking top shelf potions"");    topShelf.forEach(Potion::drink);    LOGGER.info(""Drinking bottom shelf potions"");    bottomShelf.forEach(Potion::drink);  }",drinkPotions
3076,"  void <extra_id_0>() throws SQLException {    // create db schema    dataSource = TestUtils.createDataSource();    TestUtils.deleteSchema(dataSource);    TestUtils.createSchema(dataSource);    // setup objects    customerDao = new CustomerDaoImpl(dataSource);    customer = Customer.builder().name(""customer"").money(Money.of(CurrencyUnit.USD,100.0)).customerDao(customerDao).build();    product =        Product.builder()            .name(""product"")            .price(Money.of(USD, 100.0))            .expirationDate(LocalDate.parse(""2021-06-27""))            .productDao(new ProductDaoImpl(dataSource))            .build();  }  @AfterEach",setUp
2699,"  public void <extra_id_0>() {    makeActions(workers, DwarvenMineWorker.Action.WORK);  }",digOutGold
3731,  void <extra_id_0>() {    assertDoesNotThrow(() -> mongoDb.connect());  }  @Test,connect
433,"  void <extra_id_0>() {    var user = new User(1, null, ""iloveyou"");    assertEquals(user, new User(1, null,            ""iloveyou""));  }  @Test",testEquals8
994,  public void <extra_id_0>(long amountToInvest) {    this.amountToInvest = amountToInvest;  },setAmountToInvest
584,"  void <extra_id_0>() {    final var dao = getDao();    final var allWizards = dao.findAll();    for (final var spell : allWizards) {      final var byName = dao.findByName(spell.getName());      assertNotNull(byName);      assertEquals(spell.getId(), byName.getId());      assertEquals(spell.getName(), byName.getName());    }  }",testFindByName
3405,  boolean <extra_id_0>() {    return size == 0;  },isEmpty
2691,"  public void <extra_id_0>(UserUpdatedEvent event) {    LOGGER.info(""User '{}' has been Updated!"", event.getUser().getUsername());  }",onEvent
2368,  public int <extra_id_0>() {    if (personMap == null) {      return 0;    }    return personMap.size();  },size
1645,  public static Nazgul <extra_id_0>(NazgulName name) {    return nazguls.get(name);  },getInstance
125,      public T <extra_id_0>() {        return trampoline(this);      },get
39,"  void <extra_id_0>() {    this.visitor.visit(new Sergeant());    if (this.sergeantResponse.isPresent()) {      assertEquals(this.sergeantResponse.get(), appender.getLastMessage());      assertEquals(1, appender.getLogSize());    }  }  @Test",testVisitSergeant
962,  void <extra_id_0>() {    repository.saveAll(persons);  }  @Test,setup
3530,"  public static Map<Category, List<Car>> <extra_id_0>(List<Car> cars) {    Map<Category, List<Car>> groupingByCategory = new HashMap<>();    for (Car car : cars) {      if (groupingByCategory.containsKey(car.getCategory())) {        groupingByCategory.get(car.getCategory()).add(car);      } else {        List<Car> categoryCars = new ArrayList<>();        categoryCars.add(car);        groupingByCategory.put(car.getCategory(), categoryCars);      }    }    return groupingByCategory;  }  /**   * Method to get all Sedan cars belonging to a group of persons sorted by year of manufacture   * using for loops.   *   * @param persons {@link List} of {@link Person} to be used   * @return {@link List} of {@link Car} to belonging to the group   */",getGroupingOfCarsByCategory
2402,"  public String <extra_id_0>() {    return ""number"";  }",toString
946,  void <extra_id_0>(Message msg);,submit
444,"  public static void <extra_id_0>(final String[] args) throws SQLException {    // Create data source and create the user table.    final var dataSource = createDataSource();    createSchema(dataSource);    var userTableModule = new UserTableModule(dataSource);    // Initialize two users.    var user1 = new User(1, ""123456"", ""123456"");    var user2 = new User(2, ""test"", ""password"");    // Login and register using the instance of userTableModule.    userTableModule.registerUser(user1);    userTableModule.login(user1.getUsername(), user1.getPassword());    userTableModule.login(user2.getUsername(), user2.getPassword());    userTableModule.registerUser(user2);    userTableModule.login(user2.getUsername(), user2.getPassword());    deleteSchema(dataSource);  }",main
553,  List<Wizard> <extra_id_0>(String name);,findWizardsWithSpell
2902,"  void <extra_id_0>() {    /* Create new data mapper of first type */    final var mapper = new StudentDataMapperImpl();    /* Create new student */    var studentId = 1;    var student = new Student(studentId, ""Adam"", 'A');    /* Add student in respectibe db */    mapper.insert(student);    /* Check if student is added in db */    assertEquals(studentId, mapper.find(student.getStudentId()).get().getStudentId());    /* Update existing student object */    var updatedName = ""AdamUpdated"";    student = new Student(student.getStudentId(), updatedName, 'A');    /* Update student in respectibe db */    mapper.update(student);    /* Check if student is updated in db */    assertEquals(updatedName, mapper.find(student.getStudentId()).get().getName());    /* Delete student in db */    mapper.delete(student);    /* Result should be false */    assertFalse(mapper.find(student.getStudentId()).isPresent());  }",testFirstDataMapper
64,  public void <extra_id_0>(Commander commander) {    // Do nothing  },visit
604,"  void <extra_id_0>() {    GiantModel giantModel = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    GiantView giantView = new GiantView();    assertDoesNotThrow(() -> giantView.displayGiant(giantModel));  }",testDispalyGiant
282,"  void <extra_id_0>() throws Exception {    var skyLaunch = new SkyLaunch();    var outputLog = getLogContent(() -> skyLaunch.move(1.0, 1.0, 1.0));    var expectedLog = ""Move to ( 1.0, 1.0, 1.0 )"";    assertEquals(outputLog, expectedLog);  }  @Test",testMove
2987,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
229,"  private void <extra_id_0>() {    logger.info(""Statue {} shoots lightning!"", id);  }",shootLightning
1330,"  void <extra_id_0>() {    var filters = new Pipeline<>(new RemoveAlphabetsHandler())        .addHandler(new RemoveDigitsHandler())        .addHandler(new ConvertToCharArrayHandler());    assertArrayEquals(        new char[]{'#', '!', '(', '&', '%', '#', '!'},        filters.execute(""#H!E(L&L0O%THE3R#34E!"")    );  }",testAddHandlersToPipeline
3325,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },appStartsWithoutException
1799,  public abstract List<Input<T>> <extra_id_0>(int num);,divideData
2552,"  void <extra_id_0>(WeaponType name, Supplier<Weapon> supplier);",add
3642,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3176,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteDaoWithoutException
