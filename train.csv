,method,name
2115,    public void <extra_id_0>(CakeLayer layer) {        this.layers.add(layer);    }    @Override,addLayer
1286,"  private void <extra_id_0>() {    lowestFrequencyChar().thenAccept(        charFrequency -> {          LOGGER.info(""Char with lowest frequency is: {}"", charFrequency);          taskCompleted();        }    );  }  /*   * Calculate the line count and when that promise is fulfilled, consume the result   * in a Consumer<Integer>   */",calculateLowestFrequencyChar
2412,  public static Coin <extra_id_0>(CoinType type) {    return type.getConstructor().get();  },getCoin
2476,  public final FluentIterable<E> <extra_id_0>(int count) {    var iterator = iterator();    var currentCount = 0;    while (iterator.hasNext()) {      iterator.next();      if (currentCount >= count) {        iterator.remove();      }      currentCount++;    }    return this;  }  /**   * Can be used to collect objects from the Iterable. Is a terminating operation.   *   * @return an option of the last object of the Iterable   */  @Override,first
780,"  void <extra_id_0>() {    final var royalty = mock(Royalty.class);    final var servant = new Servant(""test"");    servant.giveCompliments(royalty);    verify(royalty).receiveCompliments();    verifyNoMoreInteractions(royalty);  }  @Test",testGiveCompliments
3862,"  void <extra_id_0>() {    var inventoryController = new InventoryController();    var numberOfInventories = inventoryController.getProductInventories();    assertEquals(5, numberOfInventories);  }",testGetProductInventories
1107,  void <extra_id_0>() {    var stringPriorityMessageQueue = new PriorityMessageQueue<>(new Integer[2]);    assertTrue(stringPriorityMessageQueue.isEmpty());    stringPriorityMessageQueue.add(1);    stringPriorityMessageQueue.remove();    assertTrue(stringPriorityMessageQueue.isEmpty());  }  @Test,isEmpty
632,  String <extra_id_0>();  /*   * Unique ID of the particular service   */,getName
3828,  void <extra_id_0>() {    var zoom = new Zoom();    var mockVisitor = mock(ConfigureForDosVisitor.class);    zoom.accept(mockVisitor);    verify((ZoomVisitor) mockVisitor).visit(eq(zoom));  }  @Test,testAcceptForDos
3436,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObjectUnknownException();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderUnknownException
2886,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
1475,  void <extra_id_0>() {    loginPage.navigateToPage();  }  @Test,setUp
822,"  private static void <extra_id_0>() throws Exception {    final var retry = new RetryExponentialBackoff<>(        new FindCustomer(""123"", new CustomerNotFoundException(NOT_FOUND)),        6,  //6 attempts        30000, //30 s max delay between attempts        e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass())    );    op = retry;    final var customerId = op.perform();    LOG.info(String.format(        ""However, retrying the operation while ignoring a recoverable error will eventually yield ""            + ""the result %s after a number of attempts %s"", customerId, retry.attempts()    ));  }",errorWithRetryExponentialBackoff
3715,"  public UserAccount <extra_id_0>(final UserAccount userAccount) {    db.getCollection(USER_ACCOUNT).insertOne(            new Document(USER_ID, userAccount.getUserId())                    .append(USER_NAME, userAccount.getUserName())                    .append(ADD_INFO, userAccount.getAdditionalInfo())    );    return userAccount;  }  /**   * Update DB.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override",writeToDb
2398,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
464,"  void <extra_id_0>() {      Country country = new Country(              86,              ""China"",              ""Asia"",              ""Chinese""      );      country.setCode(971);      country.setName(""UAE"");      country.setContinents(""West-Asia"");      country.setLanguage(""Arabic"");      assertEquals(971, country.getCode());      assertEquals(""UAE"", country.getName());      assertEquals(""West-Asia"", country.getContinents());      assertEquals(""Arabic"", country.getLanguage());  }  @Test",testSetMethod
1376,  int <extra_id_0>();,getTreeSize
2844,"  void <extra_id_0>() {    testCollision(        new Meteoroid(1, 1, 3, 4),        false, false,        false, true    );  }  /**   * Test what happens we collide with ISS   */  @Test",testCollideMeteoroid
2000,  void <extra_id_0>(Filter filter);  /**   * Get next filter in chain after this.   */,setNext
242,"  public static void <extra_id_0>(String[] args) {    var statA = HeroStat.valueOf(10, 5, 0);    var statB = HeroStat.valueOf(10, 5, 0);    var statC = HeroStat.valueOf(5, 1, 8);    LOGGER.info(statA.toString());    LOGGER.info(statB.toString());    LOGGER.info(statC.toString());    LOGGER.info(""Is statA and statB equal : {}"", statA.equals(statB));    LOGGER.info(""Is statA and statC equal : {}"", statA.equals(statC));  }",main
1215,"  public void <extra_id_0>() {    var frame = new JFrame(""Album"");    var b1 = Box.createHorizontalBox();    frame.add(b1);    albumList = new JList<>(model.getAlbumList());    albumList.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(final MouseEvent e) {        model.setSelectedAlbumNumber(albumList.getSelectedIndex() + 1);        loadFromMod();      }    });    b1.add(albumList);    var b2 = Box.createVerticalBox();    b1.add(b2);    txtArtist = new TextField();    txtTitle = new TextField();    txtArtist.setSize(WIDTH_TXT, HEIGHT_TXT);    txtTitle.setSize(WIDTH_TXT, HEIGHT_TXT);    chkClassical = new JCheckBox();    txtComposer = new TextField();    chkClassical.addActionListener(itemEvent -> {      txtComposer.setEditable(chkClassical.isSelected());      if (!chkClassical.isSelected()) {        txtComposer.setText("""");      }    });    txtComposer.setSize(WIDTH_TXT, HEIGHT_TXT);    txtComposer.setEditable(model.getIsClassical());    apply = new JButton(""Apply"");    apply.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(final MouseEvent e) {        saveToMod();        loadFromMod();      }    });    cancel = new JButton(""Cancel"");    cancel.addMouseListener(new MouseAdapter() {      @Override      public void mouseClicked(final MouseEvent e) {        loadFromMod();      }    });    b2.add(txtArtist);    b2.add(txtTitle);    b2.add(chkClassical);    b2.add(txtComposer);    b2.add(apply);    b2.add(cancel);    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);    frame.setBounds(LOCATION_X, LOCATION_Y, WIDTH, HEIGHT);    frame.setVisible(true);  }",createView
292,  private String <extra_id_0>(Statement statement) throws Exception {    var log = tapSystemOutNormalized(statement);    return getLogContent(log);  },getLogContent
3196,"  void <extra_id_0>() {    MmaBantamweightFighter fighter = new MmaBantamweightFighter(""Joe"", ""Johnson"", ""The Geek"", ""Muay Thai"");    List<MmaFighter<?>> opponents = getOpponents();    List<MmaFighter<?>> challenged = new ArrayList<>();    opponents.forEach(challenger -> {      try {        ((MmaBantamweightFighter) challenger).fight(fighter);        challenged.add(challenger);      } catch (ClassCastException e) {          LOGGER.error(e.getMessage());      }    });    assertFalse(challenged.isEmpty());    assertTrue(challenged.stream().allMatch(c -> c instanceof MmaBantamweightFighter));  }",testFighterCanFightOnlyAgainstSameWeightOpponents
2576,  String <extra_id_0>();  /**   * Returns unique id of the threat.   *   * @return value representing threat id.   */,name
1024,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""-3"");      return ChapterResult.success(value);    }  }  class Service4 extends Service<Integer> {    @Override    public String getName() {      return ""4"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+4"");      return ChapterResult.failure(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-4"");      return ChapterResult.success(value);    }  }}",rollback
3166,  private int <extra_id_0>() {    return 999;  },getNonExistingCustomerId
806,"  void <extra_id_0>() {    try (final var ignored = new SlidingDoor(); final var ignored1 = new TreasureChest()) {      assertTrue(appender.logContains(""Sliding door opens.""));      assertTrue(appender.logContains(""Treasure chest opens.""));    }    assertTrue(appender.logContains(""Treasure chest closes.""));    assertTrue(appender.logContains(""Sliding door closes.""));  }  /**   * Logging Appender Implementation   */",testOpenClose
2224,  public float <extra_id_0>() {    return bullet.getPosition();  },getBulletPosition
2727,"  void <extra_id_0>() {    final var kingJoffrey = new KingJoffrey();    IntStream.range(0, Event.values().length).forEach(i -> {      assertEquals(i, appender.getLogSize());      var event = Event.values()[i];      kingJoffrey.onEvent(event);      final var expectedMessage = ""Received event from the King's Hand: "" + event.toString();      assertEquals(expectedMessage, appender.getLastMessage());      assertEquals(i + 1, appender.getLogSize());    });  }",testOnEvent
3034,  Optional<Product> <extra_id_0>(String name) throws SQLException;,findByName
2588,  public List<? extends Threat> <extra_id_0>() {    return new ArrayList<>(issues);  }  /**   * {@inheritDoc}   */  @Override,threats
1919,"  void <extra_id_0>() {    try {      final var bullyInstance = new BullyInstance(null, 1, 1);      var instanceClass = AbstractInstance.class;      var aliveField = instanceClass.getDeclaredField(""alive"");      aliveField.setAccessible(true);      aliveField.set(bullyInstance, false);      assertFalse(bullyInstance.isAlive());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to access field alive."");    }  }  @Test",testIsAlive
2419,  private void <extra_id_0>(Action action) {    stores.forEach(store -> store.onAction(action));  },dispatchAction
625,  Nourishment <extra_id_0>() {    return model.getNourishment();  }  /**   * Sets nourishment.   *   * @param nourishment the nourishment   */,getNourishment
1177,  Mage <extra_id_0>();,createMage
3333,"  public void <extra_id_0>(GameObject gameObject, int e) {    gameObject.updateVelocity(WALK_ACCELERATION);    LOGGER.info(gameObject.getName() + "" has moved right."");  }",update
496,"  void <extra_id_0>() {    try {      var dataMap = new HashMap<Integer, Data>();      dataMap.put(1, data);      var field = Shard.class.getDeclaredField(""dataStore"");      field.setAccessible(true);      field.set(shard, dataMap);      shard.clearData();      dataMap = (HashMap<Integer, Data>) field.get(shard);      assertEquals(0, dataMap.size());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }",testClearData
3681,  public void <extra_id_0>() {    if (cache != null) {      cache.clear();    }  }  /**   * Writes remaining content in the cache into the DB.   */,clearCache
979,"  void <extra_id_0>() {    var borrowerRole = new BorrowerRole();    borrowerRole.setName(""test"");    assertEquals(""Borrower test wants to get some money."", borrowerRole.borrow());  }",borrowTest
2819,"  public void <extra_id_0>(SpaceStationIss iss) {    LOGGER.info(AppConstants.HITS, iss.getClass().getSimpleName(), this.getClass().getSimpleName());  }",collisionResolve
754,"  void <extra_id_0>(Map<Integer, Bubble> allBubbles) {    LOGGER.info(""Bubble {} popped at ({},{})!"", this.id, this.coordinateX, this.coordinateY);    allBubbles.remove(this.id);  }",pop
832,"  void <extra_id_0>() throws Exception {    final var op = new FindCustomer(        ""123"",        new CustomerNotFoundException(""not found""),        new DatabaseNotAvailableException(""not available"")    );    try {      op.perform();    } catch (CustomerNotFoundException e) {      //ignore    }    try {      op.perform();    } catch (DatabaseNotAvailableException e) {      //ignore    }    assertThat(op.perform(), is(""123""));  }",resultAfterExceptions
2379,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    Assertions.assertEquals(person2,db.find(2),""Record that was found was incorrect."");  }  @Test",findInDb
788,  void <extra_id_0>() {    final var king = new King();    king.getFed();    king.getDrink();    king.receiveCompliments();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testFedDrunkComplimentedKing
2689,"  public static void <extra_id_0>(String[] args) {    var dispatcher = new EventDispatcher();    dispatcher.registerHandler(UserCreatedEvent.class, new UserCreatedEventHandler());    dispatcher.registerHandler(UserUpdatedEvent.class, new UserUpdatedEventHandler());    var user = new User(""iluwatar"");    dispatcher.dispatch(new UserCreatedEvent(user));    dispatcher.dispatch(new UserUpdatedEvent(user));  }",main
2006,  public String <extra_id_0>() {    return name;  },getName
1426,"  void <extra_id_0>(S subject, A argument);",update
2938,      public String <extra_id_0>() {        return name;      },getName
3222,  public void <extra_id_0>() {    console.init();  },init
143,"    void <extra_id_0>() {      final var newRoomType = ""Double"";      final var newPrice = 80;      final var newBookingStatus = false;      assertThrows(Exception.class, () -> {        dao.update(new Room(existingRoom.getId(), newRoomType, newPrice, newBookingStatus));      });    }    @Test",updatingARoomFailsWithFeedbackToTheClient
30,    public boolean <extra_id_0>(String message) {      return log.stream().anyMatch(event -> event.getMessage().equals(message));    },logContains
3771,  public long <extra_id_0>() {    return remoteServiceStatusValue;  },getRemoteServiceStatusValue
2690,  public Class<? extends Event> <extra_id_0>() {    return getClass();  },getType
961,"  void <extra_id_0>() throws SQLException {    var resultSet = dataSource.getConnection().createStatement().executeQuery(""SELECT 1"");    var expected = ""1"";    String result = null;    while (resultSet.next()) {      result = resultSet.getString(1);    }    assertEquals(expected, result);  }",testQuery
642,"  public void <extra_id_0>() {    LOGGER.info(""Service {} is now executing with id {}"", getName(), getId());  }",execute
2061,"  void <extra_id_0>()      throws ExecutionException, InterruptedException {    // Arrange    CompletableFuture<Health> future = mock(CompletableFuture.class);    when(asynchronousHealthChecker.performCheck(any(Supplier.class), anyLong())).thenReturn(future);    // Simulate InterruptedException when future.get() is called    when(future.get()).thenThrow(new InterruptedException(""Health check interrupted""));    // Act    Health health = memoryHealthIndicator.health();    // Assert    assertEquals(Status.DOWN, health.getStatus());    String errorDetail = (String) health.getDetails().get(""error"");    assertNotNull(errorDetail);    assertTrue(errorDetail.contains(""Health check interrupted""));  }  /**   * Test case for the `health()` method when the health check execution fails.   *   * <p>Asserts that when the `health()` method is called and the health check execution fails, it   * returns a Health object with Status DOWN and an error detail indicating the failure.   */  @Test",whenHealthCheckIsInterrupted_thenHealthIsDown
1185,  public Beast <extra_id_0>() {    return beast.copy();  },createBeast
3800,"  void <extra_id_0>() {    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);    final var kingdom = app.getKingdom();    final var elfKing = kingdom.getKing();    assertTrue(elfKing instanceof ElfKing);    assertEquals(ElfKing.DESCRIPTION, elfKing.getDescription());    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);    final var orcKing = kingdom.getKing();    assertTrue(orcKing instanceof OrcKing);    assertEquals(OrcKing.DESCRIPTION, orcKing.getDescription());  }  @Test",verifyKingCreation
215,"  void <extra_id_0>() {    skeleton.patrollingLeft = false;    skeleton.setPosition(50);    skeleton.update();    assertEquals(51, skeleton.getPosition());  }  @Test",testUpdateForPatrollingRight
1406,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
2469,  Optional<E> <extra_id_0>();  /**   * Evaluates the iteration and leaves only the count last elements.   *   * @return the last counts elements as an Iterable   */,last
2755,"  public void <extra_id_0>() {    var eventManager = new EventManager();    var s = new Scanner(System.in);    var option = -1;    while (option != 4) {      LOGGER.info(""Hello. Would you like to boil some eggs?"");      LOGGER.info(""(1) BOIL AN EGG (2) STOP BOILING THIS EGG (3) HOW ARE MY EGGS? (4) EXIT"");      LOGGER.info(""Choose [1,2,3,4]: "");      option = s.nextInt();      if (option == 1) {        processOption1(eventManager, s);      } else if (option == 2) {        processOption2(eventManager, s);      } else if (option == 3) {        processOption3(eventManager, s);      } else if (option == 4) {        eventManager.shutdown();      }    }    s.close();  }",runInteractiveMode
774,  public boolean <extra_id_0>() {    return isHappy;  },getMood
341,    public BuildStep <extra_id_0>() {      return this;    }    @Override,noSpell
1562,"  void <extra_id_0>() {    var sarah = new User(""Sarah"", 42, Sex.FEMALE, ""sarah@det.org"");    var validated = Validator.of(sarah)        .validate(User::name, Objects::nonNull, ""name cannot be null"")        .validate(User::age, age -> age > 21, ""user is underage"")        .validate(User::sex, sex -> sex == Sex.FEMALE, ""user is not female"")        .validate(User::email, email -> email.contains(""@""), ""email does not contain @ sign"")        .get();    assertSame(validated, sarah);  }",testForValid
2653,"  void <extra_id_0>() {    if (file.delete()) {      LOGGER.info(""File cleared successfully............"");    }  }  /**   * Read domain event.   *   * @return the domain event.   */",reset
636,"  public void <extra_id_0>(Service newService) {    serviceCache.put(newService.getName(), newService);  }",addService
2110,    public void <extra_id_0>(Long id) {        this.id = id;    },setId
2871,"  public static void <extra_id_0>(String[] args) {    //Create 3 different units    var soldierUnit = new SoldierUnit(""SoldierUnit1"");    var sergeantUnit = new SergeantUnit(""SergeantUnit1"");    var commanderUnit = new CommanderUnit(""CommanderUnit1"");    //check for each unit to have an extension    checkExtensionsForUnit(soldierUnit);    checkExtensionsForUnit(sergeantUnit);    checkExtensionsForUnit(commanderUnit);  }",main
3225,  public T <extra_id_0>() {    return data;  },getData
2034,"  void <extra_id_0>() {    CompletableFuture<Health> future = new CompletableFuture<>();    when(asynchronousHealthChecker.performCheck(any(Supplier.class), eq(timeoutInSeconds)))        .thenReturn(future);    // Complete the future exceptionally to simulate a timeout    future.completeExceptionally(new RuntimeException(""Simulated timeout""));    Health health = healthIndicator.health();    // Check that the health status is DOWN due to timeout    assertEquals(Status.DOWN, health.getStatus());  }",whenHealthCheckTimesOut_thenHealthIsDown
2239,"  private static void <extra_id_0>() {    LOGGER.info("""");    LOGGER.info(""### Lottery Service Console ###"");    LOGGER.info(""(1) Query lottery account funds"");    LOGGER.info(""(2) Add funds to lottery account"");    LOGGER.info(""(3) Submit ticket"");    LOGGER.info(""(4) Check ticket"");    LOGGER.info(""(5) Exit"");  }",printMainMenu
3872,  Integer <extra_id_0>();,getProductInventories
3018,"  void <extra_id_0>(int x, int y);  /**   * Draw the pixel in (x, y).   *   * @param x X coordinate   * @param y Y coordinate   */",clear
1629,  private void <extra_id_0>() throws Exception {    throw new Exception(MESSAGE);  },methodThrowingException
1082,  void <extra_id_0>(boolean finished) {    this.finished = finished;  },setFinished
1794,"  protected void <extra_id_0>() {    LOGGER.info(""You can enter"");  }",enter
1251,"  void <extra_id_0>() {    List.of(""Gandalf"", ""Dumbledore"", ""Oz"", ""Merlin"")        .forEach(name -> assertEquals(name, new Wizard(name).toString()));  }",testToString
2285,"  public void <extra_id_0>(PlayerDetails details) {    LOGGER.error(""Lottery ticket for {} could not be submitted because the credit transfer""        + "" of 3 credits failed."", details.getEmail());  }",ticketSubmitError
1471,"  void <extra_id_0>() {    var albumPageAfterChanges = albumPage        .changeAlbumTitle(""25"")        .changeArtist(""Adele Laurie Blue Adkins"")        .changeAlbumYear(2015)        .changeAlbumRating(""B"")        .changeNumberOfSongs(20)        .saveChanges();    assertTrue(albumPageAfterChanges.isAt());  }  @Test",testSaveAlbum
3281,  void <extra_id_0>() {    //given    final var dataBus = DataBus.getInstance();    dataBus.subscribe(member);    dataBus.unsubscribe(member);    //when    dataBus.publish(event);    //then    then(member).should(never()).accept(event);  },publishedEventIsNotReceivedByMemberAfterUnsubscribing
2982,  private boolean <extra_id_0>(long fileLastModified) {    if (lastFetched != fileLastModified) {      lastFetched = fileLastModified;      return true;    }    return false;  }  /**   * Fetches data/content from raw file.   *   * @return List of strings   */,isDirty
3291,  public void <extra_id_0>(final DataType event) {    event.setDataBus(this);    listeners.forEach(listener -> listener.accept(event));  },publish
3073,"    void <extra_id_0>() throws SQLException {        when(customerDao.findByName(""customer"")).thenReturn(Optional.empty());        customer.save();        verify(customerDao, times(1)).save(customer);        when(customerDao.findByName(""customer"")).thenReturn(Optional.of(customer));        customer.save();        verify(customerDao, times(1)).update(customer);    }    @Test",shouldSaveCustomer
827,"  void <extra_id_0>() {    final var e = new BusinessException(""unhandled"");    final var retry = new RetryExponentialBackoff<String>(        () -> {          throw e;        },        2,        0    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.errors(), hasItem(e));  }  /**   * No exceptions will be ignored, hence final number of attempts should be 1 even if we're asking   * it to attempt twice.   */  @Test",errors
1563,  public static <T> Validator<T> <extra_id_0>(T t) {    return new Validator<>(Objects.requireNonNull(t));  }  /**   * Checks if the validation is successful.   *   * @param validation one argument boolean-valued function that represents one step of validation.   *                   Adds exception to main validation exception list when single step validation   *                   ends with failure.   * @param message    error message when object is invalid   * @return this   */,of
295,  public void <extra_id_0>() {    method.steal();  },steal
46,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3741,"  public void <extra_id_0>() {    LOGGER.info(""The sword is unwielded."");    enchantment.onDeactivate();  }  @Override",unwield
3552,"  void <extra_id_0>() throws RemoteServiceException {    Assertions.assertThrows(RemoteServiceException.class, () -> {      var obj = new DelayedRemoteService();      obj.call();    });  }  /**   * Testing server started in past (2 seconds ago) and with a simulated delay of 1 second.   *   * @throws RemoteServiceException   */  @Test",testDefaultConstructor
2695,  public <E extends Event> void <extra_id_0>(E event) {    var handler = (Handler<E>) handlers.get(event.getClass());    if (handler != null) {      handler.onEvent(event);    }  },dispatch
967,"  void <extra_id_0>() {    var persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));    assertEquals(3, persons.size());    assertTrue(persons.stream().allMatch(item -> item.getAge() > 20 && item.getAge() < 40));  }  @Test",testFindAllByAgeBetweenSpec
506,  public String <extra_id_0>() {    return value;  },getValue
501,"  public int <extra_id_0>(Data data) {    var shardId = allocateShard(data);    lookupMap.put(data.getKey(), shardId);    var shard = shardMap.get(shardId);    shard.storeData(data);    LOGGER.info(data.toString() + "" is stored in Shard "" + shardId);    return shardId;  }  @Override",storeData
216,"  void <extra_id_0>() {    skeleton.patrollingLeft = true;    skeleton.setPosition(1);    skeleton.update();    assertEquals(0, skeleton.getPosition());    assertFalse(skeleton.patrollingLeft);  }  @Test",testUpdateForReverseDirectionFromLeftToRight
3462,  default Finder <extra_id_0>(Finder orFinder) {    return txt -> {      List<String> res = this.find(txt);      res.addAll(orFinder.find(txt));      return res;    };  }  /**   * combinator and.   * @param andFinder finder to combine   * @return new finder including previous finders   */,or
2274,  void <extra_id_0>();,resetLottery
1531,  public static Queen <extra_id_0>() {    var queen = new Queen();    queen.setFlirtiness(true);    return queen;  }  /**   * Method to create a not flirty queen.   *   * @return A not flirty {@link com.iluwatar.objectmother.Queen}.   */,createFlirtyQueen
2041,"  void <extra_id_0>() {    // Arrange    when(entityManager.createNativeQuery(""SELECT 1"")).thenThrow(RuntimeException.class);    // Act & Assert    assertThrows(RuntimeException.class, () -> healthCheckRepository.checkHealth());  }  /**   * Test case for the `performTestTransaction()` method when the persist operation fails.   *   * <p>Asserts that when the `performTestTransaction()` method is called and the persist operation   * fails, it throws a RuntimeException.   */  @Test",whenCheckHealth_andDatabaseIsDown_thenThrowsException
68,"  public String <extra_id_0>() {    return ""commander"";  }",toString
494,"  void <extra_id_0>() {    data = new Data(1, ""test"", Data.DataType.TYPE_1);    shard = new Shard(1);  }  @Test",setup
1159,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
864,"  public void <extra_id_0>() throws InterruptedException, IOException {    reactorMain.shutdown();    selector.wakeup();    if (!reactorMain.awaitTermination(4, TimeUnit.SECONDS)) {      reactorMain.shutdownNow();    }    selector.close();    LOGGER.info(""Reactor stopped"");  }  /**   * Registers a new channel (handle) with this reactor. Reactor will start waiting for events on   * this channel and notify of any events. While registering the channel the reactor uses {@link   * AbstractNioChannel#getInterestedOps()} to know about the interested operation of this channel.   *   * @param channel a new channel on which reactor will wait for events. The channel must be bound   *                prior to being registered.   * @return this   * @throws IOException if any I/O error occurs.   */",stop
290,"  void <extra_id_0>() throws Exception {    var groundDive = new GroundDive();    final var outputLog = getLogContent(        () -> groundDive.spawnParticles(""PARTICLE_TYPE"", 100));    final var expectedLog = ""Spawn 100 particle with type PARTICLE_TYPE"";    assertEquals(outputLog, expectedLog);  }  @Test",testSpawnParticles
1811,  public int <extra_id_0>() {    return this.workerId;  },getWorkerId
1175,"  public String <extra_id_0>() {    return ""Orcish warlord attacks with "" + weapon;  }",toString
676,  public Mass <extra_id_0>() {    return mass;  },getMass
3441,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObjectWithDB();            var order = new Order(new User(""K"", null), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderWithDatabase
1842,  public void <extra_id_0>(Task task) throws InterruptedException {    queue.put(task);  },addTask
1703,  public void <extra_id_0>(FileSelectorPresenter presenter) {    this.presenter = presenter;  }  @Override,setPresenter
319,"  void <extra_id_0>() {    final var method = spy(StealingMethod.class);    final var thief = new HalflingThief(method);    thief.steal();    verify(method).steal();    String target = verify(method).pickTarget();    verify(method).confuseTarget(target);    verify(method).stealTheItem(target);    verifyNoMoreInteractions(method);  }  /**   * Verify if the thief uses the provided stealing method, and the new method after changing it   */  @Test",testSteal
1259,  public String <extra_id_0>() {    return name;  },toString
3306,"  void <extra_id_0>() {    final var messenger = new Messenger();    testMessage(        messenger.messageFromOrcs(),        ""Where there is a whip there is a way.""    );  }  /**   * Test the message from the elves   */  @Test",testMessageFromOrcs
2797,  void <extra_id_0>(int id) throws Exception;  ,removeOrder
2213,"  void <extra_id_0>() {    gameLoop.stop();    Assertions.assertEquals(GameStatus.STOPPED, gameLoop.status);  }  @Test",testStop
1984,"  private void <extra_id_0>() {    setLayout(new BorderLayout());    var panel = new JPanel();    add(jl, BorderLayout.SOUTH);    add(panel, BorderLayout.CENTER);    panel.setLayout(new GridLayout(6, 2));    panel.add(new JLabel(""Name""));    panel.add(jtFields[0]);    panel.add(new JLabel(""Contact Number""));    panel.add(jtFields[1]);    panel.add(new JLabel(""Address""));    panel.add(jtAreas[0]);    panel.add(new JLabel(""Deposit Number""));    panel.add(jtFields[2]);    panel.add(new JLabel(""Order""));    panel.add(jtAreas[1]);    panel.add(clearButton);    panel.add(processButton);    clearButton.addActionListener(e -> {      Arrays.stream(jtAreas).forEach(i -> i.setText(""""));      Arrays.stream(jtFields).forEach(i -> i.setText(""""));    });    processButton.addActionListener(this::actionPerformed);    JRootPane rootPane = SwingUtilities.getRootPane(processButton);    rootPane.setDefaultButton(processButton);    setVisible(true);  }",setup
44,"  void <extra_id_0>() {    final var children = new Unit[5];    Arrays.setAll(children, (i) -> mock(Unit.class));    final var unit = this.factory.apply(children);    final var visitor = mock(UnitVisitor.class);    unit.accept(visitor);    verifyVisit(unit, visitor);    Arrays.stream(children).forEach(child -> verify(child).accept(eq(visitor)));    verifyNoMoreInteractions(children);    verifyNoMoreInteractions(visitor);  }  /**   * Verify if the correct visit method is called on the mock, depending on the tested instance.   *   * @param unit          The tested unit instance   * @param mockedVisitor The mocked {@link UnitVisitor} who should have gotten a visit by the unit   */",testAccept
352,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Weak warrior"")        .fighterClass(""none"")        .withWeapon(""Slingshot"")        .noAbilities()        .build();    assertEquals(""Weak warrior"", character.getName());    assertEquals(""none"", character.getFighterClass());    assertEquals(""Slingshot"", character.getWeapon());    assertNull(character.getAbilities());    assertNotNull(character.toString());  }",testBuildWeakWarrior
2643,"  void <extra_id_0>() {    var user = new User(""Free User"");    UserGroup.addUserToFreeGroup(user);    assertFalse(UserGroup.isPaid(user));  }  @Test",testAddUserToFreeGroup
403,    public void <extra_id_0>() {        System.setOut(new PrintStream(outContent));    }    @AfterEach,setUpStreams
2276,"  public void <extra_id_0>() {    var numbers = administration.performLottery();    logger.info(""The winning numbers: {}"", numbers.getNumbersAsString());    logger.info(""Time to reset the database for next round, eh?"");  }  @Override",performLottery
3251,  List<Book> <extra_id_0>(String username);,getAuthorBooks
2509,  public static <E> FluentIterable<E> <extra_id_0>(Iterable<E> iterable) {    return new LazyFluentIterable<>(iterable);  },from
3739,"  public void <extra_id_0>() {    LOGGER.info(""The sword is wielded."");    enchantment.onActivate();  }  @Override",wield
3314,  public void <extra_id_0>(LetterComposite letter) {    children.add(letter);  },add
2015,  public void <extra_id_0>(String order) {    this.orderItem = order;  },setOrderItem
3605,  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);  }  /**   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)}   */  @Test,setUp
786,  void <extra_id_0>() {    final var king = new King();    king.getFed();    king.getDrink();    king.changeMood();    assertTrue(king.getMood());  }  @Test,testFedDrunkUncomplimentedKing
1664,"  void <extra_id_0>() {    final var model = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);    assertEquals(Nourishment.SATURATED, model.getNourishment());    var messageFormat = ""The giant looks healthy, alert and %s."";    for (final var nourishment : Nourishment.values()) {      model.setNourishment(nourishment);      assertEquals(nourishment, model.getNourishment());      assertEquals(String.format(messageFormat, nourishment), model.toString());    }  }",testSetNourishment
2547,"  void <extra_id_0>() {    var weapon = factory.create(WeaponType.AXE);    verifyWeapon(weapon, Axe.class);  }  /**   * Testing {@link WeaponFactory} to produce a SWORD asserting that the Weapon is an instance of   * {@link Sword}   */  @Test",testAxeWeapon
3584,"  void <extra_id_0>() {    var imagePath = ""/product-image.png"";    var price = ""20"";    when(imageClient.getImagePath()).thenReturn(imagePath);    when(priceClient.getPrice()).thenReturn(price);    var desktopProduct = apiGateway.getProductDesktop();    assertEquals(price, desktopProduct.getPrice());    assertEquals(imagePath, desktopProduct.getImagePath());  }  /**   * Tests getting the data for a mobile client   */  @Test",testGetProductDesktop
1342,  public void <extra_id_0>(Item item) throws InterruptedException {    queue.put(item);  },put
2450,  protected abstract FluentIterable<Integer> <extra_id_0>(final Iterable<Integer> integers);  @Test,createFluentIterable
3358,"  private void <extra_id_0>() { //commander controls operations done to queue    var list = queue.exceptionsList;    var t2 = new Thread(() -> {      Retry.Operation op = (list1) -> {        if (!list1.isEmpty()) {          LOG.warn(""Error in accessing queue db to do tasks, trying again.."");          throw list1.remove(0);        }        doTasksInQueue();      };      Retry.HandleErrorIssue<QueueTask> handleError = (o, err) -> {      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, null);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t2.start();  }",tryDoingTasksInQueue
1073,  Saga <extra_id_0>(Saga saga);  /**   * The operation executed in rollback case.   *   * @param saga incoming saga   * @return result {@link Saga}   */,process
2527,  WeaponType <extra_id_0>();,getWeaponType
573,  public String <extra_id_0>() {    return name;  },getName
3363,"  private void <extra_id_0>(Order order) {    if (System.currentTimeMillis() - order.createdTime >= this.messageTime) {      LOG.trace(ORDER_ID + "": Message time for order over, returning.."", order.id);      return;    }    var list = messagingService.exceptionsList;    var t = new Thread(() -> {      Retry.Operation op = (l) -> {        handlePaymentFailureRetryOperation(order, l);      };      Retry.HandleErrorIssue<Order> handleError = (o, err) -> {        handlePaymentErrorIssue(order, o);      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, order);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",sendPaymentFailureMessage
765,  boolean <extra_id_0>();,getMood
847,  public ServerSocketChannel <extra_id_0>() {    return (ServerSocketChannel) super.getJavaChannel();  }  /**   * Reads and returns {@link ByteBuffer} from the underlying {@link SocketChannel} represented by   * the <code>key</code>. Due to the fact that there is a dedicated channel for each client   * connection we don't need to store the sender.   */  @Override,getJavaChannel
3072,"    void <extra_id_0>() {        customerDao = mock(CustomerDao.class);        customer = Customer.builder()                .name(""customer"")                .money(Money.of(CurrencyUnit.USD, 100.0))                .customerDao(customerDao)                .build();        product = Product.builder()                .name(""product"")                .price(Money.of(USD, 100.0))                .expirationDate(LocalDate.now().plusDays(10))                .productDao(mock(ProductDao.class))                .build();    }    @Test",setUp
2558,"  void <extra_id_0>() {    final List<Long> numbers = Arrays.asList(1L, 3L, 4L, 7L, 8L);    final List<SquareNumberRequest> requests =        numbers.stream().map(SquareNumberRequest::new).toList();    final Consumer consumer = new Consumer(0L);    final Long sumOfSquaredNumbers = FanOutFanIn.fanOutFanIn(requests, consumer);    Assertions.assertEquals(139, sumOfSquaredNumbers);  }",fanOutFanInTest
942,  public String <extra_id_0>() {    return msg;  },toString
2098,"  void <extra_id_0>() {    final var cake = new Cake();    assertNull(cake.getTopping());    final var expectedTopping = new CakeTopping(""DummyTopping"", 1000);    cake.setTopping(expectedTopping);    assertEquals(expectedTopping, cake.getTopping());  }  @Test",testSetTopping
2221,"  protected void <extra_id_0>() {    while (isGameRunning()) {      processInput();      update();      render();    }  }  /**   * Each time when update() is invoked, a new frame is created, and the bullet will be   * moved 0.5f away from the current position.   */",processGameLoop
2332,"  void <extra_id_0>() {    var repository = new InMemoryTicketRepository();    assertTrue(repository.findAll().isEmpty());    var ticket = LotteryTestUtils.createLotteryTicket();    var id = repository.save(ticket);    assertTrue(id.isPresent());    assertEquals(1, repository.findAll().size());    var optionalTicket = repository.findById(id.get());    assertTrue(optionalTicket.isPresent());  }",testCrudOperations
3680,"  public void <extra_id_0>(final UserAccount userAccount) {    if (cache.isFull() && !cache.contains(userAccount.getUserId())) {      LOGGER.info(""# Cache is FULL! Writing LRU data to DB..."");      UserAccount toBeWrittenToDb = cache.getLruData();      dbManager.upsertDb(toBeWrittenToDb);    }    cache.set(userAccount.getUserId(), userAccount);  }  /**   * Clears cache.   */",writeBehind
725,"  ReceiptViewModel <extra_id_0>(String userName, String itemName);",loggedInUserPurchase
1263,  public void <extra_id_0>(T value) {    super.fulfill(value);    postFulfillment();  }  /**   * Fulfills the promise with exception due to error in execution.   *   * @param exception the exception will be wrapped in {@link ExecutionException} when accessing the   *                  value using {@link #get()}.   */  @Override,fulfill
3384,  public abstract String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException;,receiveRequest
2960,      public Private <extra_id_0>(Double cost) {        this.cost = cost;        return this;      }      @Override,setCost
1808,  public Result<?> <extra_id_0>(Input<?> input) {    this.master.doWork(input);    return this.master.getFinalResult();  },getResult
802,  public double <extra_id_0>(double amount) {    return amount * TAX_PERCENTAGE / 100.0;  },calculate
2489,  public final E <extra_id_0>() {    if (next == null) {      return fromIterator.next();    } else {      final var result = next;      next = null;      return result;    }  }  /**   * Computes the next object of the Iterable. Can be implemented to realize custom behaviour for an   * iteration process. null is considered as end of data.   *   * @return the next element of the Iterable.   */,next
2917,  public void <extra_id_0>() {    // do nothing  }  /**   * render.   */  @Override,update
2353,"  void <extra_id_0>() {    System.setProperty(""mongo-host"", TEST_HOST);    System.setProperty(""mongo-port"", String.valueOf(TEST_PORT));    mongoDatabase.drop();    mongoBank = new MongoBank(mongoDatabase.getName(), TEST_ACCOUNTS_COLLECTION);  }  @AfterAll",init
525,  public abstract void <extra_id_0>(final String name);,setName
294,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3315,  public int <extra_id_0>() {    return children.size();  },count
2948,      public String <extra_id_0>() {        return name;      },getName
1504,"  public AlbumPage <extra_id_0>(String albumTitle) {    var albumTitleInputTextField = (HtmlTextInput) page.getElementById(""albumTitle"");    albumTitleInputTextField.setText(albumTitle);    return this;  }  /**   * Sets the artist input text field.   *   * @param artist the new artist value to set   * @return {@link AlbumPage}   */",changeAlbumTitle
1923,  boolean <extra_id_0>(int leaderId);  /**   * Send election message to other instances.   *   * @param currentId Instance ID of which sends this message.   * @param content   Election message content.   * @return {@code true} if the message is accepted by the target instances.   */,sendHeartbeatMessage
2140,    void <extra_id_0>();,deleteAllToppings
418,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(UserTableModule.DELETE_SCHEMA_SQL);    }  }  @Test,tearDown
2530,  public Weapon <extra_id_0>(WeaponType weaponType) {    return ORCARSENAL.get(weaponType);  }  @Override,manufactureWeapon
1556,  void <extra_id_0>() {    Assertions.assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1147,    public void <extra_id_0>(String body) {      throw poison();    }    @Override,setBody
3311,"  public static void <extra_id_0>(String[] args) {    var messenger = new Messenger();    LOGGER.info(""Message from the orcs: "");    messenger.messageFromOrcs().print();    LOGGER.info(""Message from the elves: "");    messenger.messageFromElves().print();  }",main
551,  List<Spell> <extra_id_0>();,findAllSpells
1905,"  void <extra_id_0>() {    try {      final var ringInstance = new RingInstance(null, 1, 1);      var ringMessage = new Message(MessageType.HEARTBEAT, """");      ringInstance.onMessage(ringMessage);      var ringInstanceClass = AbstractInstance.class;      var messageQueueField = ringInstanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      assertEquals(ringMessage, ((Queue<Message>) messageQueueField.get(ringInstance)).poll());    } catch (IllegalAccessException | NoSuchFieldException e) {      fail(""fail to access messasge queue."");    }  }  @Test",testOnMessage
3173,"  void <extra_id_0>() {    final var otherCustomer = new Customer(ID, FIRSTNAME, LASTNAME);    assertEquals(customer, otherCustomer);    assertEquals(customer.hashCode(), otherCustomer.hashCode());  }  @Test",equalsWithSameObjectValues
2328,"  public int <extra_id_0>(String bankAccount) {    return accountsCollection        .find(new Document(""_id"", bankAccount))        .limit(1)        .into(new ArrayList<>())        .stream()        .findFirst()        .map(x -> x.getInteger(""funds""))        .orElse(0);  }  @Override",getFunds
1949,"  protected void <extra_id_0>(Message message) {    var content = message.getContent();    LOGGER.info(INSTANCE + localId + "" - Election Message: "" + content);    var candidateList = Arrays.stream(content.trim().split("",""))        .map(Integer::valueOf)        .sorted()        .toList();    if (candidateList.contains(localId)) {      var newLeaderId = candidateList.get(0);      LOGGER.info(INSTANCE + localId + "" - New leader should be "" + newLeaderId + ""."");      messageManager.sendLeaderMessage(localId, newLeaderId);    } else {      content += "","" + localId;      messageManager.sendElectionMessage(localId, content);    }  }  /**   * Process leader Message. The instance will set the leader ID to be the new one and send the   * message to the next instance until all the alive instance in the ring is informed.   */  @Override",handleElectionMessage
3547,"      public String <extra_id_0>() throws RemoteServiceException {        return ""Remote Success"";      }    };",call
1781,"  void <extra_id_0>() {    var sword = new SwordOfAragorn();    Assertions.assertNotNull(sword.getName());    Assertions.assertNull(sword.getLocker());    Assertions.assertFalse(sword.isLocked());    var human = new Human(""Tupac"");    Assertions.assertTrue(human.acquire(sword));    Assertions.assertEquals(human, sword.getLocker());    Assertions.assertTrue(sword.isLocked());  }  @Test",basicSwordTest
737,"  void <extra_id_0>() {    var b1 = new Bubble(10, 10, 1, 2);    var b2 = new Bubble(0, 0, 2, 2);    var bubbles = new HashMap<Integer, Bubble>();    bubbles.put(1, b1);    bubbles.put(2, b2);    b1.pop(bubbles);    //after popping, bubble no longer in hashMap containing all bubbles    assertNull(bubbles.get(1));    assertNotNull(bubbles.get(2));  }  @Test",popTest
2340,"  void <extra_id_0>() {    var numbers = LotteryNumbers.createRandom();    assertEquals(numbers.getNumbers().size(), LotteryNumbers.NUM_NUMBERS);  }  @Test",testRandomNumbers
3714,"  public UserAccount <extra_id_0>(final String userId) {    var iterable = db            .getCollection(CachingConstants.USER_ACCOUNT)            .find(new Document(USER_ID, userId));    if (iterable.first() == null) {      return null;    }    Document doc = iterable.first();    if (doc != null) {      String userName = doc.getString(USER_NAME);      String appInfo = doc.getString(ADD_INFO);      return new UserAccount(userId, userName, appInfo);    } else {      return null;    }  }  /**   * Write data to DB.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override",readFromDb
1518,"  public AlbumPage <extra_id_0>(String albumTitle) {    // uses XPath to find list of html anchor tags with the class album in it    var albumLinks = (List<Object>) page.getByXPath(""//tr[@class='album']//a"");    for (var anchor : albumLinks) {      if (((HtmlAnchor) anchor).getTextContent().equals(albumTitle)) {        try {          ((HtmlAnchor) anchor).click();          return new AlbumPage(webClient);        } catch (IOException e) {          LOGGER.error(""An error occurred on selectAlbum"", e);        }      }    }    throw new IllegalArgumentException(""No links with the album title: "" + albumTitle);  }",selectAlbum
596,"  void <extra_id_0>() {    final var wizardDao = mock(WizardDao.class);    final var spellbookDao = mock(SpellbookDao.class);    final var spellDao = mock(SpellDao.class);    final var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    verifyNoInteractions(wizardDao, spellbookDao, spellDao);    service.findAllWizards();    verify(wizardDao).findAll();    verifyNoMoreInteractions(wizardDao, spellbookDao, spellDao);  }  @Test",testFindAllWizards
2077,"  public Integer <extra_id_0>() {    try {      return (Integer) entityManager.createNativeQuery(""SELECT 1"").getSingleResult();    } catch (Exception e) {      LOGGER.error(""Health check query failed"", e);      throw e;    }  }  /**   * Performs a test transaction by writing a record to the `health_check` table, reading it back,   * and then deleting it. If any of these operations fail, an exception is thrown.   *   * @throws Exception if the test transaction fails   */  @Transactional",checkHealth
2733,"  private void <extra_id_0>(final Weekday specialDay, final Event event) {    final var observer1 = mock(EventObserver.class);    final var observer2 = mock(EventObserver.class);    final var emitter = this.factoryWithoutDefaultObserver.get();    emitter.registerObserver(observer1, event);    emitter.registerObserver(observer2, event);    testAllDays(specialDay, event, emitter, observer1, observer2);  }  /**   * Go over every day of the month, and check if the event is emitted on the given day.   *   * @param specialDay The special day on which an event is emitted   * @param event      The expected event emitted by the test object   */",testAllDaysWithoutDefaultObserver
293,"  private String <extra_id_0>(String log) {    return log.split(""-"")[1].trim();  }",getLogContent
2471,"  <T> FluentIterable<T> <extra_id_0>(Function<? super E, T> function);  /**   * Returns the contents of this Iterable as a List.   *   * @return a List representation of this Iterable   */",map
691,"  void <extra_id_0>(Creature testedCreature, String name, Size size, Movement movement,                    Color color) {    assertEquals(color, testedCreature.getColor());  }  @ParameterizedTest  @MethodSource(""dataProvider"")",testGetColor
3770,"  long <extra_id_0>(int value) {    var result = serviceAmbassador.doRemoteFunction(value);    LOGGER.info(""Service result: {}"", result);    return result;  }",useService
2399,  public abstract int <extra_id_0>();  @Override,interpret
1898,  public Heavy <extra_id_0>() {    return heavy.get();  },getHeavy
3248,"  public BigInteger <extra_id_0>() {    BigInteger authorcount;    try (var session = sessionFactory.openSession()) {      var sqlQuery = session.createNativeQuery(""SELECT count(id) from Author"");      authorcount = (BigInteger) sqlQuery.uniqueResult();    }    return authorcount;  }",getAuthorsCount
1784,  void <extra_id_0>() {    assertDoesNotThrow(() -> (new App()).run());  },shouldExecuteApplicationAsRunnableWithoutException
2495,  public FluentIterable<E> <extra_id_0>(int count) {    return new LazyFluentIterable<>() {      @Override      public Iterator<E> iterator() {        return new DecoratingIterator<>(iterable.iterator()) {          int currentIndex;          @Override          public E computeNext() {            if (currentIndex < count && fromIterator.hasNext()) {              var candidate = fromIterator.next();              currentIndex++;              return candidate;            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the last object of this Iterable   */  @Override,first
887,"  private static void <extra_id_0>(AbstractNioChannel channel, SelectionKey key) {    var buffer = ByteBuffer.wrap(ACK);    channel.write(buffer, key);  }",sendReply
1845,"  public void <extra_id_0>(int numberOfWorkers, TaskSet taskSet, TaskHandler taskHandler) {    for (var id = 1; id <= numberOfWorkers; id++) {      var worker = new Worker(id, this, taskSet, taskHandler);      workers.add(worker);    }    promoteLeader();  }",createWorkers
3728,  void <extra_id_0>() {    assertNotNull(app);    app.useCacheAsideStategy();  },testCacheAsideStrategy
2022,"  void <extra_id_0>() {    // Make the HTTP request to the health endpoint    Response response = given(requestSpec).get(getEndpointBasePath()).andReturn();    // Log the response details    logResponseDetails(response);    // Check if the status is 503 (SERVICE_UNAVAILABLE)    if (response.getStatusCode() == HttpStatus.SERVICE_UNAVAILABLE.value()) {      LOGGER.warn(          ""Health endpoint returned 503 Service Unavailable. This may be due to CI pipeline ""              + ""configuration. Please check the CI pipeline logs."");      response          .then()          .assertThat()          .statusCode(HttpStatus.SERVICE_UNAVAILABLE.value())          .log()          .all(); // Log the entire response for visibility      return;    }    // If status is 200, proceed with additional checks    response        .then()        .assertThat()        .statusCode(HttpStatus.OK.value()) // Check that the status is UP        .body(""status"", equalTo(""UP"")) // Verify the status body is UP        .body(""components.cpu.status"", equalTo(""UP"")) // Check CPU status        .body(""components.db.status"", equalTo(""UP"")) // Check DB status        .body(""components.diskSpace.status"", equalTo(""UP"")) // Check disk space status        .body(""components.ping.status"", equalTo(""UP"")) // Check ping status        .body(""components.custom.status"", equalTo(""UP"")); // Check custom component status    // Check for ""DOWN"" status and high CPU load    if (""DOWN"".equals(response.path(""status""))) {      LOGGER.error(""Health endpoint response: "" + response.getBody().asString());      LOGGER.error(""Health endpoint status: "" + response.path(""status""));      LOGGER.error(          ""High CPU load detected: "" + response.path(""components.cpu.details.processCpuLoad""));    }  }  /**   * Test that the liveness endpoint returns the UP status.   *   * <p>The liveness endpoint is used to indicate whether the application is still running and   * responsive.   */  @Test",healthEndpointReturnsCompleteDetails
3110,  public final T <extra_id_0>(final U entity) {    return fromEntity.apply(entity);  }  /**   * Converts list of DTOs to list of Entities.   *   * @param dtos collection of DTO entities   * @return List of domain representation of provided entities retrieved by mapping each of them   *     with the conversion function   */,convertFromEntity
1701,  public void <extra_id_0>() {    this.dispose();  }  @Override,close
1191,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2563,"  public static Long <extra_id_0>(      final List<SquareNumberRequest> requests, final Consumer consumer) {    ExecutorService service = Executors.newFixedThreadPool(requests.size());    // fanning out    List<CompletableFuture<Void>> futures =        requests.stream()            .map(                request ->                    CompletableFuture.runAsync(() -> request.delayedSquaring(consumer), service))            .toList();    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();    return consumer.getSumOfSquaredNumbers().get();  }",fanOutFanIn
2882,  void <extra_id_0>();,soldierReady
1373,"  void <extra_id_0>() {    final var node = NullNode.getInstance();    assertEquals(0, node.getTreeSize());    assertNull(node.getName());    assertNull(node.getLeft());    assertNull(node.getRight());  }  /**   * Removed unnecessary test method for {@link NullNode#walk()} as the method doesn't have an implementation.   */",testFields
1078,  public Saga <extra_id_0>(Object value) {    if (chapters.isEmpty()) {      return this;    }    chapters.get(chapters.size() - 1).setInValue(value);    return this;  }  /**   * get value from current chapter.   *   * @return value   */,setInValue
1931,"  protected void <extra_id_0>() {    if (!isLeader()) {      LOGGER.info(INSTANCE + localId + ""- Start election."");      boolean electionResult = messageManager.sendElectionMessage(localId, String.valueOf(localId));      if (electionResult) {        LOGGER.info(INSTANCE + localId + ""- Succeed in election. Start leader notification."");        leaderId = localId;        messageManager.sendLeaderMessage(localId, localId);        messageManager.sendHeartbeatInvokeMessage(localId);      }    }  }  /**   * Process leader message. Update local leader information.   */  @Override",handleElectionInvokeMessage
2556,"  public String <extra_id_0>() {    return ""Sword"";  }",toString
2600,"  void <extra_id_0>(Command command, String displayMessage) {    assertEquals(0, appender.getLogSize());    command.process();    assertEquals(displayMessage, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testDisplay
1764,  Creature <extra_id_0>();  /**   * Returns the name of the object.   *   * @return the name of the object.   */,getLocker
2219,  public void <extra_id_0>(float position) {    this.position = position;  },setPosition
1500,"  void <extra_id_0>() {    var albumPageAfterChanges = albumPage        .changeAlbumTitle(""25"")        .changeArtist(""Adele Laurie Blue Adkins"")        .changeAlbumYear(2015)        .changeAlbumRating(""B"")        .changeNumberOfSongs(20)        .saveChanges();    assertTrue(albumPageAfterChanges.isAt());  }  @Test",testSaveAlbum
2849,"  void <extra_id_0>() {    testCollision(        new FlamingAsteroid(1, 1, 3, 4),        false, true,        false, false    );  }  /**   * Test what happens we collide with an meteoroid   */  @Test",testCollideFlamingAsteroid
3638,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[8];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = LITERAL.getIntValue();    bytecode[3] = 50;                        // health amount    bytecode[4] = SET_HEALTH.getIntValue();    bytecode[5] = LITERAL.getIntValue();    bytecode[6] = wizardNumber;    bytecode[7] = GET_HEALTH.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(Integer.valueOf(50), vm.getStack().pop());  }  @Test",testGetHealth
450,"  public void <extra_id_0>(String tenantName) {    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));  }  /**   * Increment the count of the specified tenant.   *   * @param tenantName name of the tenant.   */",addTenant
2901,"  void <extra_id_0>() throws Exception {    /* Create some students */    final var firstStudent = new Student(1, ""Adam"", 'A');    final var secondStudent = new Student(2, ""Donald"", 'B');    final var secondSameStudent = new Student(2, ""Donald"", 'B');    /* Check equals functionality: should return 'true' */    assertEquals(firstStudent, firstStudent);    /* Check equals functionality: should return 'false' */    assertNotEquals(firstStudent, secondStudent);    /* Check equals functionality: should return 'true' */    assertEquals(secondStudent, secondSameStudent);  }",testEquality
487,"  void <extra_id_0>() {    var data = new Data(1, ""test"", Data.DataType.TYPE_1);    rangeShardManager.storeData(data);    assertEquals(data, rangeShardManager.getShardById(1).getDataById(1));  }",testStoreData
1788,"  void <extra_id_0>() throws InterruptedException {    killCreature(elf, orc);    Assertions.assertTrue(elf.isAlive());    Assertions.assertFalse(orc.isAlive());    Assertions.assertTrue(elf.getHealth() > 0);    Assertions.assertTrue(orc.getHealth() <= 0);  }  @Test",testFight
836,"  public void <extra_id_0>() throws IOException {    getJavaChannel().socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), port));    getJavaChannel().configureBlocking(false);    LOGGER.info(""Bound UDP socket at port: {}"", port);  }  /**   * Writes the pending {@link DatagramPacket} to the underlying channel sending data to the   * intended receiver of the packet.   */  @Override",bind
178,  Stream<Room> <extra_id_0>() throws Exception;,getAll
1892,  abstract Heavy <extra_id_0>() throws Exception;  /**   * Request a lazy loaded {@link Heavy} object from the holder.   *   * @return The lazy loaded {@link Heavy} object   */,getInternalHeavyValue
1866,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
1095,  public ChoreographyChapter <extra_id_0>() {    return services.values().iterator().next();  },findAny
764,  void <extra_id_0>();,receiveCompliments
1880,  void <extra_id_0>(PartyMember member);,addMember
2865,"  void <extra_id_0>() {    Logger soldierLogger = (Logger) LoggerFactory.getLogger(Soldier.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    soldierLogger.addAppender(listAppender);    final var soldier = new Soldier(new SoldierUnit(""SoldierUnitTest""));    soldier.soldierReady();    List<ILoggingEvent> logsList = listAppender.list;    assertEquals(""[Soldier] "" + soldier.getUnit().getName() + "" is ready!"", logsList.get(0)        .getMessage());    assertEquals(Level.INFO, logsList.get(0)        .getLevel());  }",soldierReady
3067,"    void <extra_id_0>() throws SQLException {        TestUtils.executeSQL(INSERT_PRODUCT_SQL, dataSource);        product.setPrice(Money.of(USD, 99.0));        productDao.update(product);        try (var connection = dataSource.getConnection();             var statement = connection.createStatement();             ResultSet rs = statement.executeQuery(SELECT_PRODUCTS_SQL)) {            assertTrue(rs.next());            assertEquals(product.getName(), rs.getString(""name""));            assertEquals(product.getPrice(), Money.of(USD, rs.getBigDecimal(""price"")));            assertEquals(product.getExpirationDate(), rs.getDate(""expiration_date"").toLocalDate());        }    }",shouldUpdateProduct
1391,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3719,  public void <extra_id_0>() {    db = null;  }  /**   * Read from Db.   *   * @param userId {@link String}   * @return {@link UserAccount}   */  @Override,disconnect
718,"  public void <extra_id_0>() {    LOGGER.info(String.format(""Out of stock: %s for user = %s to buy"", itemName, userName));  }",show
2258,"  public int <extra_id_0>() {    var find = new Document(""_id"", TICKET_ID);    var increase = new Document(""seq"", 1);    var update = new Document(""$inc"", increase);    var result = countersCollection.findOneAndUpdate(find, update);    return result.getInteger(""seq"");  }  /**   * Get tickets collection.   *   * @return tickets collection   */",getNextId
1610,"  public List<Book> <extra_id_0>() {    return bookService.load();  }    /** Deleting a book.   * When event is triggered on click of Delete button,    * this method will be notified with the selected entry that will be referenced   * and used to delete the selected book from the list of books.    */  @Command  @NotifyChange({""selectedBook"", ""bookList""})",getBookList
1543,  public void <extra_id_0>() {    isDrunk = true;  }  @Override,makeDrunk
2451,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3, 10, 9, 8);    final var first = createFluentIterable(integers).first();    assertNotNull(first);    assertTrue(first.isPresent());    assertEquals(integers.get(0), first.get());  }  @Test",testFirst
3572,  String <extra_id_0>();,getPrice
474,  public static IvoryTower <extra_id_0>() {    return INSTANCE;  },getInstance
2829,  public abstract void <extra_id_0>(SpaceStationIss iss);,collisionResolve
3167,"  private void <extra_id_0>(int count) throws Exception {    try (var allCustomers = dao.getAll()) {      assertEquals(count, allCustomers.count());    }  }",assertCustomerCountIs
2481,  public static <E> FluentIterable<E> <extra_id_0>(Iterable<E> iterable) {    return new SimpleFluentIterable<>(iterable);  },from
3690,"  public void <extra_id_0>() {    LOGGER.info(""# CachingPolicy.AROUND"");    appManager.initCachingPolicy(CachingPolicy.AROUND);    var userAccount2 = new UserAccount(""002"", ""Jane"", ""She is a girl."");    appManager.save(userAccount2);    LOGGER.info(appManager.printCacheContent());    appManager.find(""002"");    LOGGER.info(appManager.printCacheContent());    userAccount2 = appManager.find(""002"");    userAccount2.setUserName(""Jane G."");    appManager.save(userAccount2);    LOGGER.info(appManager.printCacheContent());    appManager.find(""002"");    LOGGER.info(appManager.printCacheContent());    appManager.find(""002"");  }  /**   * Read-through and write-behind.   */",useReadThroughAndWriteAroundStrategy
2892,  public int <extra_id_0>() {    return decorated.getAttackPower() + 10;  }  @Override,getAttackPower
1957,"  public int <extra_id_0>(User user) {    LOGGER.info(""create user: "" + user.getUsername());    var id = -1;    try (var session = factory.openSession()) {      var tx = session.beginTransaction();      id = (Integer) session.save(user);      tx.commit();    } catch (HibernateException e) {      LOGGER.debug(""fail to create user"", e);    }    LOGGER.info(""create user "" + user.getUsername() + "" at "" + id);    return id;  }  /**   * Update user.   * @param id user id   * @param user new user entity   */",createUser
175,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setUrl(H2_DB_URL);    return dataSource;  },createDataSource
2911,"  public void <extra_id_0>(Student studentToBeInserted) throws DataMapperException {    Optional<Student> student = find(studentToBeInserted.getStudentId());    if (student.isPresent()) {      String name = studentToBeInserted.getName();      throw new DataMapperException(""Student already ["" + name + ""] exists"");    }    students.add(studentToBeInserted);  }  @Override",insert
1155,"  public void <extra_id_0>() {    while (true) {      try {        var msg = queue.take();        if (Message.POISON_PILL.equals(msg)) {          LOGGER.info(""Consumer {} receive request to terminate."", name);          break;        }        var sender = msg.getHeader(Headers.SENDER);        var body = msg.getBody();        LOGGER.info(""Message [{}] from [{}] received by [{}]"", body, sender, name);      } catch (InterruptedException e) {        // allow thread to exit        LOGGER.error(""Exception caught."", e);        return;      }    }  }",consume
2095,"  void <extra_id_0>() {    final var initialCakes = cakeBakingService.getAllCakes();    assertNotNull(initialCakes);    assertTrue(initialCakes.isEmpty());    final var topping1 = new CakeToppingInfo(""Topping1"", 1000);    cakeBakingService.saveNewTopping(topping1);    final var layer1 = new CakeLayerInfo(""Layer1"", 1000);    cakeBakingService.saveNewLayer(layer1);    final var missingLayer = new CakeLayerInfo(""Layer2"", 2000);    assertThrows(CakeBakingException.class, () -> cakeBakingService.bakeNewCake(new CakeInfo(topping1, List.of(layer1, missingLayer))));  }  @Test",testBakeCakeMissingLayer
87,  public void <extra_id_0>(Weapon weapon) {    //Some insert logic to DB  },insert
1551,"  public String <extra_id_0>(Video video, String[] fields) throws Exception {    var json = new StringBuilder().append(""{"");    var i = 0;    var fieldsLength = fields.length;    while (i < fieldsLength) {      json.append(getString(video, Video.class.getDeclaredField(fields[i])));      if (i != fieldsLength - 1) {        json.append("","");      }      i++;    }    json.append(""}"");    return json.toString();  }",toJson
1302,"  void <extra_id_0>()      throws InterruptedException {    var dependentPromise = promise        .fulfillInAsync(new NumberCrunchingTask(), executor)        .thenApply(value -> {          throw new RuntimeException(""Barf!"");        });    try {      dependentPromise.get();      fail(""Fetching dependent promise should result in exception ""          + ""if the function threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }    try {      dependentPromise.get(1000, TimeUnit.SECONDS);      fail(""Fetching dependent promise should result in exception ""          + ""if the function threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }  }  @Test",dependentPromiseIsFulfilledWithAnExceptionIfTheFunctionThrowsException
2612,  public int <extra_id_0>() {    return log.size();  },getLogSize
1201,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testArtist = ""TestArtist"";    model.setArtist(testArtist);    assertEquals(testArtist, model.getArtist());  }  @Test",testSetArtist_1
101,"  void <extra_id_0>(int points) {    LOGGER.info(""+"" + points + "" points!"");    this.totalPoints += points;    printGameStatus();  }",handleChange
1584,"  public FileLoggerModule <extra_id_0>() throws FileNotFoundException {    LOGGER.debug(""FileLoggerModule::prepare();"");    this.output = new PrintStream(new FileOutputStream(OUTPUT_FILE));    this.error = new PrintStream(new FileOutputStream(ERROR_FILE));    return this;  }  /**   * Following method performs the finalization.   */",prepare
286,  private String <extra_id_0>(Statement statement) throws Exception {    var log = tapSystemOutNormalized(statement);    return getLogContent(log);  },getLogContent
362,"  static Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{            new MeleeStrategy(),            ""With your Excalibur you sever the dragon's head!""        },        new Object[]{            new ProjectileStrategy(),            ""You shoot the dragon with the magical crossbow and it falls dead on the ground!""        },        new Object[]{            new SpellStrategy(),            ""You cast the spell of disintegration and the dragon vaporizes in a pile of dust!""        }    );  }",dataProvider
595,"  void <extra_id_0>() {    final var dao = getDao();    final var allSpells = dao.findAll();    for (final var spell : allSpells) {      final var spellByName = dao.findByName(spell.getName());      assertNotNull(spellByName);      assertEquals(spell.getId(), spellByName.getId());      assertEquals(spell.getName(), spellByName.getName());    }  }",testFindByName
1577,  public void <extra_id_0>(final String value) {    this.output.println(value);  }  /**   * Used to print a error message.   *   * @param value will be printed on error console   */,printString
2298,  void <extra_id_0>(PlayerDetails details);  /**   * lottery ticket won.   */,ticketDidNotWin
3245,"  public Book <extra_id_0>(String title) {    Book bookDto;    try (var session = sessionFactory.openSession()) {      Query<Book> sqlQuery = session.createQuery(              ""select new com.iluwatar.cqrs.dto.Book(b.title, b.price)""                      + "" from com.iluwatar.cqrs.domain.model.Book b where b.title=:title"");      sqlQuery.setParameter(""title"", title);      bookDto = sqlQuery.uniqueResult();    }    return bookDto;  }  @Override",getBook
3159,"    void <extra_id_0>() throws Exception {      final var nonExistingCustomer = new Customer(2, ""Robert"", ""Englund"");      var result = dao.delete(nonExistingCustomer);      assertFalse(result);      assertCustomerCountIs(1);    }    @Test",deletionShouldBeFailureAndNotAffectExistingCustomers
2366,"  public void <extra_id_0>(Person person) {    if (!personMap.containsKey(person.getPersonNationalId())) {      personMap.put(person.getPersonNationalId(), person);    } else { // Ensure that addPerson does not update a record. This situation will never arise in our implementation. Added only for testing purposes.      LOGGER.info(""Key already in Map"");    }  }  /**   * Get Person with given id.   *   * @param id : personNationalId as requested by user.   */",addPerson
1693,  public void <extra_id_0>(String name) {    this.name = name;  }  @Override,setFileName
3109,  public final U <extra_id_0>(final T dto) {    return fromDto.apply(dto);  }  /**   * Converts Entity to DTO.   *   * @param entity domain entity   * @return The DTO representation - the result of the converting function application on domain   *     entity.   */,convertFromDto
462,    void <extra_id_0>() {        assertDoesNotThrow(() -> App.main(new String[]{}));    },shouldExecuteSerializedEntityWithoutException
717,    public Double <extra_id_0>() {      return price;    }  }},getPrice
1913,"  void <extra_id_0>() {    var instance1 = new BullyInstance(null, 1, 1);    Map<Integer, Instance> instanceMap = Map.of(1, instance1);    var messageManager = new BullyMessageManager(instanceMap);    assertTrue(messageManager.sendHeartbeatMessage(1));  }  @Test",testSendHeartbeatMessage
1204,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testComposer = ""TestComposer"";    model.setIsClassical(false);    model.setComposer(testComposer);    assertEquals("""", model.getComposer());  }  @Test",testSetComposer_false
1202,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testArtist = """";    model.setArtist(testArtist);    assertEquals(testArtist, model.getArtist());  }  @Test",testSetArtist_2
155,"  void <extra_id_0>() {    assertEquals(room, room);    assertEquals(room.hashCode(), room.hashCode());  }  @Test",equalsWithSameObjects
1753,"  void <extra_id_0>() {    final var star = new Star(StarType.SUN, 1, 2);    assertEquals(""sun age: 1 years mass: 2 tons"", star.toString());    star.timePasses();    assertEquals(""red giant age: 2 years mass: 16 tons"", star.toString());    star.timePasses();    assertEquals(""white dwarf age: 4 years mass: 128 tons"", star.toString());    star.timePasses();    assertEquals(""supernova age: 8 years mass: 1024 tons"", star.toString());    star.timePasses();    assertEquals(""dead star age: 16 years mass: 8192 tons"", star.toString());    star.timePasses();    assertEquals(""dead star age: 64 years mass: 0 tons"", star.toString());    star.timePasses();    assertEquals(""dead star age: 256 years mass: 0 tons"", star.toString());  }  /**   * Verify some stage of a dying sun, but go back in time to test the memento   */  @Test",testTimePasses
2596,"  void <extra_id_0>() {    final var cause = new Exception();    assertSame(cause, new ApplicationException(cause).getCause());  }",testCause
1659,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2939,      public Create <extra_id_0>(String name) {        this.name = name;        return this;      }      @Override,setName
370,"  void <extra_id_0>() {    final var initialStrategy = mock(DragonSlayingStrategy.class);    final var dragonSlayer = new DragonSlayer(initialStrategy);    dragonSlayer.goToBattle();    verify(initialStrategy).execute();    final var newStrategy = mock(DragonSlayingStrategy.class);    dragonSlayer.changeStrategy(newStrategy);    dragonSlayer.goToBattle();    verify(newStrategy).execute();    verifyNoMoreInteractions(initialStrategy, newStrategy);  }",testChangeStrategy
932,"    public void <extra_id_0>() {      synchronized (globalMutex) {        // Wait until the lock is free.        while (!isLockFree()) {          try {            globalMutex.wait();          } catch (InterruptedException e) {            LOGGER.info(""InterruptedException while waiting for globalMutex to begin writing"", e);            Thread.currentThread().interrupt();          }        }        // When the lock is free, acquire it by placing an entry in globalMutex        globalMutex.add(this);      }    }    @Override",lock
453,"  public void <extra_id_0>() {    tenantCallsCount.replaceAll((k, v) -> new AtomicLong(0));    LOGGER.info(""reset counters"");  }",reset
2130,    public void <extra_id_0>() {        cakeToppingDao.deleteAll();    }    @Override,deleteAllToppings
1831,"  void <extra_id_0>() {    var matrix1 = new int[][]{{1, 4, 2, 6}, {5, 8, 6, 7}};    var matrix2 = new int[][]{{1, 4, 2, 6}, {5, 8, 6, 7}};    assertTrue(ArrayUtilityMethods.matricesSame(matrix1, matrix2));  }",matricesSameTest
160,"  void <extra_id_0>() {    assertThrows(Exception.class, () -> {      hotel.bookRoom(1);      hotel.bookRoom(1);    });  }  @Test",bookingRoomAgainShouldRaiseException
2605,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1819,  public Result<?> <extra_id_0>() {    return this.finalResult;  },getFinalResult
1002,"  public boolean <extra_id_0>(Role role) {    return role        .instance()        .map(inst -> {          roles.put(role, inst);          return true;        })        .orElse(false);  }  @Override",addRole
1717,"  public void <extra_id_0>() {    if (loader.getFileName() == null || loader.getFileName().equals("""")) {      view.showMessage(""Please give the name of the file first!"");      return;    }    if (loader.fileExists()) {      var data = loader.loadData();      view.displayData(data);    } else {      view.showMessage(""The file specified does not exist."");    }  }  /**   * Cancels the file loading process.   */",confirmed
673,  public Size <extra_id_0>() {    return size;  }  @Override,getSize
1942,"  public static void <extra_id_0>(String[] args) {    Map<Integer, Instance> instanceMap = new HashMap<>();    var messageManager = new BullyMessageManager(instanceMap);    var instance1 = new BullyInstance(messageManager, 1, 1);    var instance2 = new BullyInstance(messageManager, 2, 1);    var instance3 = new BullyInstance(messageManager, 3, 1);    var instance4 = new BullyInstance(messageManager, 4, 1);    var instance5 = new BullyInstance(messageManager, 5, 1);    instanceMap.put(1, instance1);    instanceMap.put(2, instance2);    instanceMap.put(3, instance3);    instanceMap.put(4, instance4);    instanceMap.put(5, instance5);    instance4.onMessage(new Message(MessageType.HEARTBEAT_INVOKE, """"));    final var thread1 = new Thread(instance1);    final var thread2 = new Thread(instance2);    final var thread3 = new Thread(instance3);    final var thread4 = new Thread(instance4);    final var thread5 = new Thread(instance5);    thread1.start();    thread2.start();    thread3.start();    thread4.start();    thread5.start();    instance1.setAlive(false);  }",main
267,"  void <extra_id_0>() {    assertFalse(source.ifNonZero(-1, 0, 1));  }",testIfNonZero
1455,  T <extra_id_0>(long id);  /**   * Get current object version.   *   * @param id primary key   * @return object's version   */,findById
1469,"  public static void <extra_id_0>(String[] args) {    try {      var classLoader = App.class.getClassLoader();      var applicationFile = new File(classLoader.getResource(""sample-ui/login.html"").getPath());      // Should work for unix like OS (mac, unix etc...)      if (Desktop.isDesktopSupported()) {        Desktop.getDesktop().open(applicationFile);      } else {        // Java Desktop not supported - above unlikely to work for Windows so try the        // following instead...        Runtime.getRuntime().exec(""cmd.exe start "" + applicationFile);      }    } catch (IOException ex) {      ex.printStackTrace();    }  }",main
1162,  void <extra_id_0>() {    appender = new InMemoryAppender(Consumer.class);  }  @AfterEach,setUp
1321,"  public void <extra_id_0>(Stats stat, Integer val) {    properties.put(stat, val);  }  @Override",set
3016,  public Pixel[] <extra_id_0>() {    return pixels;  },getPixels
1058,"  public static <K> ChapterResult<K> <extra_id_0>(K val) {    return new ChapterResult<>(val, State.FAILURE);  }  /**   * state for chapter.   */",failure
2601,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1761,  boolean <extra_id_0>();  /**   * locks the object with the creature as the locker.   *   * @param creature as the locker.   * @return true if the object was locked successfully.   */,isLocked
698,"  void <extra_id_0>() {    final Logger LOGGER = (Logger) LoggerFactory.getLogger(InvalidUser.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    LOGGER.addAppender(listAppender);    receipt = applicationServices.loggedInUserPurchase(""a"", null);    receipt.show();    List<ILoggingEvent> loggingEventList = listAppender.list;    assertEquals(""Invalid user: a"", loggingEventList.get(0).getMessage());    assertEquals(Level.INFO, loggingEventList.get(0).getLevel());  }  @Test",testInvalidUser
2255,"  public void <extra_id_0>() {    connect(DEFAULT_DB, DEFAULT_TICKETS_COLLECTION, DEFAULT_COUNTERS_COLLECTION);  }  /**   * Connect to database with given parameters.   */",connect
1432,"  public static void <extra_id_0>(String[] args) {    ParameterObject params = ParameterObject.newBuilder()        .withType(""sneakers"")        .sortBy(""brand"")        .build();    LOGGER.info(params.toString());    LOGGER.info(new SearchService().search(params));  }",main
2291,"  public void <extra_id_0>(PlayerDetails details) {    var document = new Document(EMAIL, details.getEmail());    document.put(PHONE, details.getPhoneNumber());    document.put(""bank"", details.getBankAccount());    document        .put(MESSAGE, ""Lottery ticket was submitted and bank account was charged for 3 credits."");    eventsCollection.insertOne(document);    stdOutEventLog.ticketSubmitted(details);  }  @Override",ticketSubmitted
1368,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
509,  public void <extra_id_0>(DataType type) {    this.type = type;  },setType
99,"  List<Cell> <extra_id_0>(int y, int x) {    var adjacent = new ArrayList<Cell>();    if (y == 0) {      adjacent.add(this.cells[1][x]);    }    if (x == 0) {      adjacent.add(this.cells[y][1]);    }    if (y == cells.length - 1) {      adjacent.add(this.cells[cells.length - 2][x]);    }    if (x == cells.length - 1) {      adjacent.add(this.cells[y][cells.length - 2]);    }    if (y > 0 && y < cells.length - 1) {      adjacent.add(this.cells[y - 1][x]);      adjacent.add(this.cells[y + 1][x]);    }    if (x > 0 && x < cells.length - 1) {      adjacent.add(this.cells[y][x - 1]);      adjacent.add(this.cells[y][x + 1]);    }    return adjacent;  }",adjacentCells
1252,  void <extra_id_0>() {    appender = new InMemoryAppender(IvoryTower.class);  }  @AfterEach,setUp
2590,"  private ThreatAwareSystem <extra_id_0>(Predicate<? super Threat> predicate) {    return new SimpleThreatAwareSystem(this.systemId, filteredItems(predicate));  }",filteredGroup
1008,"  public static void <extra_id_0>(String[] args) {    var customer = Customer.newCustomer(Borrower, Investor);    LOGGER.info("" the new customer created : {}"", customer);    var hasBorrowerRole = customer.hasRole(Borrower);    LOGGER.info("" customer has a borrowed role - {}"", hasBorrowerRole);    var hasInvestorRole = customer.hasRole(Investor);    LOGGER.info("" customer has an investor role - {}"", hasInvestorRole);    customer.getRole(Investor, InvestorRole.class)        .ifPresent(inv -> {          inv.setAmountToInvest(1000);          inv.setName(""Billy"");        });    customer.getRole(Borrower, BorrowerRole.class)        .ifPresent(inv -> inv.setName(""Johny""));    customer.getRole(Investor, InvestorRole.class)        .map(InvestorRole::invest)        .ifPresent(LOGGER::info);    customer.getRole(Borrower, BorrowerRole.class)        .map(BorrowerRole::borrow)        .ifPresent(LOGGER::info);  }",main
2286,"  public void <extra_id_0>() {    connect(DEFAULT_DB, DEFAULT_EVENTS_COLLECTION);  }  /**   * Connect to database with given parameters.   */",connect
669,  Color <extra_id_0>();,getColor
3843,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Constructing parts and car"");    var wheelProperties = Map.of(        Property.TYPE.toString(), ""wheel"",        Property.MODEL.toString(), ""15C"",        Property.PRICE.toString(), 100L);    var doorProperties = Map.of(        Property.TYPE.toString(), ""door"",        Property.MODEL.toString(), ""Lambo"",        Property.PRICE.toString(), 300L);    var carProperties = Map.of(        Property.MODEL.toString(), ""300SL"",        Property.PRICE.toString(), 10000L,        Property.PARTS.toString(), List.of(wheelProperties, doorProperties));    var car = new Car(carProperties);    LOGGER.info(""Here is our car:"");    LOGGER.info(""-> model: {}"", car.getModel().orElseThrow());    LOGGER.info(""-> price: {}"", car.getPrice().orElseThrow());    LOGGER.info(""-> parts: "");    car.getParts().forEach(p -> LOGGER.info(""\t{}/{}/{}"",        p.getType().orElse(null),        p.getModel().orElse(null),        p.getPrice().orElse(null))    );  }",main
3234,"  public static AddGenre <extra_id_0>() {    return genre        -> author            -> title                -> publicationDate                    -> new Book(genre, author, title, publicationDate);  }  /**   * Functional interface which adds the genre to a book.   */",builder
3126,  public void <extra_id_0>(String sessionService) {    context.setSessionService(sessionService);  },addSessionInfo
2363,"  public void <extra_id_0>(int id) throws IdNotFoundException {    Optional<Person> elem = personList.stream().filter(p -> p.getPersonNationalId() == id).findFirst();    if (elem.isPresent()) {      personList.remove(elem.get());      LOGGER.info(""Record deleted successfully."");      return;    }    throw new IdNotFoundException(ID_STR + id + NOT_IN_DATA_BASE);  }  /**   * Return the size of the database.   */",delete
2480,  public List<E> <extra_id_0>() {    return toList(iterable.iterator());  }  /**   * Constructs FluentIterable from iterable.   *   * @return a FluentIterable from a given iterable. Calls the SimpleFluentIterable constructor.   */,asList
3858,"  void <extra_id_0>() {    var props = Map.of(KEY, (Object) VALUE);    var document = new DocumentImplementation(props);    assertTrue(document.toString().contains(KEY));    assertTrue(document.toString().contains(VALUE));  }",shouldIncludePropsInToString
3284,"  void <extra_id_0>() {    //given    final var startTime = LocalDateTime.of(2017, Month.APRIL, 1, 19, 9);    final var startingData = new StartingData(startTime);    final var statusMember = new StatusMember(1);    //when    statusMember.accept(startingData);    //then    assertEquals(startTime, statusMember.getStarted());  }  @Test",statusRecordsTheStartTime
1090,    public void <extra_id_0>(Object object) {      this.inValue = object;    },setInValue
536,  public List<E> <extra_id_0>() {    Transaction tx = null;    List<E> result;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();      CriteriaQuery<E> builderQuery = criteriaBuilder.createQuery(persistentClass);      Root<E> root = builderQuery.from(persistentClass);      builderQuery.select(root);      Query<E> query = session.createQuery(builderQuery);      result = query.getResultList();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  },findAll
2155,"  void <extra_id_0>() throws Exception {    final var result = new Object();    when(task.call()).thenReturn(result);    service.execute(task);    verify(task, timeout(2000)).onPostCall(eq(result));    final var inOrder = inOrder(task);    inOrder.verify(task, times(1)).onPreCall();    inOrder.verify(task, times(1)).call();    inOrder.verify(task, times(1)).onPostCall(eq(result));    verifyNoMoreInteractions(task);  }  @Test",testPerfectExecution
1559,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
306,"  protected void <extra_id_0>(String target) {    LOGGER.info(""Grab the handbag and run away fast!"");  }",stealTheItem
3807,"  public void <extra_id_0>() {    LOGGER.info(""elf kingdom"");    createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);    LOGGER.info(kingdom.getArmy().getDescription());    LOGGER.info(kingdom.getCastle().getDescription());    LOGGER.info(kingdom.getKing().getDescription());    LOGGER.info(""orc kingdom"");    createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);    LOGGER.info(kingdom.getArmy().getDescription());    LOGGER.info(kingdom.getCastle().getDescription());    LOGGER.info(kingdom.getKing().getDescription());  }  /**   * Creates kingdom.   * @param kingdomType type of Kingdom   */",run
3332,  public void <extra_id_0>() {    this.coordinate += this.velocity;  },updateCoordinate
211,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3550,"  void <extra_id_0>() {    //Calling delayed service, which will be unhealthy till 4 seconds    assertEquals(""Delayed service is down"", monitoringService.delayedServiceResponse());    //As failure threshold is ""1"", the circuit breaker is changed to OPEN    assertEquals(""OPEN"", delayedServiceCircuitBreaker.getState());    //Waiting for recovery period of 2 seconds for circuit breaker to retry service.    try {      LOGGER.info(""Waiting 2s for delayed service to become responsive"");      Thread.sleep(2000);    } catch (InterruptedException e) {      e.printStackTrace();    }    //After 2 seconds, the circuit breaker should move to ""HALF_OPEN"" state and retry fetching response from service again    assertEquals(""HALF_OPEN"", delayedServiceCircuitBreaker.getState());  }  @Test",testFailure_HalfOpenStateTransition
3250,  Book <extra_id_0>(String title);,getBook
3809,  String <extra_id_0>();,getDescription
3052,"  public void <extra_id_0>(Customer customer) throws SQLException {    var sql = ""update CUSTOMERS set money = ? where name = ?;"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setBigDecimal(1, customer.getMoney().getAmount());      preparedStatement.setString(2, customer.getName());      preparedStatement.executeUpdate();    }  }  @Override",update
2840,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2374,  void <extra_id_0>(int personNationalId);,delete
1933,  private boolean <extra_id_0>() {    return localId == leaderId;  }  @Override,isLeader
2912,"  public void <extra_id_0>(Student studentToBeDeleted) throws DataMapperException {    if (!students.remove(studentToBeDeleted)) {      String name = studentToBeDeleted.getName();      throw new DataMapperException(""Student ["" + name + ""] is not found"");    }  }",delete
815,  public List<Exception> <extra_id_0>() {    return Collections.unmodifiableList(this.errors);  }  /**   * The number of retries performed.   *   * @return the number of retries performed   */,errors
2550,"  public String <extra_id_0>() {    return ""Bow"";  }",toString
1495,  void <extra_id_0>() {    albumListPage.navigateToPage();  }  @Test,setUp
367,    public int <extra_id_0>() {      return log.size();    },getLogSize
315,    public int <extra_id_0>() {      return log.size();    },getLogSize
1019,"    public String <extra_id_0>() {      return ""2"";    }    @Override",getName
2431,  public void <extra_id_0>(Action action) {    if (action.getType().equals(ActionType.MENU_ITEM_SELECTED)) {      var menuAction = (MenuAction) action;      selected = menuAction.getMenuItem();      notifyChange();    }  },onAction
323,  public static NameStep <extra_id_0>() {    return new CharacterSteps();  }  /**   * First Builder Step in charge of the Character name. Next Step available : ClassStep   */,newBuilder
2638,  void <extra_id_0>() {    assertTrue(service.isEnhanced());  },testIsEnhancedAlwaysTrueAsTiered
3253,  BigInteger <extra_id_0>();,getAuthorsCount
3345,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase(), new ItemUnavailableException());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }  /**   * Program entry point.   *   * @param args command line args   */",employeeDbSuccessCase
17,  public void <extra_id_0>() {    isSuspended = !isSuspended;    if (isSuspended) {      twin.suspendMe();    } else {      twin.resumeMe();    }  },click
2592,  G <extra_id_0>(Predicate<? super E> predicate);,by
2042,"  void <extra_id_0>() {    // Arrange    doThrow(new RuntimeException()).when(entityManager).persist(any(HealthCheck.class));    // Act & Assert    assertThrows(RuntimeException.class, () -> healthCheckRepository.performTestTransaction());    // Verify that remove is not called if persist fails    verify(entityManager, never()).remove(any(HealthCheck.class));  }",whenPerformTestTransaction_andPersistFails_thenThrowsException
3169,"  void <extra_id_0>() {    final var newId = 2;    customer.setId(newId);    assertEquals(newId, customer.getId());  }  @Test",getAndSetId
3640,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[3];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = SPAWN_PARTICLES.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(0, vm.getStack().size());    assertEquals(1, vm.getWizards()[0].getNumberOfSpawnedParticles());  }  @Test",testSpawnParticles
2093,"  void <extra_id_0>() throws CakeBakingException {    final var initialCakes = cakeBakingService.getAllCakes();    assertNotNull(initialCakes);    assertTrue(initialCakes.isEmpty());    final var topping1 = new CakeToppingInfo(""Topping1"", 1000);    final var topping2 = new CakeToppingInfo(""Topping2"", 2000);    cakeBakingService.saveNewTopping(topping1);    cakeBakingService.saveNewTopping(topping2);    final var layer1 = new CakeLayerInfo(""Layer1"", 1000);    final var layer2 = new CakeLayerInfo(""Layer2"", 2000);    final var layer3 = new CakeLayerInfo(""Layer3"", 2000);    cakeBakingService.saveNewLayer(layer1);    cakeBakingService.saveNewLayer(layer2);    cakeBakingService.saveNewLayer(layer3);    cakeBakingService.bakeNewCake(new CakeInfo(topping1, List.of(layer1, layer2)));    cakeBakingService.bakeNewCake(new CakeInfo(topping2, Collections.singletonList(layer3)));    final var allCakes = cakeBakingService.getAllCakes();    assertNotNull(allCakes);    assertEquals(2, allCakes.size());    for (final var cakeInfo : allCakes) {      assertNotNull(cakeInfo.id);      assertNotNull(cakeInfo.cakeToppingInfo);      assertNotNull(cakeInfo.cakeLayerInfos);      assertNotNull(cakeInfo.toString());      assertFalse(cakeInfo.cakeLayerInfos.isEmpty());      assertTrue(cakeInfo.calculateTotalCalories() > 0);    }  }  @Test",testBakeCakes
2718,"  void <extra_id_0>() {    var file = new File(""testfile.txt"");    file.delete();  }",cleanup
1413,  void <extra_id_0>(WeatherType currentWeather);,update
2391,"  public Stream<Arguments> <extra_id_0>() {    return prepareParameters((f, s) -> f * s);  }  /**   * Create a new test instance using the given test parameters and expected result   */",expressionProvider
2652,  abstract void <extra_id_0>(DomainEvent domainEvent);  /**   * Reset.   */,write
22,  private static void <extra_id_0>() throws Exception {    Thread.sleep(750);  },waiting
1265,  private void <extra_id_0>(Exception exception) {    if (exceptionHandler == null) {      return;    }    exceptionHandler.accept(exception);  },handleException
390,    public int <extra_id_0>() {      return log.size();    },getLogSize
2048,"  void <extra_id_0>() {    // Arrange: Mock the garbage collector to simulate no collections    when(garbageCollectorMXBean.getCollectionCount()).thenReturn(0L);    when(garbageCollectorMXBean.getCollectionTime()).thenReturn(0L);    when(garbageCollectorMXBean.getName()).thenReturn(""G1 Young Generation"");    when(garbageCollectorMXBean.getMemoryPoolNames()).thenReturn(new String[] {});    // Act: Perform the health check    Health health = healthIndicator.health();    // Assert: Ensure the health is up and there are no warnings    assertEquals(Status.UP, health.getStatus());    Map<String, Object> gcDetails =        (Map<String, Object>) health.getDetails().get(""G1 Young Generation"");    assertNotNull(gcDetails, ""Expected details for 'G1 Young Generation', but none were found."");    assertNull(        gcDetails.get(""warning""),        ""Expected no warning for 'G1 Young Generation' as there are no collections."");  }",whenNoGarbageCollections_thenHealthIsUp
3187,    private DataSource <extra_id_0>() throws SQLException {      var mockedDataSource = mock(DataSource.class);      var mockedConnection = mock(Connection.class);      var exception = new SQLException(EXCEPTION_CAUSE);      doThrow(exception).when(mockedConnection).prepareStatement(Mockito.anyString());      doReturn(mockedConnection).when(mockedDataSource).getConnection();      return mockedDataSource;    }    @Test,mockedDatasource
1450,  public void <extra_id_0>() {    cardRepository = Mockito.mock(JpaRepository.class);    cardUpdateService = new CardUpdateService(cardRepository);  }  @Test,setUp
1534,  void <extra_id_0>();,makeSober
2160,"  private static void <extra_id_0>() {    LOGGER.info(""------------------------"");    LOGGER.info(""BST Iterator: "");    var root = buildIntegerBst();    var bstIterator = new BstIterator<>(root);    while (bstIterator.hasNext()) {      LOGGER.info(""Next node: "" + bstIterator.next().getVal());    }  }",demonstrateBstIterator
558,  public List<Wizard> <extra_id_0>(String name) {    var spell = spellDao.findByName(name);    var spellbook = spell.getSpellbook();    return new ArrayList<>(spellbook.getWizards());  },findWizardsWithSpell
3804,"  void <extra_id_0>() {    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);    final var kingdom = app.getKingdom();    final var king = kingdom.getKing();    final var castle = kingdom.getCastle();    final var army = kingdom.getArmy();    assertTrue(king instanceof OrcKing);    assertEquals(OrcKing.DESCRIPTION, king.getDescription());    assertTrue(castle instanceof OrcCastle);    assertEquals(OrcCastle.DESCRIPTION, castle.getDescription());    assertTrue(army instanceof OrcArmy);    assertEquals(OrcArmy.DESCRIPTION, army.getDescription());  }",verifyOrcKingdomCreation
2795,  Stream<Order> <extra_id_0>() throws SQLException;  ,queryOrders
1051,    int <extra_id_0>() {      return ++currentNumber;    },forward
964,"  void <extra_id_0>() {    var terry = repository.findByName(""Terry"");    terry.setSurname(""Lee"");    terry.setAge(47);    repository.save(terry);    terry = repository.findByName(""Terry"");    assertEquals(terry.getSurname(), ""Lee"");    assertEquals(47, terry.getAge());  }  @Test",testSave
3876,"	void <extra_id_0>() throws InterruptedException {		ActiveCreature orc = new Orc(""orc1"");		assertEquals(""orc1"",orc.name());		assertEquals(0,orc.getStatus());		orc.eat();		orc.roam();		orc.kill(0);	}	",executionTest
1407,  void <extra_id_0>() {    appender.stop();  }  /**   * The observer instance factory   */,tearDown
3468,  public static Finder <extra_id_0>(String... queries) {    var finder = identMult();    for (String query : queries) {      finder = finder.and(Finder.contains(query));    }    return finder;  }  /**   * Expanded query. Looking for alternatives.   * @param queries array with queries.   * @return new finder   */,specializedFinder
2979,"      public void <extra_id_0>() {        var countries = world.fetch();        LOGGER.info(""Our world currently has the following countries:-"");        countries.stream().map(country -> ""\t"" + country).forEach(LOGGER::info);      }",run
2641,"  void <extra_id_0>() {    final var properties = new Properties();    properties.put(""enhancedWelcome"", true);    var service = new PropertiesFeatureToggleVersion(properties);    assertTrue(service.isEnhanced());    final var welcomeMessage = service.getWelcomeMessage(new User(""Jamie No Code""));    assertEquals(""Welcome Jamie No Code. You're using the enhanced welcome message."", welcomeMessage);  }  @Test",testFeatureTurnedOn
1411,  public String <extra_id_0>() {    return this.description;  }  @Override,getDescription
858,  public abstract Object <extra_id_0>(SelectionKey key) throws IOException;  /**   * Get handler.   *   * @return the handler associated with this channel.   */,read
1969,"  public synchronized Integer <extra_id_0>() {    while (sourceList.isEmpty()) {      try {        LOGGER.info(""waiting"");        wait();      } catch (InterruptedException e) {        e.printStackTrace();      }    }    LOGGER.info(""getting"");    return sourceList.peek();  }  /**   * Put a value in the queue.   *   * @param e number which we want to put to our queue   */",get
823,  T <extra_id_0>() throws BusinessException;,perform
3591,"  public void <extra_id_0>() {    LOGGER.info(""YouTubeService is now processing"");  }",doProcessing
652,  public String <extra_id_0>() {    return title;  },toString
869,  private static void <extra_id_0>(SelectionKey key) throws IOException {    var channel = (AbstractNioChannel) key.attachment();    channel.flush(key);  },onChannelWritable
256,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic sum {}"", VERSION);    return source.accumulateSum(nums);  }  /**   * Accumulate multiplication.   * @param nums numbers need to multiply together   * @return accumulate multiplication   */",sum
54,"  public void <extra_id_0>(Soldier soldier) {    LOGGER.info(""Greetings {}"", soldier);  }  /**   * Sergeant Visitor method.   * @param sergeant Sergeant to be visited   */  @Override",visit
570,"  public Spell <extra_id_0>(String name) {    Transaction tx = null;    Spell result;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();      CriteriaQuery<Spell> builderQuery = criteriaBuilder.createQuery(Spell.class);      Root<Spell> root = builderQuery.from(Spell.class);      builderQuery.select(root).where(criteriaBuilder.equal(root.get(""name""), name));      Query<Spell> query = session.createQuery(builderQuery);      result = query.uniqueResult();      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  }",findByName
699,"  void <extra_id_0>() {    final Logger LOGGER = (Logger) LoggerFactory.getLogger(OutOfStock.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    LOGGER.addAppender(listAppender);    receipt = applicationServices.loggedInUserPurchase(""ignite1771"", ""tv"");    receipt.show();    List<ILoggingEvent> loggingEventList = listAppender.list;    assertEquals(""Out of stock: tv for user = ignite1771 to buy""        , loggingEventList.get(0).getMessage());    assertEquals(Level.INFO, loggingEventList.get(0).getLevel());  }  @Test",testOutOfStock
1398,  public int <extra_id_0>() {    return log.size();  },getLogSize
2335,"  void <extra_id_0>() {    assertEquals(1, repository.getNextId());    assertEquals(2, repository.getNextId());    assertEquals(3, repository.getNextId());  }  @Test",testNextId
3116,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3055,"  public void <extra_id_0>(Product product, Customer customer) throws SQLException {    var sql = ""delete from PURCHASES where product_name = ? and customer_name = ?"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setString(1, product.getName());      preparedStatement.setString(2, customer.getName());      preparedStatement.executeUpdate();    }  }",deleteProduct
3451,"  public void <extra_id_0>() {    currentInstance.getPrinterQueue().clear();  }  /**   * Private constructor prevents instantiation, unless using the getInstance() method.   */",emptyQueue
491,"  void <extra_id_0>() {    var shard = new Shard(1);    shardManager.addNewShard(shard);    var tmpShard = shardManager.getShardById(1);    assertEquals(shard, tmpShard);  }",testGetShardById
262,"  void <extra_id_0>() {    assertEquals(0, source.accumulateSum(-1, 0, 1));  }  @Test",testAccumulateSum
1419,"  public void <extra_id_0>(WeatherType currentWeather) {    LOGGER.info(""The hobbits are facing {} weather now"", currentWeather.getDescription());  }",update
3827,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3691,"  public void <extra_id_0>() {    LOGGER.info(""# CachingPolicy.BEHIND"");    appManager.initCachingPolicy(CachingPolicy.BEHIND);    var userAccount3 = new UserAccount(""003"",            ""Adam"",            ""He likes food."");    var userAccount4 = new UserAccount(""004"",            ""Rita"",            ""She hates cats."");    var userAccount5 = new UserAccount(""005"",            ""Isaac"",            ""He is allergic to mustard."");    appManager.save(userAccount3);    appManager.save(userAccount4);    appManager.save(userAccount5);    LOGGER.info(appManager.printCacheContent());    appManager.find(""003"");    LOGGER.info(appManager.printCacheContent());    UserAccount userAccount6 = new UserAccount(""006"",            ""Yasha"",            ""She is an only child."");    appManager.save(userAccount6);    LOGGER.info(appManager.printCacheContent());    appManager.find(""004"");    LOGGER.info(appManager.printCacheContent());  }  /**   * Cache-Aside.   */",useReadThroughAndWriteBehindStrategy
3455,"  void <extra_id_0>() throws IllegalArgumentException {    Assertions.assertThrows(IllegalArgumentException.class, () -> new PrinterItem(PaperSizes.A4, -1, true, true));  }  @Test()  @Timeout(1000)",negativePageCount
1335,  O <extra_id_0>(I input) {    return currentHandler.process(input);  },execute
3637,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[5];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = LITERAL.getIntValue();    bytecode[3] = 50;                        // wisdom amount    bytecode[4] = SET_WISDOM.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(50, vm.getWizards()[wizardNumber].getWisdom());  }  @Test",testSetWisdom
3177,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);    }  }  /**   * Represents the scenario where DB connectivity is present.   */  @Nested,createSchema
1352,"  public String <extra_id_0>(SignupModel form, RedirectAttributes redirectAttributes) {    LOGGER.info(form.getName());    LOGGER.info(form.getEmail());    redirectAttributes.addAttribute(""name"", form.getName());    redirectAttributes.addAttribute(""email"", form.getEmail());    redirectAttributes.addFlashAttribute(""userInfo"", form);    return view.redirect(form);  }",create
3178,    void <extra_id_0>() throws Exception {      var dataSource = new JdbcDataSource();      dataSource.setURL(DB_URL);      dao = new DbCustomerDao(dataSource);      var result = dao.add(existingCustomer);      assertTrue(result);    }    /**     * Represents the scenario when DAO operations are being performed on a non existing customer.     */    @Nested,setUp
2616,  void <extra_id_0>();,display
874,    public void <extra_id_0>() {      key.interestOps(interestedOps);    }    @Override,run
1971,"    void <extra_id_0>(){        final var target = new Target();        assertEquals(target.getSize().getWidth(), Double.valueOf(640));        assertEquals(target.getSize().getHeight(), Double.valueOf(480));        assertEquals(true,target.isVisible());    }",testSetup
339,    public BuildStep <extra_id_0>() {      return this;    }    @Override,noWeapon
3684,  public UserAccount <extra_id_0>(final String userId) {    return cache.get(userId);  }  /**   * Delegate to backing cache store.   * @param userId {@link String}   * @param userAccount {@link UserAccount}   */,get
3833,  void <extra_id_0>(Zoom zoom);,visit
2303,"  public String <extra_id_0>() {    return String.format(""%d"", id);  }",toString
3469,  public static Finder <extra_id_0>(String... queries) {    var finder = identSum();    for (String query : queries) {      finder = finder.or(Finder.contains(query));    }    return finder;  },expandedFinder
649,  public final boolean <extra_id_0>(Mass other) {    return this.value <= other.value;  }  @Override,smallerThanOrEq
249,"  public boolean <extra_id_0>(int... nums) {    LOGGER.info(SOURCE_MODULE, VERSION);    return Arrays.stream(nums).allMatch(num -> num != 0);  }",ifNonZero
1683,"  FileSelectorPresenter <extra_id_0>();  /**   * Sets the file's name, to the value given as parameter.   *   * @param name The new name of the file.   */",getPresenter
3305,  void <extra_id_0>() {    System.setOut(realStdOut);  }  /**   * Test the message from the orcs   */  @Test,tearDown
1313,      public Integer <extra_id_0>(Stats stat) {        return null;      }      @Override,get
1616,"  private static void <extra_id_0>() {    var out = new ByteArrayOutputStream();    Mute.mute(() -> out.write(""Hello"".getBytes()));  }",useOfMute
439,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""tmp"");    user.setPassword(""iloveyou"");    assertEquals(""iloveyou"", user.getPassword());  }  @Test",testSetPassword
3095,  void <extra_id_0>() {    appender.stop();  }  /**   * Test if the {@link GuiceWizard} smokes whatever instance of {@link Tobacco} is passed to him   * through the constructor parameter   */  @Test,tearDown
2789,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
766,  public void <extra_id_0>(Royalty r) {    r.getFed();  },feed
3137,"  public boolean <extra_id_0>(Customer customer) throws Exception {    if (getById(customer.getId()).isPresent()) {      return false;    }    try (var connection = getConnection();         var statement = connection.prepareStatement(""INSERT INTO CUSTOMERS VALUES (?,?,?)"")) {      statement.setInt(1, customer.getId());      statement.setString(2, customer.getFirstName());      statement.setString(3, customer.getLastName());      statement.execute();      return true;    } catch (SQLException ex) {      throw new CustomException(ex.getMessage(), ex);    }  }  /**   * {@inheritDoc}   */  @Override",add
268,"  void <extra_id_0>() {    assertEquals(0, arithmetic.sum(-1, 0, 1));  }  @Test",testSum
1928,  void <extra_id_0>(boolean alive);  /**   * Consume messages from other instances.   *   * @param message Message sent by other instances   */,setAlive
3652,"  private int <extra_id_0>(int min, int max) {    return ThreadLocalRandom.current().nextInt(min, max + 1);  }",randomInt
36,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3198,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3141,"  Optional<Customer> <extra_id_0>(int id) throws Exception;  /**   * Add a customer.   *   * @param customer the customer to be added.   * @return true if customer is successfully added, false if customer already exists.   * @throws Exception if any error occurs.   */",getById
761,  void <extra_id_0>();,getFed
688,"  void <extra_id_0>(Creature testedCreature, String name) {    assertEquals(name, testedCreature.getName());  }  @ParameterizedTest  @MethodSource(""dataProvider"")",testGetName
3718,  public void <extra_id_0>() {    db = new HashMap<>();  }  @Override,connect
3757,  public Enchantment <extra_id_0>() {    return enchantment;  },getEnchantment
3128,  public static ServiceContext <extra_id_0>() {    return new ServiceContext();  },createContext
3727,  void <extra_id_0>() {    assertNotNull(app);    app.useReadThroughAndWriteBehindStrategy();  }  @Test,testReadThroughAndWriteBehindStrategy
1003,  public boolean <extra_id_0>(Role role) {    return roles.containsKey(role);  }  @Override,hasRole
1178,  Warlord <extra_id_0>();,createWarlord
3427,"    private Commander <extra_id_0>() {        return buildCommanderObjectWithoutDB(false, false, new IllegalStateException());    }",buildCommanderObjectWithoutDB
2597,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
740,"  void <extra_id_0>() {    var x = this.boundary.coordinateX;    var y = this.boundary.coordinateY;    var width = this.boundary.width;    var height = this.boundary.height;    var nw = new Rect(x - width / 4, y + height / 4, width / 2, height / 2);    this.northwest = new QuadTree(nw, this.capacity);    var ne = new Rect(x + width / 4, y + height / 4, width / 2, height / 2);    this.northeast = new QuadTree(ne, this.capacity);    var sw = new Rect(x - width / 4, y - height / 4, width / 2, height / 2);    this.southwest = new QuadTree(sw, this.capacity);    var se = new Rect(x + width / 4, y - height / 4, width / 2, height / 2);    this.southeast = new QuadTree(se, this.capacity);    this.divided = true;  }",divide
1189,"  static Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new OrcBeast(""axe""), ""Orcish wolf attacks with axe""},        new Object[]{new OrcMage(""sword""), ""Orcish mage attacks with sword""},        new Object[]{new OrcWarlord(""laser""), ""Orcish warlord attacks with laser""},        new Object[]{new ElfBeast(""cooking""), ""Elven eagle helps in cooking""},        new Object[]{new ElfMage(""cleaning""), ""Elven mage helps in cleaning""},        new Object[]{new ElfWarlord(""protecting""), ""Elven warlord helps in protecting""}    );  }  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
2164,  T <extra_id_0>();,next
539,  public void <extra_id_0>(Long id) {    this.id = id;  },setId
11,  public void <extra_id_0>() {    while (isRunning) {      if (!isSuspended) {        twin.draw();        twin.move();      }      try {        Thread.sleep(250);      } catch (InterruptedException e) {        throw new RuntimeException(e);      }    }  },run
730,"  static Hashtable<Integer, Point> <extra_id_0>(Collection<Point> points, Rect field, Rect queryRange) {    //creating quadtree and inserting all points    var qTree = new QuadTree(queryRange, 4);    points.forEach(qTree::insert);    return qTree        .query(field, new ArrayList<>())        .stream()        .collect(Collectors.toMap(p -> p.id, p -> p, (a, b) -> b, Hashtable::new));  }",quadTreeTest
1059,"  public Optional<OrchestrationChapter> <extra_id_0>(String service) {    return Optional.ofNullable(services.getOrDefault(service, null));  }",find
2282,"  public void <extra_id_0>(PlayerDetails details) {    LOGGER.info(""Lottery ticket for {} was checked and unfortunately did not win this time."",        details.getEmail());  }  @Override",ticketDidNotWin
3835,"  public void <extra_id_0>(ModemVisitor modemVisitor) {    if (modemVisitor instanceof HayesVisitor) {      ((HayesVisitor) modemVisitor).visit(this);    } else {      LOGGER.info(""Only HayesVisitor is allowed to visit Hayes modem"");    }  }  /**   * Hayes' modem's toString method.   */  @Override",accept
1034,  public Saga <extra_id_0>(String name) {    this.chapters.add(new Chapter(name));    return this;  },chapter
729,"  void <extra_id_0>() {    var points = new ArrayList<Point>();    var rand = new Random();    for (int i = 0; i < 20; i++) {      var p = new Bubble(rand.nextInt(300), rand.nextInt(300), i, rand.nextInt(2) + 1);      points.add(p);    }    var field = new Rect(150, 150, 300, 300); //size of field    var queryRange = new Rect(70, 130, 100, 100); //result = all points lying in this rectangle    //points found in the query range using quadtree and normal method is same    var points1 = QuadTreeTest.quadTreeTest(points, field, queryRange);    var points2 = QuadTreeTest.verify(points, queryRange);    assertEquals(points1, points2);  }",queryTest
1336,"  public String <extra_id_0>(String input) {    var inputWithoutAlphabets = new StringBuilder();    var isAlphabetic = (IntPredicate) Character::isAlphabetic;    input.chars()        .filter(isAlphabetic.negate())        .mapToObj(x -> (char) x)        .forEachOrdered(inputWithoutAlphabets::append);    var inputWithoutAlphabetsStr = inputWithoutAlphabets.toString();    LOGGER.info(        String.format(            ""Current handler: %s, input is %s of type %s, output is %s, of type %s"",            RemoveAlphabetsHandler.class, input,            String.class, inputWithoutAlphabetsStr, String.class        )    );    return inputWithoutAlphabetsStr;  }",process
48,"  void <extra_id_0>(Soldier unit, UnitVisitor mockedVisitor) {    verify(mockedVisitor).visit(eq(unit));  }",verifyVisit
2072,"  public void <extra_id_0>() {    LOGGER.info(""Evicting health check cache"");    try {      Cache healthCheckCache = cacheManager.getCache(""health-check"");      LOGGER.info(""Health check cache: {}"", healthCheckCache);      if (healthCheckCache != null) {        healthCheckCache.clear();      }    } catch (Exception e) {      LOGGER.error(""Failed to evict health check cache"", e);    }  }",evictHealthCache
1536,  void <extra_id_0>();,makeUnhappy
901,"  void <extra_id_0>() {    Customer john = new Customer(""1"", ""john"");    Customer julia = new Customer(""2"", ""julia"");    customerRegistry.addCustomer(john);    customerRegistry.addCustomer(julia);    Customer customerWithId1 = customerRegistry.getCustomer(""1"");    assertNotNull(customerWithId1);    assertEquals(""1"", customerWithId1.id());    assertEquals(""john"", customerWithId1.name());    Customer customerWithId2 = customerRegistry.getCustomer(""2"");    assertNotNull(customerWithId2);    assertEquals(""2"", customerWithId2.id());    assertEquals(""julia"", customerWithId2.name());  }  @Test",shouldBeAbleToAddAndQueryCustomerObjectFromRegistry
350,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Cuauhtemoc"")        .fighterClass(""aztec"")        .withWeapon(""spear"")        .withAbility(""speed"")        .withAbility(""strength"")        .noMoreAbilities()        .build();    assertEquals(""Cuauhtemoc"", character.getName());    assertEquals(""aztec"", character.getFighterClass());    assertEquals(""spear"", character.getWeapon());    assertNotNull(character.toString());    final var abilities = character.getAbilities();    assertNotNull(abilities);    assertEquals(2, abilities.size());    assertTrue(abilities.contains(""speed""));    assertTrue(abilities.contains(""strength""));  }  /**   * Build a new wizard {@link Character} without weapon and abilities and verify if it has the   * expected attributes   */  @Test",testBuildWarrior
2955,      public String <extra_id_0>() {        return name;      },getName
2567,"  private static void <extra_id_0>() {    LOGGER.info(""### Filtering ThreatAwareSystem by ThreatType ###"");    var rootkit = new SimpleThreat(ThreatType.ROOTKIT, 1, ""Simple-Rootkit"");    var trojan = new SimpleThreat(ThreatType.TROJAN, 2, ""Simple-Trojan"");    List<Threat> threats = List.of(rootkit, trojan);    var threatAwareSystem = new SimpleThreatAwareSystem(""Sys-1"", threats);    LOGGER.info(""Filtering ThreatAwareSystem. Initial : "" + threatAwareSystem);    //Filtering using Filterer    var rootkitThreatAwareSystem = threatAwareSystem.filtered()        .by(threat -> threat.type() == ThreatType.ROOTKIT);    LOGGER.info(""Filtered by threatType = ROOTKIT : "" + rootkitThreatAwareSystem);  }",filteringSimpleThreats
3686,  public void <extra_id_0>(final String userId) {    cache.invalidate(userId);  },invalidate
349,"  void <extra_id_0>() {    final var character = CharacterStepBuilder.newBuilder()        .name(""Merlin"")        .wizardClass(""alchemist"")        .withSpell(""poison"")        .noAbilities()        .build();    assertEquals(""Merlin"", character.getName());    assertEquals(""alchemist"", character.getWizardClass());    assertEquals(""poison"", character.getSpell());    assertNull(character.getAbilities());    assertNotNull(character.toString());  }  /**   * Build a new warrior {@link Character} and verify if it has the expected attributes   */  @Test",testBuildWeakWizard
958,"  public static void <extra_id_0>(String[] args) {    var context = new AnnotationConfigApplicationContext(AppConfig.class);    var repository = context.getBean(PersonRepository.class);    var peter = new Person(""Peter"", ""Sagan"", 17);    var nasta = new Person(""Nasta"", ""Kuzminova"", 25);    var john = new Person(""John"", ""lawrence"", 35);    var terry = new Person(""Terry"", ""Law"", 36);    // Add new Person records    repository.save(peter);    repository.save(nasta);    repository.save(john);    repository.save(terry);    // Count Person records    LOGGER.info(""Count Person records: {}"", repository.count());    // Print all records    var persons = (List<Person>) repository.findAll();    persons.stream().map(Person::toString).forEach(LOGGER::info);    // Update Person    nasta.setName(""Barbora"");    nasta.setSurname(""Spotakova"");    repository.save(nasta);    repository.findById(2L).ifPresent(p -> LOGGER.info(""Find by id 2: {}"", p));    // Remove record from Person    repository.deleteById(2L);    // count records    LOGGER.info(""Count Person records: {}"", repository.count());    // find by name    repository        .findOne(new PersonSpecifications.NameEqualSpec(""John""))        .ifPresent(p -> LOGGER.info(""Find by John is {}"", p));    // find by age    persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));    LOGGER.info(""Find Person with age between 20,40: "");    persons.stream().map(Person::toString).forEach(LOGGER::info);    context.close();  }",main
2333,"  void <extra_id_0>() {    MongoConnectionPropertiesLoader.load();    var mongoClient = new MongoClient(System.getProperty(""mongo-host""),        Integer.parseInt(System.getProperty(""mongo-port"")));    mongoClient.dropDatabase(TEST_DB);    mongoClient.close();    repository = new MongoTicketRepository(TEST_DB, TEST_TICKETS_COLLECTION,        TEST_COUNTERS_COLLECTION);  }  @Test",init
3348,  public abstract T <extra_id_0>(String id) throws DatabaseUnavailableException;,get
96,  void <extra_id_0>() {    for (var e = this.candies.keys(); e.hasMoreElements(); ) {      var c = this.candies.get(e.nextElement());      if (c.parentName == null) {        c.parent = null;      } else {        c.parent = this.candies.get(c.parentName);      }      if (c.getPoints() == 0 && c.parent != null) {        c.setPoints(c.parent.getPoints());      }    }  },setParentAndPoints
3165,"    void <extra_id_0>() {      var optionalCustomer = dao.getById(CUSTOMER.getId());      assertTrue(optionalCustomer.isPresent());      assertEquals(CUSTOMER, optionalCustomer.get());    }  }  /**   * An arbitrary number which does not correspond to an active Customer id.   *   * @return an int of a customer id which doesn't exist   */",retriveShouldReturnTheCustomer
2735,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2055,"  void <extra_id_0>() {    // Arrange    Supplier<Health> healthSupplier =        () -> {          throw new RuntimeException(""Health check failed"");        };    // Act    CompletableFuture<Health> healthFuture = healthChecker.performCheck(healthSupplier, 10);    // Assert    Health health = healthFuture.join();    assertEquals(Status.DOWN, health.getStatus());    String errorMessage = health.getDetails().get(""error"").toString();    assertTrue(errorMessage.contains(""Health check failed""));  }  /**   * Helper method to check if the log contains a specific message.   *   * @param action The action that triggers the log statement.   * @return True if the log contains the message after the action is performed, false otherwise.   */",whenHealthCheckThrowsException_thenReturnsDown
938,"  void <extra_id_0>() {    var msgQueue = new MessageQueue();    // Create a task generator thread with 1 job to submit.    var taskRunnable = new TaskGenerator(msgQueue, 1);    var taskGenThr = new Thread(taskRunnable);    taskGenThr.start();    assertNotNull(taskGenThr);    // Create a service executor thread.    var srvRunnable = new ServiceExecutor(msgQueue);    var srvExeThr = new Thread(srvRunnable);    srvExeThr.start();    assertNotNull(srvExeThr);  }",taskGeneratorTest
505,  public void <extra_id_0>(final int key) {    this.key = key;  },setKey
3112,  public final List<T> <extra_id_0>(final Collection<U> entities) {    return entities.stream().map(this::convertFromEntity).toList();  },createFromEntities
1983,"  public String <extra_id_0>(Order order) {    var result = super.execute(order);    if (order.getAddress() == null || order.getAddress().isEmpty()) {      return result + ""Invalid address! "";    } else {      return result;    }  }",execute
2310,"  public Map<LotteryTicketId, LotteryTicket> <extra_id_0>() {    return repository.findAll();  }  /**   * Draw lottery numbers.   */",getAllSubmittedTickets
2321,"  public boolean <extra_id_0>(int amount, String sourceAccount, String destinationAccount) {    if (accounts.getOrDefault(sourceAccount, 0) >= amount) {      accounts.put(sourceAccount, accounts.get(sourceAccount) - amount);      accounts.put(destinationAccount, accounts.get(destinationAccount) + amount);      return true;    } else {      return false;    }  }",transferFunds
3752,  Enchantment <extra_id_0>();,getEnchantment
1359,"  void <extra_id_0>() {    SignupModel model = new SignupModel();    model.setEmail(""Lily@email"");    assertEquals(""Lily@email"", model.getEmail());  }  /**   * Verify if a user can set a password properly   */  @Test",testSetEmail
1474,"  void <extra_id_0>() {    var albumPage = albumListPage.selectAlbum(""21"");    albumPage.navigateToPage();    assertTrue(albumPage.isAt());  }",testSelectAlbum
756,  public void <extra_id_0>() {    isHungry = false;  }  @Override,getFed
670,  Mass <extra_id_0>();,getMass
526,  E <extra_id_0>(Long id);,find
888,"  private static void <extra_id_0>(ByteBuffer data) {    // assuming UTF-8 :(    LOGGER.info(new String(data.array(), 0, data.limit()));  }",doLogging
445,  private static void <extra_id_0>(final DataSource dataSource)          throws SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(UserTableModule.DELETE_SCHEMA_SQL);    }  },deleteSchema
914,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
280,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Use superpower: sky launch"");    var skyLaunch = new SkyLaunch();    skyLaunch.activate();    LOGGER.info(""Use superpower: ground dive"");    var groundDive = new GroundDive();    groundDive.activate();  }",main
3206,"    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertEquals(""DEFAULT_NAME"", newBean.getName());        assertTrue(newBean.isBusinessInterest());        assertTrue(newBean.isScienceNewsInterest());        assertTrue(newBean.isSportsInterest());        assertTrue(newBean.isWorldNewsInterest());    }    @Test",testDefaultConstructor
3497,"  public void <extra_id_0>(Request req) {    req.markHandled();    LOGGER.info(""{} handling request \""{}\"""", name(), req);  }  @Override",handle
1174,"  void <extra_id_0>() {    assertThrows(UnsupportedOperationException.class, POISON_PILL::getBody);  }",testGetBody
1607,  public List<Book> <extra_id_0>();,load
2505,          public T <extra_id_0>() {            if (oldTypeIterator.hasNext()) {              E candidate = oldTypeIterator.next();              return function.apply(candidate);            } else {              return null;            }          }        };      }    };  }  /**   * Collects all remaining objects of this iteration into a list.   *   * @return a list with all remaining objects of this iteration   */  @Override,computeNext
2825,  public abstract void <extra_id_0>(GameObject gameObject);,collision
2914,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Start Game Application using Data-Locality pattern"");    var gameEntity = new GameEntity(NUM_ENTITIES);    gameEntity.start();    gameEntity.update();  }",main
3585,"  void <extra_id_0>() {    var price = ""20"";    when(priceClient.getPrice()).thenReturn(price);    var mobileProduct = apiGateway.getProductMobile();    assertEquals(price, mobileProduct.getPrice());  }",testGetProductMobile
232,  private void <extra_id_0>() {    for (var entity : entities) {      entity.update();    }  }  /**   * Render the next frame. Here we do nothing since it is not related to the   * pattern.   */,update
430,"  void <extra_id_0>() {    var user = new User(1, ""iloveyou"", ""iloveyou"");    assertNotEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals5
3301,  public static DataType <extra_id_0>(final String message) {    return new MessageData(message);  },of
196,"  void <extra_id_0>() throws BookNotFoundException, VersionMismatchException {    final var aliceBook = bookRepository.get(bookId);    final var bobBook = bookRepository.get(bookId);    aliceBook.setTitle(""Kama Sutra"");    bookRepository.update(aliceBook);    assertEquals(1, aliceBook.getVersion());    assertEquals(0, bobBook.getVersion());    var actualBook = bookRepository.get(bookId);    assertEquals(aliceBook.getVersion(), actualBook.getVersion());    assertEquals(aliceBook.getTitle(), actualBook.getTitle());    assertNotEquals(aliceBook.getTitle(), bobBook.getTitle());  }  @Test",testAliceAndBobHaveDifferentVersionsAfterAliceUpdate
1196,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String[] list = model.getAlbumList();    assertEquals(Arrays.toString(albumList), Arrays.toString(list));  }  @Test",testCreateAlbumList
3154,"  private static void <extra_id_0>(final CustomerDao customerDao) throws Exception {    addCustomers(customerDao);    LOGGER.info(ALL_CUSTOMERS);    try (var customerStream = customerDao.getAll()) {      customerStream.forEach(customer -> LOGGER.info(customer.toString()));    }    LOGGER.info(""customerDao.getCustomerById(2): "" + customerDao.getById(2));    final var customer = new Customer(4, ""Dan"", ""Danson"");    customerDao.add(customer);    LOGGER.info(ALL_CUSTOMERS + customerDao.getAll());    customer.setFirstName(""Daniel"");    customer.setLastName(""Danielson"");    customerDao.update(customer);    LOGGER.info(ALL_CUSTOMERS);    try (var customerStream = customerDao.getAll()) {      customerStream.forEach(cust -> LOGGER.info(cust.toString()));    }    customerDao.delete(customer);    LOGGER.info(ALL_CUSTOMERS + customerDao.getAll());  }",performOperationsUsing
3183,"      void <extra_id_0>() throws Exception {        var existingCustomer = new Customer(1, ""Freddy"", ""Krueger"");        var result = dao.add(existingCustomer);        assertFalse(result);        assertCustomerCountIs(1);        assertEquals(existingCustomer, dao.getById(existingCustomer.getId()).get());      }      @Test",addingShouldResultInFailureAndNotAffectExistingCustomers
3005,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    },getLastMessage
3372,"  void <extra_id_0>() throws Exception {    //rest is successful    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",paymentDatabaseUnavailableCase
1131,"  private void <extra_id_0>() {    if (size == capacity) {      capacity = capacity * 2;      queue = copyOf(queue, capacity);    }  }  /**   * For debug .. print current state of queue   */",ensureCapacity
2545,"  void <extra_id_0>() {    factory = WeaponFactory.factory(builder -> {      builder.add(WeaponType.SPEAR, Spear::new);      builder.add(WeaponType.AXE, Axe::new);      builder.add(WeaponType.SWORD, Sword::new);    });  }  /**   * Testing {@link WeaponFactory} to produce a SPEAR asserting that the Weapon is an instance of   * {@link Spear}   */  @Test",init
1438,  public SortOrder <extra_id_0>() {    return sortOrder;  },getSortOrder
2897,"  public void <extra_id_0>() {    LOGGER.info(""The troll shrieks in horror and runs away!"");  }",fleeBattle
2697,  public static void <extra_id_0>(String[] args) {    var facade = new DwarvenGoldmineFacade();    facade.startNewDay();    facade.digOutGold();    facade.endDay();  },main
1708,  public void <extra_id_0>(String data) {    this.area.setText(data);  },displayData
1297,"  private void <extra_id_0>() throws InterruptedException {    var promise = new Promise<Integer>();    promise.fulfillInAsync(() -> {      throw new RuntimeException(""Barf!"");    }, executor);    try {      promise.get();      fail(""Fetching promise should result in exception if the task threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }    try {      promise.get(1000, TimeUnit.SECONDS);      fail(""Fetching promise should result in exception if the task threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }  }",testWaitingForeverForPromiseToBeFulfilled
2125,"    public List<CakeToppingInfo> <extra_id_0>() {        List<CakeToppingInfo> result = new ArrayList<>();        for (CakeTopping next : cakeToppingDao.findAll()) {            if (next.getCake() == null) {                result.add(new CakeToppingInfo(next.getId(), next.getName(), next.getCalories()));            }        }        return result;    }",getAvailableToppings
2148,"  public static void <extra_id_0>(String[] args) {    var service = new AsynchronousService(new LinkedBlockingQueue<>());    /*     * A new task to calculate sum is received but as this is main thread, it should not block. So     * it passes it to the asynchronous task layer to compute and proceeds with handling other     * incoming requests. This is particularly useful when main thread is waiting on Socket to     * receive new incoming requests and does not wait for particular request to be completed before     * responding to new request.     */    service.execute(new ArithmeticSumTask(1000));    /*     * New task received, lets pass that to async layer for computation. So both requests will be     * executed in parallel.     */    service.execute(new ArithmeticSumTask(500));    service.execute(new ArithmeticSumTask(2000));    service.execute(new ArithmeticSumTask(1));    service.close();  }  /**   * ArithmeticSumTask.   */",main
1487,"  public boolean <extra_id_0>() {    return ""Album Page"".equals(page.getTitleText());  }  /**   * Sets the album title input text field   *   * @param albumTitle the new album title value to set   * @return {@link AlbumPage}   */",isAt
124,      public Trampoline<T> <extra_id_0>() {        return trampoline.result();      }      @Override,jump
149,"  void <extra_id_0>() {    room = new Room(ID, ROOMTYPE, PRICE, BOOKED);  }  @Test",setUp
2670,"  public void <extra_id_0>(MoneyTransferEvent moneyTransferEvent) {    handleWithdrawal(moneyTransferEvent.getMoney(), moneyTransferEvent.isRealTime());  }  /**   * Handles transfer to account event.   *   * @param moneyTransferEvent the money transfer event   */",handleTransferFromEvent
1844,  public int <extra_id_0>() {    return queue.size();  },getSize
2084,  void <extra_id_0>() {    appender.stop();  }  /**   * Verify if the cake view renders the expected result   */  @Test,tearDown
2506,  public List<E> <extra_id_0>() {    return FluentIterable.copyToList(iterable);  }  @Override,asList
1028,"  void <extra_id_0>() {    var sd = serviceDiscovery();    var service = sd.findAny();    var badOrderSaga = service.execute(newSaga(""bad_order""));    var goodOrderSaga = service.execute(newSaga(""good_order""));    assertEquals(Saga.SagaResult.ROLLBACKED, badOrderSaga.getResult());    assertEquals(Saga.SagaResult.FINISHED, goodOrderSaga.getResult());  }",executeTest
2117,"    public String <extra_id_0>() {        return String.format(""id=%s name=%s calories=%d"", id, name, calories);    }",toString
3272,"  static void <extra_id_0>() {    var commandService = new CommandServiceImpl();    queryService = new QueryServiceImpl();    // create first author1    commandService.authorCreated(""username1"", ""name1"", ""email1"");    // create author1 and update all its data    commandService.authorCreated(""username2"", ""name2"", ""email2"");    commandService.authorEmailUpdated(""username2"", ""new_email2"");    commandService.authorNameUpdated(""username2"", ""new_name2"");    commandService.authorUsernameUpdated(""username2"", ""new_username2"");    // add book1 to author1    commandService.bookAddedToAuthor(""title1"", 10, ""username1"");    // add book2 to author1 and update all its data    commandService.bookAddedToAuthor(""title2"", 20, ""username1"");    commandService.bookPriceUpdated(""title2"", 30);    commandService.bookTitleUpdated(""title2"", ""new_title2"");  }  @Test",initializeAndPopulateDatabase
709,"  public void <extra_id_0>(String itemName, Double price) {    Product item = new Product(price);    itemName2Product.put(itemName, item);  }  /**   * Find a user with the userName.   *   * @param userName of the user   * @return instance of User   */",seedItem
647,  public final boolean <extra_id_0>(Mass other) {    return this.value < other.value;  },smallerThan
2872,"  private static void <extra_id_0>(Unit unit) {    final var logger = LoggerFactory.getLogger(App.class);    var name = unit.getName();    Function<String, Runnable> func = e -> () -> logger.info(""{} without {}"", name, e);    var extension = ""SoldierExtension"";    Optional.ofNullable(unit.getUnitExtension(extension))        .map(e -> (SoldierExtension) e)        .ifPresentOrElse(SoldierExtension::soldierReady, func.apply(extension));    extension = ""SergeantExtension"";    Optional.ofNullable(unit.getUnitExtension(extension))        .map(e -> (SergeantExtension) e)        .ifPresentOrElse(SergeantExtension::sergeantReady, func.apply(extension));    extension = ""CommanderExtension"";    Optional.ofNullable(unit.getUnitExtension(extension))        .map(e -> (CommanderExtension) e)        .ifPresentOrElse(CommanderExtension::commanderReady, func.apply(extension));  }",checkExtensionsForUnit
617,  public void <extra_id_0>(Fatigue fatigue) {    giant.setFatigue(fatigue);  }  /**   * Sets nourishment.   *   * @param nourishment the nourishment   */,setFatigue
1410,"  public static void <extra_id_0>(String[] args) {    var weather = new Weather();    weather.addObserver(new Orcs());    weather.addObserver(new Hobbits());    weather.timePasses();    weather.timePasses();    weather.timePasses();    weather.timePasses();    // Generic observer inspired by Java Generics and Collections by Naftalin & Wadler    LOGGER.info(""--Running generic version--"");    var genericWeather = new GenWeather();    genericWeather.addObserver(new GenOrcs());    genericWeather.addObserver(new GenHobbits());    genericWeather.timePasses();    genericWeather.timePasses();    genericWeather.timePasses();    genericWeather.timePasses();  }",main
2822,  public void <extra_id_0>(boolean onFire) {    this.onFire = onFire;  },setOnFire
776,"  public static void <extra_id_0>(String[] args) {    scenario(jenkins, 1);    scenario(travis, 0);  }  /**   * Can add a List with enum Actions for variable scenarios.   */",main
3629,"    void <extra_id_0>(T value) {      this.value = value;      this.state = COMPLETED;      this.callback.ifPresent(ac -> ac.onComplete(value, Optional.empty()));      synchronized (lock) {        lock.notifyAll();      }    }    /**     * Sets the exception from failed execution and executes callback if available. Notifies any     * thread waiting for completion.     *     * @param exception exception of the failed task     */",setValue
1364,"  void <extra_id_0>() {    assertEquals(7, TREE_ROOT.getTreeSize());  }  /**   * Walk through the tree and verify if every item is handled   */  @Test",testTreeSize
3111,  public final List<U> <extra_id_0>(final Collection<T> dtos) {    return dtos.stream().map(this::convertFromDto).toList();  }  /**   * Converts list of Entities to list of DTOs.   *   * @param entities collection of domain entities   * @return List of domain representation of provided entities retrieved by mapping each of them   *     with the conversion function   */,createFromDtos
3663,"  void <extra_id_0>() {    //Arrange    var cash = new Cash(1);    //Act    var result = cash.minus(6);    //Assert    assertFalse(result);    assertEquals(1, cash.count());  }  @Test",testInsufficientMinus
1280,  public boolean <extra_id_0>() {    return false;  }  @Override,isCancelled
510,"  public String <extra_id_0>() {    return ""Data {"" + ""key=""        + key + "", value='"" + value        + '\'' + "", type="" + type + '}';  }",toString
1587,  public void <extra_id_0>(final String value) {    this.error.println(value);  },printErrorString
712,  public Product <extra_id_0>(String itemName) {    if (!itemName2Product.containsKey(itemName)) {      return null;    }    return itemName2Product.get(itemName);  }  /**   * User class to store user info.   */,findProductByItemName
2080,"  public Health <extra_id_0>() {    LOGGER.info(""Calling performCheck with timeout {}"", timeoutInSeconds);    Supplier<Health> dbTransactionCheck =        () -> {          try {            healthCheckRepository.performTestTransaction();            return Health.up().build();          } catch (Exception e) {            LOGGER.error(""Database transaction health check failed"", e);            return Health.down(e).build();          }        };    try {      return asynchronousHealthChecker.performCheck(dbTransactionCheck, timeoutInSeconds).get();    } catch (InterruptedException | ExecutionException e) {      LOGGER.error(""Database transaction health check timed out or was interrupted"", e);      Thread.currentThread().interrupt();      return Health.down(e).build();    }  }",health
1441,    public Builder <extra_id_0>(String type) {      this.type = type;      return this;    },withType
3009,"  private static void <extra_id_0>(Buffer buffer) {    StringBuilder log = new StringBuilder(""Black Pixels: "");    var pixels = buffer.getPixels();    for (var i = 0; i < pixels.length; ++i) {      if (pixels[i] == Pixel.BLACK) {        var y = i / FrameBuffer.WIDTH;        var x = i % FrameBuffer.WIDTH;        log.append("" ("").append(x).append("", "").append(y).append("")"");      }    }    LOGGER.info(log.toString());  }",printBlackPixelCoordinate
856,  public abstract int <extra_id_0>();  /**   * Binds the channel on provided port.   *   * @throws IOException if any I/O error occurs.   */,getInterestedOps
2466,"  FluentIterable<E> <extra_id_0>(Predicate<? super E> predicate);  /**   * Returns an Optional containing the first element of this iterable if present, else returns   * Optional.empty().   *   * @return the first element after the iteration is evaluated   */",filter
2067,  protected List<MemoryPoolMXBean> <extra_id_0>() {    return ManagementFactory.getMemoryPoolMXBeans();  },getMemoryPoolMxBeans
3268,"  void <extra_id_0>(String oldUsername, String newUsername);",authorUsernameUpdated
2716,"  public static void <extra_id_0>(String[] args) throws IOException {    // create the file writer and execute the custom action    FileWriterAction writeHello = writer -> {      writer.write(""Gandalf was here"");    };    new SimpleFileWriter(""testfile.txt"", writeHello);    // print the file contents    try (var scanner = new Scanner(new File(""testfile.txt""))) {      while (scanner.hasNextLine()) {        LOGGER.info(scanner.nextLine());      }    }  }",main
2157,"  void <extra_id_0>() {    final var exception = new IllegalStateException();    doThrow(exception).when(task).onPreCall();    service.execute(task);    verify(task, timeout(2000)).onError(eq(exception));    final var inOrder = inOrder(task);    inOrder.verify(task, times(1)).onPreCall();    inOrder.verify(task, times(1)).onError(exception);    verifyNoMoreInteractions(task);  }",testPreCallException
1994,  public String <extra_id_0>(Order order) {    return filterChain.execute(order);  },filterRequest
1111,"  public static void <extra_id_0>(String[] args) throws Exception {    var queueManager = new QueueManager(10);    // push some message to queue    // Low Priority message    for (var i = 0; i < 10; i++) {      queueManager.publishMessage(new Message(""Low Message Priority"", 0));    }    // High Priority message    for (var i = 0; i < 10; i++) {      queueManager.publishMessage(new Message(""High Message Priority"", 1));    }    // run worker    var worker = new Worker(queueManager);    worker.run();  }",main
1550,"  public static void <extra_id_0>(String[] args) throws Exception {    var videos = Map.of(        1, new Video(1, ""Avatar"", 178, ""epic science fiction film"",            ""James Cameron"", ""English""),        2, new Video(2, ""Godzilla Resurgence"", 120, ""Action & drama movie|"",            ""Hideaki Anno"", ""Japanese""),        3, new Video(3, ""Interstellar"", 169, ""Adventure & Sci-Fi"",            ""Christopher Nolan"", ""English"")    );    var videoResource = new VideoResource(new FieldJsonMapper(), videos);    LOGGER.info(""Retrieving full response from server:-"");    LOGGER.info(""Get all video information:"");    var videoDetails = videoResource.getDetails(1);    LOGGER.info(videoDetails);    LOGGER.info(""----------------------------------------------------------"");    LOGGER.info(""Retrieving partial response from server:-"");    LOGGER.info(""Get video @id, @title, @director:"");    var specificFieldsDetails = videoResource.getDetails(3, ""id"", ""title"", ""director"");    LOGGER.info(specificFieldsDetails);    LOGGER.info(""Get video @id, @length:"");    var videoLength = videoResource.getDetails(3, ""id"", ""length"");    LOGGER.info(videoLength);  }",main
2510,"  public static void <extra_id_0>(String[] args) {    var integerList = List.of(1, -61, 14, -22, 18, -87, 6, 64, -82, 26, -98, 97, 45, 23, 2, -68);    prettyPrint(""The initial list contains: "", integerList);    var firstFiveNegatives = SimpleFluentIterable        .fromCopyOf(integerList)        .filter(negatives())        .first(3)        .asList();    prettyPrint(""The first three negative values are: "", firstFiveNegatives);    var lastTwoPositives = SimpleFluentIterable        .fromCopyOf(integerList)        .filter(positives())        .last(2)        .asList();    prettyPrint(""The last two positive values are: "", lastTwoPositives);    SimpleFluentIterable        .fromCopyOf(integerList)        .filter(number -> number % 2 == 0)        .first()        .ifPresent(evenNumber -> LOGGER.info(""The first even number is: {}"", evenNumber));    var transformedList = SimpleFluentIterable        .fromCopyOf(integerList)        .filter(negatives())        .map(transformToString())        .asList();    prettyPrint(""A string-mapped list of negative numbers contains: "", transformedList);    var lastTwoOfFirstFourStringMapped = LazyFluentIterable        .from(integerList)        .filter(positives())        .first(4)        .last(2)        .map(number -> ""String["" + number + ""]"")        .asList();    prettyPrint(""The lazy list contains the last two of the first four positive numbers ""        + ""mapped to Strings: "", lastTwoOfFirstFourStringMapped);    LazyFluentIterable        .from(integerList)        .filter(negatives())        .first(2)        .last()        .ifPresent(number -> LOGGER.info(""Last amongst first two negatives: {}"", number));  }",main
428,"  void <extra_id_0>() {    var user = new User(123, ""janedoe"", ""iloveyou"");    assertNotEquals(user, new User(1, ""janedoe"",            ""iloveyou""));  }  @Test",testEquals3
3107,  public String <extra_id_0>() {    return log.get(log.size() - 1).getFormattedMessage();  },getLastMessage
2565,  public static void <extra_id_0>(String[] args) {    filteringSimpleThreats();    filteringSimpleProbableThreats();  }  /**   * Demonstrates how to filter {@link com.iluwatar.filterer.threat.ProbabilisticThreatAwareSystem}   * based on probability property. The @{@link com.iluwatar.filterer.domain.Filterer#by(Predicate)}   * method is able to use {@link com.iluwatar.filterer.threat.ProbableThreat}   * as predicate argument.   */,main
3606,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var result = new Object();      when(task.call()).thenReturn(result);      final var asyncResult = executor.startProcess(task);      assertNotNull(asyncResult);      asyncResult.await(); // Prevent timing issues, and wait until the result is available      assertTrue(asyncResult.isCompleted());      // Our task should only execute once ...      verify(task, times(1)).call();      // ... and the result should be exactly the same object      assertSame(result, asyncResult.getValue());    });  }  /**   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable,   * AsyncCallback)}   */  @Test",testSuccessfulTaskWithoutCallback
1197,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    final int selectId = 2;    model.setSelectedAlbumNumber(selectId);    assertEquals(albumList[selectId - 1], model.getTitle());  }  @Test",testSetSelectedAlbumNumber_1
128,"  public static Trampoline<Integer> <extra_id_0>(int times, int prod) {    if (times == 0) {      return Trampoline.done(prod);    } else {      return Trampoline.more(() -> loop(times - 1, prod * times));    }  }",loop
3620,"  private static <T> Callable<T> <extra_id_0>(T value, long delayMillis) {    return () -> {      Thread.sleep(delayMillis);      log(String.format(ROCKET_LAUNCH_LOG_PATTERN, value));      return value;    };  }  /**   * Creates a simple callback that logs the complete status of the async result.   *   * @param name callback name   * @return new async callback   */",lazyval
446,  private static void <extra_id_0>(final DataSource dataSource)          throws SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(UserTableModule.CREATE_SCHEMA_SQL);    }  },createSchema
1458,"  public static void <extra_id_0>(String[] args) {    var pool = new OliphauntPool();    LOGGER.info(pool.toString());    var oliphaunt1 = pool.checkOut();    String checkedOut = ""Checked out {}"";    LOGGER.info(checkedOut, oliphaunt1);    LOGGER.info(pool.toString());    var oliphaunt2 = pool.checkOut();    LOGGER.info(checkedOut, oliphaunt2);    var oliphaunt3 = pool.checkOut();    LOGGER.info(checkedOut, oliphaunt3);    LOGGER.info(pool.toString());    LOGGER.info(""Checking in {}"", oliphaunt1);    pool.checkIn(oliphaunt1);    LOGGER.info(""Checking in {}"", oliphaunt2);    pool.checkIn(oliphaunt2);    LOGGER.info(pool.toString());    var oliphaunt4 = pool.checkOut();    LOGGER.info(checkedOut, oliphaunt4);    var oliphaunt5 = pool.checkOut();    LOGGER.info(checkedOut, oliphaunt5);    LOGGER.info(pool.toString());  }",main
3390,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms =        new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),            new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }  /**   * Program entry point.   *   * @param args command line args   */",queueSuccessCase
265,"  void <extra_id_0>() {    assertEquals(0, source.accumulateSum(-1, 0, 1));  }  @Test",testAccumulateSum
1712,"  public boolean <extra_id_0>() {    return new File(this.fileName).exists();  }  /**   * Returns true if the given file is loaded.   *   * @return True, if the file is loaded, false otherwise.   */",fileExists
62,  public void <extra_id_0>(Soldier soldier) {    // Do nothing  }  /**   * Sergeant Visitor method.   * @param sergeant Sergeant to be visited   */  @Override,visit
2087,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    },getLastMessage
3766,    public double <extra_id_0>() {      return value;    }  }},random
3592,"  public void <extra_id_0>() {    LOGGER.info(""NetflixService is now processing"");  }",doProcessing
2447,"  void <extra_id_0>() {    final var store = mock(Store.class);    Dispatcher.getInstance().registerStore(store);    final var view = new MenuView();    view.itemClicked(MenuItem.PRODUCTS);    // We should receive a menu click action and a content changed action    verify(store, times(2)).onAction(any(Action.class));  }",testItemClicked
3825,  public King <extra_id_0>() {    return new ElfKing();  }  @Override,createKing
569,  Spell <extra_id_0>(String name);,findByName
3416,"  public String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    //it could also be sending a userid, payment details here or something, not added here    var id = generateId();    var req = new PaymentRequest(id, (float) parameters[0]);    return updateDb(req);  }",receiveRequest
3674,"  private UserAccount <extra_id_0>(final String userId) {    return Optional.ofNullable(cacheStore.get(userId))            .or(() -> {              Optional<UserAccount> userAccount =                      Optional.ofNullable(dbManager.readFromDb(userId));              userAccount.ifPresent(account -> cacheStore.set(userId, account));              return userAccount;            })            .orElse(null);  }",findAside
1186,"  public String <extra_id_0>() {    return ""Orcish mage attacks with "" + weapon;  }",toString
3696,"  public void <extra_id_0>(final String userId, final UserAccount userAccount) {    if (cache.containsKey(userId)) {      var old = cache.get(userId);      old.userAccount = userAccount;      remove(old);      setHead(old);    } else {      var newNode = new Node(userId, userAccount);      if (cache.size() >= capacity) {        LOGGER.info(""# Cache is FULL! Removing {} from cache..."", end.userId);        cache.remove(end.userId); // remove LRU data from cache.        remove(end);        setHead(newNode);      } else {        setHead(newNode);      }      cache.put(userId, newNode);    }  }  /**   * Check if Cache contains the userId.   *   * @param userId {@link String}   * @return boolean   */",set
2028,"  void <extra_id_0>() {    CompletableFuture<Health> future = new CompletableFuture<>();    when(healthChecker.performCheck(any(), anyLong())).thenReturn(future);    Health health = customHealthIndicator.health();    assertEquals(Status.DOWN, health.getStatus());  }  /**   * Test case for the `evictHealthCache()` method.   *   * <p>Asserts that when the `evictHealthCache()` method is called, the health cache is cleared.   */  @Test",whenHealthCheckTimesOut_thenHealthIsDown
828,"  void <extra_id_0>() {    final var e = new BusinessException(""unhandled"");    final var retry = new RetryExponentialBackoff<String>(        () -> {          throw e;        },        2,        0    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.attempts(), is(1));  }  /**   * Final number of attempts should be equal to the number of attempts asked because we are asking   * it to ignore the exception that will be thrown.   */  @Test",attempts
2273,  void <extra_id_0>();  /**   * Begin new lottery round.   */,performLottery
843,    public ByteBuffer <extra_id_0>() {      return data;    }  }},getData
2761,"  private int <extra_id_0>(int eventTime, boolean isSynchronous)      throws MaxNumOfEventsAllowedException, LongRunningEventException {    if (eventPool.size() == MAX_RUNNING_EVENTS) {      throw new MaxNumOfEventsAllowedException(""Too many events are running at the moment.""          + "" Please try again later."");    }    if (eventTime >= MAX_EVENT_TIME) {      throw new LongRunningEventException(          ""Maximum event time allowed is "" + MAX_EVENT_TIME + "" seconds. Please try again."");    }    var newEventId = generateId();    var newEvent = new AsyncEvent(newEventId, eventTime, isSynchronous);    newEvent.addListener(this);    eventPool.put(newEventId, newEvent);    return newEventId;  }  /**   * Starts event.   *   * @param eventId The event that needs to be started.   * @throws EventDoesNotExistException If event does not exist in our eventPool.   */",createEvent
2640,"  void <extra_id_0>() {    assertThrows(IllegalArgumentException.class, () -> {      final var properties = new Properties();      properties.setProperty(""enhancedWelcome"", ""Something"");      new PropertiesFeatureToggleVersion(properties);    });  }  @Test",testNonBooleanProperty
1374,"  public static void <extra_id_0>(String[] args) {    var root = new NodeImpl(""1"",        new NodeImpl(""11"",            new NodeImpl(""111"", NullNode.getInstance(), NullNode.getInstance()),            NullNode.getInstance()        ),        new NodeImpl(""12"",            NullNode.getInstance(),            new NodeImpl(""122"", NullNode.getInstance(), NullNode.getInstance())        )    );    root.walk();  }",main
517,  public void <extra_id_0>() {    dataStore.clear();  },clearData
1523,  void <extra_id_0>() {    var soberHappyKing = RoyaltyObjectMother.createHappyKing();    var notFlirtyQueen = RoyaltyObjectMother.createNotFlirtyQueen();    soberHappyKing.flirt(notFlirtyQueen);    assertFalse(soberHappyKing.isHappy());  }  @Test,queenIsBlockingFlirt
2191,"  void <extra_id_0>(Item expectedItem) throws Exception {    final var chest = new TreasureChest();    final var items = chest.getItems();    assertNotNull(items);    for (final var item : items) {      assertNotNull(item);      assertNotNull(item.getType());      assertNotNull(item.toString());      final var sameType = expectedItem.getType() == item.getType();      final var sameName = expectedItem.toString().equals(item.toString());      if (sameType && sameName) {        return;      }    }    fail(""Expected to find item ["" + expectedItem + ""] in the item list, but we didn't."");  }",testGetItems
891,"  public void <extra_id_0>() throws InterruptedException, IOException {    reactor.stop();    dispatcher.stop();    for (var channel : channels) {      channel.getJavaChannel().close();    }  }",stop
1140,"  public void <extra_id_0>(String body) {    if (isStopped) {      throw new IllegalStateException(String.format(          ""Producer %s was stopped and fail to deliver requested message [%s]."", body, name));    }    var msg = new SimpleMessage();    msg.addHeader(Headers.DATE, new Date().toString());    msg.addHeader(Headers.SENDER, name);    msg.setBody(body);    try {      queue.put(msg);    } catch (InterruptedException e) {      // allow thread to exit      LOGGER.error(""Exception caught."", e);    }  }  /**   * Stop system by sending poison pill.   */",send
3470,"  private static Finder <extra_id_0>() {    return txt -> Stream.of(txt.split("""")).collect(Collectors.toList());  }",identMult
1542,  public void <extra_id_0>(Queen queen) {    var flirtStatus = queen.getFlirted(this);    if (!flirtStatus) {      this.makeUnhappy();    } else {      this.makeHappy();    }  },flirt
3318,  public void <extra_id_0>() {    printThisBefore();    children.forEach(LetterComposite::print);    printThisAfter();  },print
2365,"  public String <extra_id_0>() {    return ""Person ID is : "" + personNationalId + "" ; Person Name is : "" + name + "" ; Phone Number is :"" + phoneNum;  }",toString
3132,        public boolean <extra_id_0>(Consumer<? super Customer> action) {          try {            if (!resultSet.next()) {              return false;            }            action.accept(createCustomer(resultSet));            return true;          } catch (SQLException e) {            throw new RuntimeException(e); // NOSONAR          }        },tryAdvance
3189,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.delete(existingCustomer);      });    }    @Test",deletingACustomerFailsWithExceptionAsFeedbackToTheClient
2103,    void <extra_id_0>();,render
220,  void <extra_id_0>() {    world.run();    assertTrue(world.isRunning);  }  @Test,testRun
2123,"    public void <extra_id_0>(CakeLayerInfo layerInfo) {        cakeLayerDao.save(new CakeLayer(layerInfo.name, layerInfo.calories));    }",saveNewLayer
1299,"  void <extra_id_0>()      throws InterruptedException, ExecutionException {    var dependentPromise = promise        .fulfillInAsync(new NumberCrunchingTask(), executor)        .thenAccept(value -> assertEquals(NumberCrunchingTask.CRUNCHED_NUMBER, value));    dependentPromise.get();    assertTrue(dependentPromise.isDone());    assertFalse(dependentPromise.isCancelled());  }  @Test",dependentPromiseIsFulfilledAfterTheConsumerConsumesTheResultOfThisPromise
749,  abstract void <extra_id_0>(T obj);,handleCollisionsUsingQt
1600,  void <extra_id_0>() {	assertNotNull(testBook);  }    @Test,testBookModel
522,  public abstract Long <extra_id_0>();  /**   * Set the id of this entity.   *   * @param id The new id   */,getId
2771,  void <extra_id_0>(final int eventId);,completedEventHandler
3014,"  public void <extra_id_0>(int x, int y) {    pixels[getIndex(x, y)] = Pixel.BLACK;  }  @Override",draw
689,"  void <extra_id_0>(Creature testedCreature, String name, Size size) {    assertEquals(size, testedCreature.getSize());  }  @ParameterizedTest  @MethodSource(""dataProvider"")",testGetSize
933,"    public void <extra_id_0>() {      synchronized (globalMutex) {        globalMutex.remove(this);        // Notify the waiter, other writer or reader        globalMutex.notifyAll();      }    }    @Override",unlock
3043,  private void <extra_id_0>(Money amount) {    money = money.plus(amount);  },receiveMoney
2179,  public String <extra_id_0>() {    return val.toString();  },toString
1856,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
67,  public void <extra_id_0>(UnitVisitor visitor) {    visitor.visit(this);    super.accept(visitor);  }  @Override,accept
2301,"  public Optional<LotteryTicketId> <extra_id_0>(LotteryTicket ticket) {    var playerDetails = ticket.getPlayerDetails();    var playerAccount = playerDetails.getBankAccount();    var result = wireTransfers.transferFunds(TICKET_PRIZE, playerAccount, SERVICE_BANK_ACCOUNT);    if (!result) {      notifications.ticketSubmitError(playerDetails);      return Optional.empty();    }    var optional = repository.save(ticket);    if (optional.isPresent()) {      notifications.ticketSubmitted(playerDetails);    }    return optional;  }  /**   * Check if lottery ticket has won.   */",submitTicket
2068,"  public Health <extra_id_0>() {    Supplier<Health> memoryCheck =        () -> {          MemoryMXBean memoryMxBean = ManagementFactory.getMemoryMXBean();          MemoryUsage heapMemoryUsage = memoryMxBean.getHeapMemoryUsage();          long maxMemory = heapMemoryUsage.getMax();          long usedMemory = heapMemoryUsage.getUsed();          double memoryUsage = (double) usedMemory / maxMemory;          String format = String.format(""%.2f%% of %d max"", memoryUsage * 100, maxMemory);          if (memoryUsage < memoryThreshold) {            LOGGER.info(""Memory usage is below threshold: {}"", format);            return Health.up().withDetail(""memory usage"", format).build();          } else {            return Health.down().withDetail(""memory usage"", format).build();          }        };    try {      CompletableFuture<Health> future =          asynchronousHealthChecker.performCheck(memoryCheck, timeoutInSeconds);      return future.get();    } catch (InterruptedException e) {      LOGGER.error(""Health check interrupted"", e);      Thread.currentThread().interrupt();      return Health.down().withDetail(""error"", ""Health check interrupted"").build();    } catch (ExecutionException e) {      LOGGER.error(""Health check failed"", e);      Throwable cause = e.getCause() == null ? e : e.getCause();      return Health.down().withDetail(""error"", cause.toString()).build();    }  }  /**   * Retrieves the health status of the application by checking the memory usage.   *   * @return the health status of the application   */  @Override",checkMemory
1851,"  void <extra_id_0>() throws InterruptedException {    var taskSet = new TaskSet();    taskSet.addTask(new Task(10));    assertEquals(1, taskSet.getSize());  }  @Test",testAddTask
1180,"  public String <extra_id_0>() {    return ""Elven warlord helps in "" + helpType;  }",toString
2903,  void <extra_id_0>() {    assertDoesNotThrow((Executable) App::main);  },shouldExecuteApplicationWithoutException
114,"  void <extra_id_0>() {    var c1 = new Candy(""green jelly"", ""jelly"", Type.CRUSHABLE_CANDY, 5);    var c2 = new Candy(""green apple"", ""apple"", Type.REWARD_FRUIT, 10);    var matrix = new Cell[4][4];    matrix[0][0] = new Cell(c1, 0, 0);    matrix[0][1] = new Cell(c1, 1, 0);    matrix[0][2] = new Cell(c2, 2, 0);    matrix[0][3] = new Cell(c1, 3, 0);    var cp = new CellPool(5);    var points1 = matrix[0][0].interact(matrix[0][1], cp, matrix);    var points2 = matrix[0][2].interact(matrix[0][3], cp, matrix);    assertTrue(points1 > 0 && points2 == 0);  }  @Test",interactTest
3582,  private boolean <extra_id_0>(int responseCode) {    return responseCode >= 200 && responseCode <= 299;  },isSuccessResponse
1357,"  void <extra_id_0>() {    UserModel model = new UserModel();    model.setEmail(""Lily@email"");    assertEquals(""Lily@email"", model.getEmail());  }",testSetEmail
200,  public long <extra_id_0>() {    return id;  },getId
3861,"  void <extra_id_0>() {    var carProperties = Map.of(        Property.MODEL.toString(), TEST_CAR_MODEL,        Property.PRICE.toString(), TEST_CAR_PRICE,        Property.PARTS.toString(), List.of(Map.of(), Map.of())    );    var car = new Car(carProperties);    assertEquals(TEST_CAR_MODEL, car.getModel().orElseThrow());    assertEquals(TEST_CAR_PRICE, car.getPrice().orElseThrow());    assertEquals(2, car.getParts().count());  }",shouldConstructCar
900,  public static void <extra_id_0>() {    customerRegistry = CustomerRegistry.getInstance();  }  @Test,setUp
1886,  public abstract String <extra_id_0>();,toString
3417,  protected String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var req = (PaymentRequest) parameters[0];    if (database.get(req.transactionId) == null || !req.paid) {      database.add(req);      req.paid = true;      return req.transactionId;    }    return null;  },updateDb
3777,  double <extra_id_0>();,random
1735,"  void <extra_id_0>() {    List<CalculatorAction> actions = List.of(        new SetVariableCalculatorAction(2.0),        new AdditionCalculatorAction(),        new AdditionCalculatorAction(),        new SubtractionCalculatorAction()    );    CalculatorModel model = modelAfterExecutingActions(actions);    assert model.getVariable() == 2.0 && model.getOutput() == 2.0;  }  @Test",testSubtraction
386,  void <extra_id_0>() {    appender.stop();  }  /**   * Switch to a complete mammoth 'mood'-cycle and verify if the observed mood matches the expected   * value.   */  @Test,tearDown
311,"  void <extra_id_0>() {    assertEquals(0, appender.getLogSize());    this.method.confuseTarget(this.expectedTarget);    assertEquals(this.expectedConfuseMethod, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }  /**   * Verify if the stealing step goes as planned   */  @Test",testConfuseTarget
3037,"  public void <extra_id_0>() {    try {      Optional<Customer> customer = customerDao.findByName(name);      if (customer.isPresent()) {        customerDao.update(this);      } else {        customerDao.save(this);      }    } catch (SQLException ex) {      LOGGER.error(ex.getMessage());    }  }  /**   * Add product to purchases, save to db and withdraw money.   *   * @param product to buy.   */",save
2909,  public Optional<Student> <extra_id_0>(int studentId) {    return this.getStudents().stream().filter(x -> x.getStudentId() == studentId).findFirst();  }  @Override,find
253,"  public static void <extra_id_0>(final String[] args) {    final var nums = new int[]{1, 2, 3, 4, 5};    //Before migration    final var oldSystem = new OldArithmetic(new OldSource());    oldSystem.sum(nums);    oldSystem.mul(nums);    //In process of migration    final var halfSystem = new HalfArithmetic(new HalfSource(), new OldSource());    halfSystem.sum(nums);    halfSystem.mul(nums);    halfSystem.ifHasZero(nums);    //After migration    final var newSystem = new NewArithmetic(new NewSource());    newSystem.sum(nums);    newSystem.mul(nums);    newSystem.ifHasZero(nums);  }",main
3399,  protected String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var o = (Order) parameters[0];    if (database.get(o.id) == null) {      database.add(o);      return o.id; //true rcvd - change addedToEmployeeHandle to true else dont do anything    }    return null;  },updateDb
2448,  void <extra_id_0>() {    for (final var menuItem : MenuItem.values()) {      final var toString = menuItem.toString();      assertNotNull(toString);      assertFalse(toString.trim().isEmpty());    }  },testToString
3133,  private Connection <extra_id_0>() throws SQLException {    return dataSource.getConnection();  },getConnection
2813,"  public void <extra_id_0>(SpaceStationMir mir) {    LOGGER.info(AppConstants.HITS + "" {} is damaged!"", mir.getClass().getSimpleName(),        this.getClass().getSimpleName(), this.getClass().getSimpleName());    setDamaged(true);  }  @Override",collisionResolve
1768,  public int <extra_id_0>() {    return this.value;  },getValue
2741,  public void <extra_id_0>(Event e) {    notifyObservers(e);  },onEvent
683,  void <extra_id_0>() {    final var lightCreature = mock(Creature.class);    when(lightCreature.getMass()).thenReturn(new Mass(50.0));    final var heavyCreature = mock(Creature.class);    when(heavyCreature.getMass()).thenReturn(new Mass(2500.0));    final var lightSelector = new MassSmallerThanOrEqSelector(500.0);    assertTrue(lightSelector.test(lightCreature));    assertFalse(lightSelector.test(heavyCreature));  },testMass
490,"  void <extra_id_0>() {    try {      var shard = new Shard(1);      shardManager.addNewShard(shard);      boolean flag = shardManager.removeShardById(1);      var field = ShardManager.class.getDeclaredField(""shardMap"");      field.setAccessible(true);      var map = (Map<Integer, Shard>) field.get(shardManager);      assertTrue(flag);      assertEquals(0, map.size());    } catch (IllegalAccessException | NoSuchFieldException e) {      fail(""Fail to modify field access."");    }  }  @Test",testRemoveShardById
2101,"  void <extra_id_0>() {    final var topping = new CakeTopping(""topping"", 20);    topping.setId(2345L);    final var layer = new CakeLayer(""layer"", 100);    layer.setId(3456L);    final var cake = new Cake();    cake.setId(1234L);    cake.setTopping(topping);    cake.addLayer(layer);    final var expected = ""id=1234 topping=id=2345 name=topping calories=20 ""        + ""layers=[id=3456 name=layer calories=100]"";    assertEquals(expected, cake.toString());  }",testToString
2424,  public void <extra_id_0>() {    LOGGER.info(content.toString());  },render
549,  List<Wizard> <extra_id_0>();,findAllWizards
1064,"  public String <extra_id_0>() {    return ""init an order"";  }",getName
3412,  public QueueTask <extra_id_0>() throws IsEmptyException {    return this.data.dequeue();  }  @Override,dequeue
3231,"  public boolean <extra_id_0>(Object o) {    if (this == o) {      return true;    }    if (o == null || getClass() != o.getClass()) {      return false;    }    Book book = (Book) o;    return Objects.equals(author, book.author)            && Objects.equals(genre, book.genre)            && Objects.equals(title, book.title)            && Objects.equals(publicationDate, book.publicationDate);  }  @Override",equals
1791,"  void <extra_id_0>(){    Assertions.assertThrows(IllegalArgumentException.class, () -> elf.hit(-50));  }",invalidDamageTest
1748,  String <extra_id_0>();,tag
2330,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2669,  public void <extra_id_0>(AccountCreateEvent accountCreateEvent) {    AccountAggregate.putAccount(this);    if (accountCreateEvent.isRealTime()) {      LOGGER.info(MSG);    }  }  /**   * Handles transfer from account event.   *   * @param moneyTransferEvent the money transfer event   */,handleEvent
2874,"  public void <extra_id_0>() {    LOGGER.info(""[Sergeant] "" + unit.getName() + "" is ready!"");  }",sergeantReady
594,  void <extra_id_0>() {    HibernateUtil.dropSession();  },tearDown
1446,"  void <extra_id_0>() {    //Creating parameter object with default value for SortOrder set    ParameterObject params = ParameterObject.newBuilder()        .withType(""sneakers"")        .sortBy(""brand"")        .build();    assertEquals(ParameterObject.DEFAULT_SORT_ORDER, params.getSortOrder(),        ""Default SortOrder is not set."");    LOGGER.info(""{} Default parameter value is set during object creation as no value is passed.""        , ""SortOrder"");  }",testForDefaultSortOrder
3475,"  void <extra_id_0>() {    var res = filteredFinder("" was "", ""many"", ""child"").find(text());    assertEquals(1, res.size());    assertEquals( ""But we loved with a love that was more than love-"", res.get(0));  }  @Test",filteredFinderTest
2026,"  void <extra_id_0>() {    CompletableFuture<Health> future =        CompletableFuture.completedFuture(Health.up().withDetail(""database"", ""reachable"").build());    when(healthChecker.performCheck(any(), anyLong())).thenReturn(future);    when(healthCheckRepository.checkHealth()).thenReturn(1);    Health health = customHealthIndicator.health();    assertEquals(Status.UP, health.getStatus());  }  /**   * Test case for the `health()` method when the database is down.   *   * <p>Asserts that when the `health()` method is called and the database is down, it returns a   * Health object with Status.DOWN.   */  @Test",whenDatabaseIsUp_thenHealthIsUp
2005,"    public void <extra_id_0>(ActionEvent e) {      var temp = jt.getSelectedRow();      if (temp == -1) {        return;      }      var temp2 = jt.getSelectedRowCount();      IntStream.range(0, temp2).forEach(i -> dtm.removeRow(temp));    }  }}",actionPerformed
1154,  String <extra_id_0>();,getBody
2008,  public String <extra_id_0>() {    return contactNumber;  },getContactNumber
1893,  abstract Heavy <extra_id_0>() throws Exception;  /**   * This test shows that the heavy field is not instantiated until the method getHeavy is called   */  @Test,getHeavy
1948,"  protected void <extra_id_0>() {    try {      var isLeaderAlive = messageManager.sendHeartbeatMessage(this.leaderId);      if (isLeaderAlive) {        LOGGER.info(INSTANCE + localId + ""- Leader is alive. Start next heartbeat in 5 second."");        Thread.sleep(HEARTBEAT_INTERVAL);        messageManager.sendHeartbeatInvokeMessage(this.localId);      } else {        LOGGER.info(INSTANCE + localId + ""- Leader is not alive. Start election."");        messageManager.sendElectionMessage(this.localId, String.valueOf(this.localId));      }    } catch (InterruptedException e) {      LOGGER.info(INSTANCE + localId + ""- Interrupted."");    }  }  /**   * Process election message. If the local ID is contained in the ID list, the instance will select   * the alive instance with smallest ID to be the new leader, and send the leader inform message.   * If not, it will add its local ID to the list and send the message to the next instance in the   * ring.   */  @Override",handleHeartbeatInvokeMessage
2890,    int <extra_id_0>() {      return log.size();    }  }},getLogSize
3579,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(App.class, args);  }",main
514,  public abstract int <extra_id_0>(final Data data);  /**   * Allocate proper shard to provided data.   *   * @param data new data   * @return id of shard that the data should be stored   */,storeData
1235,"  public static void <extra_id_0>(String[] args) {    // stew is mutable    var stew = new Stew(1, 2, 3, 4);    stew.mix();    stew.taste();    stew.mix();    // immutable stew protected with Private Class Data pattern    var immutableStew = new ImmutableStew(2, 4, 3, 6);    immutableStew.mix();  }",main
1872,  void <extra_id_0>(Action action);,act
1203,  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    model.setIsClassical(true);    assertTrue(model.getIsClassical());  }  @Test,testSetIsClassical
3214,"  public void <extra_id_0>(HttpServletRequest req, HttpServletResponse resp)          throws ServletException, IOException {    resp.setContentType(CONTENT_TYPE);    try (PrintWriter out = resp.getWriter()) {      out.println(msgPartOne + "" Post "" + msgPartTwo);    }  }  @Override",doPost
3406,"  void <extra_id_0>(T obj) {    if (front == null) {      front = new Node<>(obj, null);      rear = front;    } else {      var temp = new Node<>(obj, null);      rear.next = temp;      rear = temp;    }    size++;  }",enqueue
784,  void <extra_id_0>() {    final var king = new King();    king.getDrink();    king.changeMood();    assertFalse(king.getMood());  }  @Test,testHungryDrunkUncomplimentedKing
118,  default Trampoline<T> <extra_id_0>() {    return this;  },jump
197,"  void <extra_id_0>() throws BookNotFoundException, VersionMismatchException {    final var aliceBook = bookRepository.get(bookId);    final var bobBook = bookRepository.get(bookId);    aliceBook.setTitle(""Kama Sutra"");    bookRepository.update(aliceBook);    bobBook.setAuthor(""Vatsyayana Mallanaga"");    try {      bookRepository.update(bobBook);    } catch (VersionMismatchException e) {      assertEquals(0, bobBook.getVersion());      var actualBook = bookRepository.get(bookId);      assertEquals(1, actualBook.getVersion());      assertEquals(aliceBook.getVersion(), actualBook.getVersion());      assertEquals("""", bobBook.getTitle());      assertNotEquals(aliceBook.getAuthor(), bobBook.getAuthor());    }  }",testShouldThrowVersionMismatchExceptionOnStaleUpdate
3577,"  public DesktopProduct <extra_id_0>() {    var desktopProduct = new DesktopProduct();    desktopProduct.setImagePath(imageClient.getImagePath());    desktopProduct.setPrice(priceClient.getPrice());    return desktopProduct;  }  /**   * Retrieves product information that mobile clients need.   *   * @return Product information for clients on a mobile device   */  @GetMapping(""/mobile"")",getProductDesktop
219,  public static void <extra_id_0>() {    world = null;  }  @Test,tearDown
3118,"  void <extra_id_0>() {    var u1 = new UserDto(""Tom"", ""Hanks"", true, ""tom@hanks.com"");    var u2 = userConverter.convertFromEntity(userConverter.convertFromDto(u1));    assertEquals(u1, u2);  }  /**   * Tests the custom users converter. Thanks to Java8 lambdas, converter can be easily and cleanly   * instantiated allowing various different conversion strategies to be implemented.   */  @Test",testConversionsStartingFromDto
1205,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testComposer = ""TestComposer"";    model.setIsClassical(true);    model.setComposer(testComposer);    assertEquals(testComposer, model.getComposer());  }",testSetComposer_true
3810,  String <extra_id_0>();,getDescription
1618,  private static void <extra_id_0>(Resource resource) {    Mute.loggedMute(resource::close);  },closeResource
3636,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[5];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = LITERAL.getIntValue();    bytecode[3] = 50;                        // agility amount    bytecode[4] = SET_AGILITY.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(50, vm.getWizards()[wizardNumber].getAgility());  }  @Test",testSetAgility
209,"  public void <extra_id_0>(Book book) throws BookNotFoundException, VersionMismatchException {    if (!collection.containsKey(book.getId())) {      throw new BookNotFoundException(""Not found book with id: "" + book.getId());    }    var latestBook = collection.get(book.getId());    if (book.getVersion() != latestBook.getVersion()) {      throw new VersionMismatchException(        ""Tried to update stale version "" + book.getVersion()          + "" while actual version is "" + latestBook.getVersion()      );    }    // update version, including client representation - modify by reference here    book.setVersion(book.getVersion() + 1);    // save book copy to repository    collection.put(book.getId(), new Book(book));  }  /**   * Returns book representation to the client.   * Representation means we are returning copy of the book.   */",update
3595,  public void <extra_id_0>(String movie) {    businessDelegate.playbackMovie(movie);  },playbackMovie
3850,"  public String <extra_id_0>() {    var builder = new StringBuilder();    builder.append(getClass().getName()).append(""["");    properties.forEach((key, value) -> builder.append(""["").append(key).append("" : "").append(value)        .append(""]""));    builder.append(""]"");    return builder.toString();  }",toString
1142,  void <extra_id_0>(Message msg) throws InterruptedException;,put
1386,  void <extra_id_0>() {    appender = new InMemoryAppender(Weather.class);  }  @AfterEach,setUp
2974,"  void <extra_id_0>() {    var customer = new CustomerDto(""1"", ""Terry"", ""Nguyen"");    var customers = new ArrayList<>(List.of(customer));    var customerResource = new CustomerResource(customers);    customerResource.delete(customer.getId());    var allCustomers = customerResource.getAllCustomers();    assertTrue(allCustomers.isEmpty());  }",shouldDeleteCustomer
1489,"  public AlbumPage <extra_id_0>(String artist) {    var artistInputTextField = (HtmlTextInput) page.getElementById(""albumArtist"");    artistInputTextField.setText(artist);    return this;  }  /**   * Selects the select's option value based on the year value given   *   * @param year the new year value to set   * @return {@link AlbumPage}   */",changeArtist
2875,"  public void <extra_id_0>() {    LOGGER.info(""[Soldier] "" + unit.getName() + "" is ready!"");  }",soldierReady
1964,  public static void <extra_id_0>() {    // Close caches and connection pools    getSessionFactory().close();  },shutdown
2751,  public static void <extra_id_0>(String[] args) {    var app = new App();    app.setUp();    app.run();  }  /**   * App can run in interactive mode or not. Interactive mode == Allow user interaction with command   * line. Non-interactive is a quick sequential run through the available {@link EventManager}   * operations.   */,main
3679,"  public UserAccount <extra_id_0>(final String userId) {    if (cache.contains(userId)) {      LOGGER.info(""# Found in cache!"");      return cache.get(userId);    }    LOGGER.info(""# Not found in Cache!"");    UserAccount userAccount = dbManager.readFromDb(userId);    if (cache.isFull()) {      LOGGER.info(""# Cache is FULL! Writing LRU data to DB..."");      UserAccount toBeWrittenToDb = cache.getLruData();      dbManager.upsertDb(toBeWrittenToDb);    }    cache.set(userId, userAccount);    return userAccount;  }  /**   * Set user account.   * @param userAccount {@link UserAccount}   */",readThroughWithWriteBackPolicy
3041,"  public void <extra_id_0>() {    LOGGER.info(name + "" balance: "" + money);  }",showBalance
1025,"    public String <extra_id_0>() {      return ""4"";    }    @Override",getName
656,  public boolean <extra_id_0>(T t) {    return leafComponents.stream().allMatch(comp -> (comp.test(t)));  },test
3689,"  public void <extra_id_0>() {    LOGGER.info(""# CachingPolicy.THROUGH"");    appManager.initCachingPolicy(CachingPolicy.THROUGH);    var userAccount1 = new UserAccount(""001"", ""John"", ""He is a boy."");    appManager.save(userAccount1);    LOGGER.info(appManager.printCacheContent());    appManager.find(""001"");    appManager.find(""001"");  }  /**   * Read-through and write-around.   */",useReadAndWriteThroughStrategy
1805,"  public static int[][] <extra_id_0>(int rows, int columns) {    var matrix = new int[rows][columns];    for (var i = 0; i < rows; i++) {      for (var j = 0; j < columns; j++) {        //filling cells in matrix        matrix[i][j] = RANDOM.nextInt(10);      }    }    return matrix;  }  /**   * Method printMatrix prints input matrix @param matrix.   */",createRandomIntMatrix
2860,"  void <extra_id_0>() {    testCollision(        new Meteoroid(1, 1, 3, 4),        false, false,        false, false    );  }  /**   * Test what happens we collide with ISS   */  @Test",testCollideMeteoroid
3217,"  void <extra_id_0>() {    MessageDependentObject dependentObject = new MessageDependentObject();    console.init();    console.dependentObjects[0] = dependentObject;    String message = ""Danger"";    assertNull(console.dependentObjects[0].getData());    dependentObject.setData(message);    assertEquals(message, console.dependentObjects[0].getData());  }  @Test",dependentObjectChangedForPersistenceTest
966,"  void <extra_id_0>() {    assertEquals(4, repository.count());  }  @Test",testCount
1225,  public String <extra_id_0>() {    return selectedAlbum.getArtist();  }  /**   * set the name of artist.   *   * @param value the name want artist to be.   */,getArtist
1094,"  public String <extra_id_0>() {    return ""Saga{""        + ""chapters=""        + Arrays.toString(chapters.toArray())        + "", pos=""        + pos        + "", forward=""        + forward        + '}';  }",toString
1687,  void <extra_id_0>(String data);,displayData
3238,    Book <extra_id_0>(LocalDate publicationDate);  }},withPublicationDate
1666,  public Health <extra_id_0>() {    return giant.getHealth();  },getHealth
106,  Candy[] <extra_id_0>() throws JsonParseException {    var jp = new JsonParser();    jp.parse();    var randomCode = new Candy[jp.candies.size() - 2]; //exclude generic types 'fruit' and 'candy'    var i = 0;    for (var e = jp.candies.keys(); e.hasMoreElements(); ) {      var s = e.nextElement();      if (!s.equals(FRUIT) && !s.equals(CANDY)) {        //not generic        randomCode[i] = jp.candies.get(s);        i++;      }    }    return randomCode;  },assignRandomCandytypes
1089,    public Object <extra_id_0>() {      return inValue;    },getInValue
1372,"  void <extra_id_0>() {    final var instance = NullNode.getInstance();    assertNotNull(instance);    assertSame(instance, NullNode.getInstance());  }  @Test",testGetInstance
3035,  void <extra_id_0>(Product product) throws SQLException;,save
3559,"  public String <extra_id_0>() throws RemoteServiceException {    var currentTime = System.nanoTime();    //Since currentTime and serverStartTime are both in nanoseconds, we convert it to    //seconds by diving by 10e9 and ensure floating point division by multiplying it    //with 1.0 first. We then check if it is greater or less than specified delay and then    //send the reply    if ((currentTime - serverStartTime) * 1.0 / (1000 * 1000 * 1000) < delay) {      //Can use Thread.sleep() here to block and simulate a hung server      throw new RemoteServiceException(""Delayed service is down"");    }    return ""Delayed service is working"";  }",call
2757,"  private void <extra_id_0>(EventManager eventManager, Scanner s) {    LOGGER.info(""Which egg?: "");    var eventId = s.nextInt();    try {      eventManager.cancel(eventId);      LOGGER.info(""Egg [{}] is removed from boiler."", eventId);    } catch (EventDoesNotExistException e) {      LOGGER.error(e.getMessage());    }  }",processOption2
1126,  private T <extra_id_0>(int parentIndex) {    return queue[rightChildIndex(parentIndex)];  }  // check,right
3080,"  void <extra_id_0>() throws SQLException {    TestUtils.executeSQL(INSERT_CUSTOMER_SQL, dataSource);    customer.setMoney(Money.of(CurrencyUnit.USD, 99));    customerDao.update(customer);    try (var connection = dataSource.getConnection();        var statement = connection.createStatement();        ResultSet rs = statement.executeQuery(SELECT_CUSTOMERS_SQL)) {      assertTrue(rs.next());      assertEquals(customer.getName(), rs.getString(""name""));      assertEquals(customer.getMoney(), Money.of(USD, rs.getBigDecimal(""money"")));      assertFalse(rs.next());    }  }  @Test",shouldUpdateCustomer
167,  public static DataSource <extra_id_0>() {    JdbcDataSource dataSource = new JdbcDataSource();    dataSource.setUrl(H2_DB_URL);    return dataSource;  },createDataSource
151,"  void <extra_id_0>() {    final var newRoomType = ""Double"";    room.setRoomType(newRoomType);    assertEquals(newRoomType, room.getRoomType());  }  @Test",getAndSetRoomType
492,    public int <extra_id_0>(Data data) {      return 0;    }    @Override,storeData
1390,"  public Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{WeatherType.SUNNY, ""The hobbits are facing Sunny weather now""},        new Object[]{WeatherType.RAINY, ""The hobbits are facing Rainy weather now""},        new Object[]{WeatherType.WINDY, ""The hobbits are facing Windy weather now""},        new Object[]{WeatherType.COLD, ""The hobbits are facing Cold weather now""});  }  /**   * Create a new test with the given weather and expected response   */",dataProvider
1062,  ChapterResult<K> <extra_id_0>(K value);  /**   * The operation executed in rollback case.   *   * @param value incoming value   * @return result {@link ChapterResult}   */,process
2940,      public Double <extra_id_0>() {        return price;      },getPrice
1227,  public boolean <extra_id_0>() {    return selectedAlbum.isClassical();  }  /**   * set the isClassical of album.   *   * @param value is the album classical.   */,getIsClassical
2198,  void <extra_id_0>() {    controller = new GameController();  }  @AfterEach,setup
438,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""iloveyou"");    user.setId(2);    assertEquals(2, user.getId());  }  @Test",testSetId
485,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1305,    public Integer <extra_id_0>() throws Exception {      // Do number crunching      Thread.sleep(100);      return CRUNCHED_NUMBER;    }  }},call
618,  public void <extra_id_0>(Nourishment nourishment) {    giant.setNourishment(nourishment);  },setNourishment
1991,"  public String <extra_id_0>(Order order) {    var result = super.execute(order);    var orderItem = order.getOrderItem();    if (orderItem == null || orderItem.isEmpty()) {      return result + ""Invalid order! "";    } else {      return result;    }  }",execute
1035,  public Chapter <extra_id_0>(int idx) {    return chapters.get(idx);  },get
226,"  void <extra_id_0>() {    statue.frames = 19;    statue.update();    assertEquals(0, statue.frames);  }",testUpdateForShooting
1279,  public boolean <extra_id_0>(boolean mayInterruptIfRunning) {    return false;  }  @Override,cancel
2589,"  public Filterer<? extends ThreatAwareSystem, ? extends Threat> <extra_id_0>() {    return this::filteredGroup;  }",filtered
373,  void <extra_id_0>() {    assertNotNull(this.factory.apply(0).toString());  }  /**   * Extract the result from a future or returns 'null' when an exception occurred   *   * @param future The future we want the result from   * @param <O>    The result type   * @return The result or 'null' when a checked exception occurred   */,testToString
3304,  void <extra_id_0>() {    this.stdOutBuffer = new ByteArrayOutputStream();    System.setOut(new PrintStream(stdOutBuffer));  }  /**   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class   */  @AfterEach,setUp
1486,  public AlbumPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      e.printStackTrace();    }    return this;  }  /**   * {@inheritDoc}   */  @Override,navigateToPage
682,  void <extra_id_0>() {    final var swimmingCreature = mock(Creature.class);    when(swimmingCreature.getMovement()).thenReturn(Movement.SWIMMING);    final var flyingCreature = mock(Creature.class);    when(flyingCreature.getMovement()).thenReturn(Movement.FLYING);    final var swimmingSelector = new MovementSelector(Movement.SWIMMING);    assertTrue(swimmingSelector.test(swimmingCreature));    assertFalse(swimmingSelector.test(flyingCreature));  },testMovement
628,  void <extra_id_0>(Action action) {    actions.add(action);  }  /**   * Perform an action.   *   * @param s           the s   * @param actionIndex the action index   */,addAction
1846,  public void <extra_id_0>(Worker worker) {    workers.add(worker);  },addWorker
1999,  String <extra_id_0>(Order order);  /**   * Set next filter in chain after this.   */,execute
1564,"  public Validator<T> <extra_id_0>(Predicate<? super T> validation, String message) {    if (!validation.test(obj)) {      exceptions.add(new IllegalStateException(message));    }    return this;  }  /**   * Extension for the {@link Validator#validate(Predicate, String)} method, dedicated for objects,   * that need to be projected before requested validation.   *   * @param projection function that gets an objects, and returns projection representing element to   *                   be validated.   * @param validation see {@link Validator#validate(Predicate, String)}   * @param message    see {@link Validator#validate(Predicate, String)}   * @param <U>        see {@link Validator#validate(Predicate, String)}   * @return this   */",validate
1275,"  public static Integer <extra_id_0>(String fileLocation) {    try (var bufferedReader = new BufferedReader(new FileReader(fileLocation))) {      return (int) bufferedReader.lines().count();    } catch (IOException ex) {      ex.printStackTrace();    }    return 0;  }  /**   * Downloads the contents from the given urlString, and stores it in a temporary directory.   *   * @return the absolute path of the file downloaded.   */",countLines
1130,"  private void <extra_id_0>(int fpos, int tpos) {    var tmp = queue[fpos];    queue[fpos] = queue[tpos];    queue[tpos] = tmp;  }",swap
1379,  void <extra_id_0>();,walk
3352,"  void <extra_id_0>() throws Exception {    //goes to payment after 2 retries maybe - rest is successful for now    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }  /**   * Program entry point.   *   * @param args command line args   */",shippingSuccessCase
3781,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1714,  public void <extra_id_0>(FileLoader loader) {    this.loader = loader;  }  /**   * Starts the presenter.   */,setLoader
1310,"  void <extra_id_0>() {    final var prototype = new Character();    prototype.set(Stats.ARMOR, 1);    prototype.set(Stats.AGILITY, 2);    prototype.set(Stats.INTELLECT, 3);    assertEquals(""Stats: - AGILITY:2 - ARMOR:1 - INTELLECT:3"", prototype.toString());    final var stupid = new Character(Type.ROGUE, prototype);    stupid.remove(Stats.INTELLECT);    assertEquals(""Character type: ROGUEStats: - AGILITY:2 - ARMOR:1"", stupid.toString());    final var weak = new Character(""weak"", prototype);    weak.remove(Stats.ARMOR);    assertEquals(""Player: weakStats: - AGILITY:2 - INTELLECT:3"", weak.toString());  }  @Test",testToString
2167,  public TreeNode<T> <extra_id_0>() throws NoSuchElementException {    if (pathStack.isEmpty()) {      throw new NoSuchElementException();    }    var next = pathStack.pop();    pushPathToNextSmallest(next.getRight());    return next;  },next
1939,"  public boolean <extra_id_0>(int currentId, int leaderId) {    var leaderMessage = new Message(MessageType.LEADER, String.valueOf(leaderId));    instanceMap.keySet()        .stream()        .filter((i) -> i != currentId)        .forEach((i) -> instanceMap.get(i).onMessage(leaderMessage));    return false;  }  /**   * Send heartbeat invoke message to the next instance.   *   * @param currentId Instance ID of which sends this message.   */  @Override",sendLeaderMessage
3094,  void <extra_id_0>() {    appender = new InMemoryAppender(Tobacco.class);  }  @AfterEach,setUp
2736,"  void <extra_id_0>() throws Exception {    final var observer = mock(EventObserver.class);    final var kingsHand = new KingsHand();    kingsHand.registerObserver(observer, Event.STARK_SIGHTED);    kingsHand.registerObserver(observer, Event.WARSHIPS_APPROACHING);    kingsHand.registerObserver(observer, Event.TRAITOR_DETECTED);    kingsHand.registerObserver(observer, Event.WHITE_WALKERS_SIGHTED);    // The kings hand should not pass any events before he received one    verifyNoMoreInteractions(observer);    // Verify if each event is passed on to the observer, nothing less, nothing more.    Arrays.stream(Event.values()).forEach(event -> {      kingsHand.onEvent(event);      verify(observer, times(1)).onEvent(eq(event));      verifyNoMoreInteractions(observer);    });  }",testPassThrough
344,    public BuildStep <extra_id_0>() {      return this;    }    @Override,noAbilities
3576,  private boolean <extra_id_0>(int responseCode) {    return responseCode >= 200 && responseCode <= 299;  },isSuccessResponse
2557,"  public String <extra_id_0>() {    return ""Spear"";  }",toString
2970,  public List<Product> <extra_id_0>() {    return products;  },getProducts
2474,  public final FluentIterable<E> <extra_id_0>(Predicate<? super E> predicate) {    var iterator = iterator();    while (iterator.hasNext()) {      var nextElement = iterator.next();      if (!predicate.test(nextElement)) {        iterator.remove();      }    }    return this;  }  /**   * Can be used to collect objects from the Iterable. Is a terminating operation.   *   * @return an option of the first object of the Iterable   */  @Override,filter
2262,"  public Optional<LotteryTicketId> <extra_id_0>(LotteryTicket ticket) {    var ticketId = getNextId();    var doc = new Document(TICKET_ID, ticketId);    doc.put(""email"", ticket.getPlayerDetails().getEmail());    doc.put(""bank"", ticket.getPlayerDetails().getBankAccount());    doc.put(""phone"", ticket.getPlayerDetails().getPhoneNumber());    doc.put(""numbers"", ticket.getLotteryNumbers().getNumbersAsString());    ticketsCollection.insertOne(doc);    return Optional.of(new LotteryTicketId(ticketId));  }  @Override",save
3730,"  void <extra_id_0>() {    db = mock(MongoDatabase.class);    mongoDb.setDb(db);    userAccount = new UserAccount(ID, NAME, ADDITIONAL_INFO);  }  @Test",init
1493,"  public AlbumListPage <extra_id_0>() {    var cancelButton = (HtmlSubmitInput) page.getElementById(""cancelButton"");    try {      cancelButton.click();    } catch (IOException e) {      e.printStackTrace();    }    return new AlbumListPage(webClient);  }  /**   * Saves changes made by clicking the save button   *   * @return {@link AlbumPage}   */",cancelChanges
1319,  public Integer <extra_id_0>(Stats stat) {    var containsValue = properties.containsKey(stat);    if (containsValue) {      return properties.get(stat);    } else {      return prototype.get(stat);    }  }  @Override,get
2231,"  public boolean <extra_id_0>() {    return status == GameStatus.RUNNING;  }  /**   * Handle any user input that has happened since the last call. In order to   * simulate the situation in real-life game, here we add a random time lag.   * The time lag ranges from 50 ms to 250 ms.   */",isGameRunning
1144,"    public void <extra_id_0>(Headers header, String value) {      throw poison();    }    @Override",addHeader
797,"  void <extra_id_0>() {    target = new DomesticTaxCalculator();    var tax = target.calculate(100.0);    Assertions.assertEquals(tax, 20.0);  }",testTaxCalculation
66,"  public String <extra_id_0>() {    return ""sergeant"";  }",toString
1476,"  void <extra_id_0>() {    var albumListPage = loginPage        .enterUsername(""admin"")        .enterPassword(""password"")        .login();    albumListPage.navigateToPage();    assertTrue(albumListPage.isAt());  }",testLogin
340,    public AbilityStep <extra_id_0>(String spell) {      this.spell = spell;      return this;    }    @Override,withSpell
651,  public String <extra_id_0>() {    return title;  },toString
3758,  void <extra_id_0>() {    final var hammer = spy(new Hammer(mock(FlyingEnchantment.class)));    testBasicWeaponActions(hammer);  },testHammer
3544,"  void <extra_id_0>() {    var circuitBreaker = new DefaultCircuitBreaker(null, 1, 1, 100);    //Right now, failureCount<failureThreshold, so state should be closed    assertEquals(circuitBreaker.getState(), ""CLOSED"");    circuitBreaker.failureCount = 4;    circuitBreaker.lastFailureTime = System.nanoTime();    circuitBreaker.evaluateState();    //Since failureCount>failureThreshold, and lastFailureTime is nearly equal to current time,    //state should be half-open    assertEquals(circuitBreaker.getState(), ""HALF_OPEN"");    //Since failureCount>failureThreshold, and lastFailureTime is much lesser current time,    //state should be open    circuitBreaker.lastFailureTime = System.nanoTime() - 1000 * 1000 * 1000 * 1000;    circuitBreaker.evaluateState();    assertEquals(circuitBreaker.getState(), ""OPEN"");    //Now set it back again to closed to test idempotency    circuitBreaker.failureCount = 0;    circuitBreaker.evaluateState();    assertEquals(circuitBreaker.getState(), ""CLOSED"");  }  @Test",testEvaluateState
842,    public void <extra_id_0>(SocketAddress receiver) {      this.receiver = receiver;    }    /**     * Get data.     *     * @return the underlying message that will be written on channel.     */,setReceiver
3158,"    void <extra_id_0>() throws Exception {      try (var allCustomers = dao.getAll()) {        assumeTrue(allCustomers.count() == 1);      }      final var nonExistingCustomer = new Customer(2, ""Robert"", ""Englund"");      var result = dao.add(nonExistingCustomer);      assertTrue(result);      assertCustomerCountIs(2);      assertEquals(nonExistingCustomer, dao.getById(nonExistingCustomer.getId()).get());    }    @Test",addingShouldResultInSuccess
2721,"  void <extra_id_0>() throws Exception {    final var testMessage = ""Test message"";    final var temporaryFile = this.testFolder.newFile();    assertTrue(temporaryFile.exists());    new SimpleFileWriter(temporaryFile.getPath(), writer -> writer.write(testMessage));    assertTrue(Files.lines(temporaryFile.toPath()).allMatch(testMessage::equals));  }  @Test",testContentsAreWrittenToFile
2784,"  void <extra_id_0>() {    assertThrows(InvalidOperationException.class, () -> {      var eventManager = new EventManager();      try {        var sEventId = eventManager.create(60);        eventManager.start(sEventId);        sEventId = eventManager.create(60);        eventManager.start(sEventId);      } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException e) {        LOGGER.error(e.getMessage());      }    });  }  @Test",testUnsuccessfulSynchronousEvent
763,  void <extra_id_0>();,changeMood
3604,  void <extra_id_0>() {    assertDoesNotThrow((Executable) App::main);  },shouldExecuteApplicationWithoutException
2203,  void <extra_id_0>() {    gameLoop = null;  }  @Test,tearDown
1,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  }  @BeforeEach  @AfterEach,shouldExecuteWithoutException
875,"    public String <extra_id_0>() {      return ""Change of ops to: "" + interestedOps;    }  }}",toString
1678,  public static void <extra_id_0>(String[] args) {    var loader = new FileLoader();    var frame = new FileSelectorJframe();    var presenter = new FileSelectorPresenter(frame);    presenter.setLoader(loader);    presenter.start();  },main
2688,"  void <extra_id_0>() {    var dispatcher = spy(new EventDispatcher());    var userCreatedEventHandler = spy(new UserCreatedEventHandler());    var userUpdatedEventHandler = spy(new UserUpdatedEventHandler());    dispatcher.registerHandler(UserCreatedEvent.class, userCreatedEventHandler);    dispatcher.registerHandler(UserUpdatedEvent.class, userUpdatedEventHandler);    var user = new User(""iluwatar"");    var userCreatedEvent = new UserCreatedEvent(user);    var userUpdatedEvent = new UserUpdatedEvent(user);    //fire a userCreatedEvent and verify that userCreatedEventHandler has been invoked.    dispatcher.dispatch(userCreatedEvent);    verify(userCreatedEventHandler).onEvent(userCreatedEvent);    verify(dispatcher).dispatch(userCreatedEvent);    //fire a userCreatedEvent and verify that userUpdatedEventHandler has been invoked.    dispatcher.dispatch(userUpdatedEvent);    verify(userUpdatedEventHandler).onEvent(userUpdatedEvent);    verify(dispatcher).dispatch(userUpdatedEvent);  }",testEventDriverPattern
2951,      public Public <extra_id_0>(Double price) {        this.price = price;        return this;      }      @Override,setPrice
2807,"  public String <extra_id_0>() {    return String.format(""[%d,%d,%d,%d]"", getLeft(), getTop(), getRight(), getBottom());  }",toString
1108,"  void <extra_id_0>() {    var stringPriorityMessageQueue = new PriorityMessageQueue<>(new Integer[2]);    assertTrue(stringPriorityMessageQueue.isEmpty());    stringPriorityMessageQueue.add(1);    stringPriorityMessageQueue.add(2);    stringPriorityMessageQueue.add(2);    stringPriorityMessageQueue.add(3);    assertEquals(3, (int) stringPriorityMessageQueue.remove());  }",testEnsureSize
33,"  void <extra_id_0>() {    assertTimeout(ofMillis(5000), () -> {      final var ballThread = new BallThread();      final var ballItem = mock(BallItem.class);      ballThread.setTwin(ballItem);      ballThread.suspendMe();      ballThread.start();      sleep(1000);      verifyNoMoreInteractions(ballItem);      ballThread.resumeMe();      sleep(300);      verify(ballItem, atLeastOnce()).draw();      verify(ballItem, atLeastOnce()).move();      ballThread.stopMe();      ballThread.join();      verifyNoMoreInteractions(ballItem);    });  }  /**   * Verify if the {@link BallThread} is interruptible   */  @Test",testResume
1114,  public void <extra_id_0>(Message message) {    messagePriorityMessageQueue.add(message);  }  /**   * Receive message from queue.   */,publishMessage
1617,  private static void <extra_id_0>() {    Optional<Resource> resource = Optional.empty();    try {      resource = Optional.of(acquireResource());      utilizeResource(resource.get());    } finally {      resource.ifPresent(App::closeResource);    }  }  /*   * All we can do while failed close of a resource is to log it.   */,useOfLoggedMute
1497,  void <extra_id_0>() {    loginPage.navigateToPage();  }  @Test,setUp
1502,"  public AlbumPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      LOGGER.error(""An error occurred on navigateToPage."", e);    }    return this;  }  /**   * {@inheritDoc}   */  @Override",navigateToPage
2763,  public void <extra_id_0>(int eventId) throws EventDoesNotExistException {    if (!eventPool.containsKey(eventId)) {      throw new EventDoesNotExistException(eventId + DOES_NOT_EXIST);    }    if (eventId == currentlyRunningSyncEvent) {      currentlyRunningSyncEvent = -1;    }    eventPool.get(eventId).stop();    eventPool.remove(eventId);  }  /**   * Get status of a running event.   *   * @param eventId The event to inquire status of.   * @throws EventDoesNotExistException If event does not exist in our eventPool.   */,cancel
2415,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""The alchemist begins his work."");    var coin1 = CoinFactory.getCoin(CoinType.COPPER);    var coin2 = CoinFactory.getCoin(CoinType.GOLD);    LOGGER.info(coin1.getDescription());    LOGGER.info(coin2.getDescription());  }",main
2096,"  void <extra_id_0>() throws CakeBakingException {    final var initialCakes = cakeBakingService.getAllCakes();    assertNotNull(initialCakes);    assertTrue(initialCakes.isEmpty());    final var topping1 = new CakeToppingInfo(""Topping1"", 1000);    final var topping2 = new CakeToppingInfo(""Topping2"", 2000);    cakeBakingService.saveNewTopping(topping1);    cakeBakingService.saveNewTopping(topping2);    final var layer1 = new CakeLayerInfo(""Layer1"", 1000);    final var layer2 = new CakeLayerInfo(""Layer2"", 2000);    cakeBakingService.saveNewLayer(layer1);    cakeBakingService.saveNewLayer(layer2);    cakeBakingService.bakeNewCake(new CakeInfo(topping1, List.of(layer1, layer2)));    assertThrows(CakeBakingException.class, () -> cakeBakingService.bakeNewCake(new CakeInfo(topping2, Collections.singletonList(layer2))));  }",testBakeCakesUsedLayer
2456,  void <extra_id_0>() {    final var integers = Collections.<Integer>emptyList();    final var last = createFluentIterable(integers).last();    assertNotNull(last);    assertFalse(last.isPresent());  }  @Test,testLastEmptyCollection
162,  void <extra_id_0>() throws Exception {    hotel.bookRoom(1);    assertTrue(dao.getById(1).get().isBooked());    hotel.cancelRoomBooking(1);    assertFalse(dao.getById(1).get().isBooked());  }  @Test,cancelRoomBookingShouldChangeBookedStatus
170,  private int <extra_id_0>() {    return 999;  },getNonExistingRoomId
2619,  public void <extra_id_0>(String request) {    var command = getCommand(request);    command.process();  },handleRequest
3723,  public UserAccount <extra_id_0>(final UserAccount userAccount) {    return updateDb(userAccount);  },upsertDb
1344,"  public static void <extra_id_0>(String[] args) {    var queue = new ItemQueue();    var executorService = Executors.newFixedThreadPool(5);    for (var i = 0; i < 2; i++) {      final var producer = new Producer(""Producer_"" + i, queue);      executorService.submit(() -> {        while (true) {          producer.produce();        }      });    }    for (var i = 0; i < 3; i++) {      final var consumer = new Consumer(""Consumer_"" + i, queue);      executorService.submit(() -> {        while (true) {          consumer.consume();        }      });    }    executorService.shutdown();    try {      executorService.awaitTermination(10, TimeUnit.SECONDS);      executorService.shutdownNow();    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"");    }  }",main
3459,  List<String> <extra_id_0>(String text);  /**   * Simple implementation of function {@link #find(String)}.   * @param word for searching   * @return this   */,find
2151,    public void <extra_id_0>(Long result) {      // Handle the result of computation      LOGGER.info(result.toString());    }    @Override,onPostCall
110,"  int <extra_id_0>(Cell c, CellPool pool, Cell[][] cellMatrix) {    if (this.candy.getType().equals(Type.REWARD_FRUIT) || c.candy.getType()        .equals(Type.REWARD_FRUIT)) {      return 0;    } else {      if (this.candy.name.equals(c.candy.name)) {        var pointsWon = this.candy.getPoints() + c.candy.getPoints();        handleCrush(c, pool, cellMatrix);        return pointsWon;      } else {        return 0;      }    }  }",interact
2993,  public void <extra_id_0>(String message) {    printer.print(message);  },print
544,  public Set<Spell> <extra_id_0>() {    return spells;  },getSpells
3339,    public void <extra_id_0>() {        //creates player & npc objects for testing        //note that velocity and coordinates are initialised to 0 in GameObject.java        playerTest = GameObject.createPlayer();        npcTest = GameObject.createNpc();    }    /**     * Tests the create methods - createPlayer() and createNPC().     */    @Test,initEach
93,  void <extra_id_0>();,commit
2629,  public boolean <extra_id_0>() {    return true;  },isEnhanced
1742,  void <extra_id_0>() {    viewModel.handleAction(new DivisionCalculatorAction());  }  /**   * Handle setting new variable action.   *   * @param value -> new calculator variable.   */,divide
1110,"  void <extra_id_0>() {    var queueManager = new QueueManager(2);    var testMessage1 = new Message(""Test Message 1"", 1);    queueManager.publishMessage(testMessage1);    var testMessage2 = new Message(""Test Message 2"", 2);    queueManager.publishMessage(testMessage2);    var recivedMessage = queueManager.receiveMessage();    assertEquals(testMessage2, recivedMessage);  }",receiveMessage
2810,  public void <extra_id_0>(GameObject gameObject) {    gameObject.collisionResolve(this);  }  @Override,collision
798,"  void <extra_id_0>() {    var productCost = 50.0;    var tax = 10.0;    TaxCalculator taxCalculatorMock = mock(TaxCalculator.class);    doReturn(tax).when(taxCalculatorMock).calculate(productCost);    target = new InvoiceGenerator(productCost, taxCalculatorMock);    Assertions.assertEquals(target.getAmountWithTax(), productCost + tax);    verify(taxCalculatorMock, times(1)).calculate(productCost);  }",testGenerateTax
2744,"  public void <extra_id_0>(Event e) {    LOGGER.info(""Received event from the King's Hand: {}"", e.toString());  }",onEvent
227,  public abstract void <extra_id_0>();,update
182,  Boolean <extra_id_0>(Room room) throws Exception;,delete
500,"  void <extra_id_0>() {    var data = new Data(1, ""test"", Data.DataType.TYPE_1);    hashShardManager.storeData(data);    assertEquals(data, hashShardManager.getShardById(1).getDataById(1));  }",testStoreData
202,  public String <extra_id_0>() {    return title;  },getTitle
3374,  public static void <extra_id_0>(String[] args) throws Exception {    var apfc = new AppPaymentFailCases();    //apfc.paymentNotPossibleCase();    //apfc.paymentDatabaseUnavailableCase();    apfc.paymentSuccessCase();  },main
3059,"  public static void <extra_id_0>( String sql, DataSource dataSource) throws SQLException {    try (var connection = dataSource.getConnection();        var statement = connection.createStatement()) {      statement.executeUpdate(sql);    }  }",executeSQL
1786,"  void <extra_id_0>() {    Assertions.assertEquals(""Elf test"", elf.getName());    Assertions.assertEquals(CreatureType.ELF, elf.getType());    Assertions.assertThrows(NullPointerException.class, () -> new Elf(null));    Assertions.assertThrows(NullPointerException.class, () -> elf.acquire(null));    Assertions.assertThrows(NullPointerException.class, () -> elf.attack(null));    Assertions.assertThrows(IllegalArgumentException.class, () -> elf.hit(-10));  }  @Test",baseTest
706,"  public void <extra_id_0>() {    LOGGER.info(String.format(""Receipt: %s paid"", price));  }",show
2793,  String <extra_id_0>() throws SQLException;  ,getSchema
1635,"  void <extra_id_0>() {    assumeTrue(bank.getAccounts() != null);    assertEquals(ACCOUNT_NUM, bank.getAccounts().length);  }  @Test",LengthOfAccountsHaveToEqualsToAccountNumConstant
1007,"  public <T extends CustomerRole> Optional<T> <extra_id_0>() {    var typeCst = this.typeCst;    try {      return (Optional<T>) Optional.of(typeCst.getDeclaredConstructor().newInstance());    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {      logger.error(""error creating an object"", e);    }    return Optional.empty();  }",instance
324,    ClassStep <extra_id_0>(String name);  }  /**   * This step is in charge of setting the Character class (fighter or wizard). Fighter choice :   * Next Step available : WeaponStep Wizard choice : Next Step available : SpellStep   */,name
2065,"  private void <extra_id_0>(      Map<String, String> collectorDetails,      List<MemoryPoolMXBean> memoryPoolMxBeans,      List<String> memoryPoolNamesList) {    for (MemoryPoolMXBean memoryPoolmxbean : memoryPoolMxBeans) {      if (memoryPoolNamesList.contains(memoryPoolmxbean.getName())) {        double memoryUsage =            memoryPoolmxbean.getUsage().getUsed() / (double) memoryPoolmxbean.getUsage().getMax();        if (memoryUsage > memoryUsageThreshold) {          collectorDetails.put(              ""warning"",              String.format(                  ""Memory pool '%s' usage is high (%2f%%)"",                  memoryPoolmxbean.getName(), memoryUsage));        }        collectorDetails.put(            ""memoryPools"", String.format(""%s: %s%%"", memoryPoolmxbean.getName(), memoryUsage));      }    }  }  /**   * Retrieves the list of garbage collector MXBeans using ManagementFactory.   *   * @return a list of {@link GarbageCollectorMXBean} objects representing the garbage collectors   */",addMemoryPoolDetails
1216,      public void <extra_id_0>(final MouseEvent e) {        model.setSelectedAlbumNumber(albumList.getSelectedIndex() + 1);        loadFromMod();      }    });,mouseClicked
3776,"  private long <extra_id_0>(int value) {    var retries = 0;    var result = FAILURE.getRemoteServiceStatusValue();    for (int i = 0; i < RETRIES; i++) {      if (retries >= RETRIES) {        return FAILURE.getRemoteServiceStatusValue();      }      if ((result = checkLatency(value)) == FAILURE.getRemoteServiceStatusValue()) {        LOGGER.info(""Failed to reach remote: ({})"", i + 1);        retries++;        try {          sleep(DELAY_MS);        } catch (InterruptedException e) {          LOGGER.error(""Thread sleep state interrupted"", e);          Thread.currentThread().interrupt();        }      } else {        break;      }    }    return result;  }",safeCall
3419,"    private Commander <extra_id_0>(boolean nonPaymentException) {        PaymentService paymentService = new PaymentService                (new PaymentDatabase(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException());        ShippingService shippingService;        MessagingService messagingService;        if (nonPaymentException) {            shippingService = new ShippingService(new ShippingDatabase(), new DatabaseUnavailableException());            messagingService = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());        } else {            shippingService = new ShippingService(new ShippingDatabase(), new DatabaseUnavailableException());            messagingService = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());        }        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObject
1083,  boolean <extra_id_0>() {    return forward;  },isForward
1909,"  void <extra_id_0>() {    try {      var instance1 = new RingInstance(null, 1, 1);      var instance2 = new RingInstance(null, 1, 2);      var instance3 = new RingInstance(null, 1, 3);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3);      var messageManager = new RingMessageManager(instanceMap);      var messageContent = ""2"";      messageManager.sendElectionMessage(2, messageContent);      var ringMessage = new Message(MessageType.ELECTION, messageContent);      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var ringMessageSent = ((Queue<Message>) messageQueueField.get(instance3)).poll();      assertEquals(ringMessageSent.getType(), ringMessage.getType());      assertEquals(ringMessageSent.getContent(), ringMessage.getContent());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Error to access private field."");    }  }  @Test",testSendElectionMessage
579,  public static void <extra_id_0>() {    getSessionFactory().close();    sessionFactory = null;  },dropSession
1719,"  void <extra_id_0>() {    final var fileLoader = new FileLoader();    fileLoader.setFileName(""non-existing-file"");    assertNull(fileLoader.loadData());  }",testLoadData
59,"  public void <extra_id_0>(Commander commander) {    LOGGER.info(""Good to see you {}"", commander);  }",visit
3279,  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);  }  @Test,setUp
582,"  public static void <extra_id_0>() {    var wizardDao = new WizardDaoImpl();    var spellbookDao = new SpellbookDaoImpl();    var spellDao = new SpellDaoImpl();    var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    LOGGER.info(""Enumerating all wizards"");    service.findAllWizards().stream().map(Wizard::getName).forEach(LOGGER::info);    LOGGER.info(""Enumerating all spellbooks"");    service.findAllSpellbooks().stream().map(Spellbook::getName).forEach(LOGGER::info);    LOGGER.info(""Enumerating all spells"");    service.findAllSpells().stream().map(Spell::getName).forEach(LOGGER::info);    LOGGER.info(""Find wizards with spellbook 'Book of Idores'"");    var wizardsWithSpellbook = service.findWizardsWithSpellbook(BOOK_OF_IDORES);    wizardsWithSpellbook.forEach(w -> LOGGER.info(""{} has 'Book of Idores'"", w.getName()));    LOGGER.info(""Find wizards with spell 'Fireball'"");    var wizardsWithSpell = service.findWizardsWithSpell(""Fireball"");    wizardsWithSpell.forEach(w -> LOGGER.info(""{} has 'Fireball'"", w.getName()));  }",queryData
2229,  public void <extra_id_0>() {    status = GameStatus.RUNNING;    Thread gameThread = new Thread(this::processGameLoop);    gameThread.start();  }  /**   * Stop game loop.   */,run
3175,"  void <extra_id_0>() {    assertEquals(String.format(""Customer(id=%s, firstName=%s, lastName=%s)"",        customer.getId(), customer.getFirstName(), customer.getLastName()), customer.toString());  }",testToString
2701,"  private static void <extra_id_0>(      Collection<DwarvenMineWorker> workers,      DwarvenMineWorker.Action... actions  ) {    workers.forEach(worker -> worker.action(actions));  }",makeActions
2343,"  void <extra_id_0>() {    injector.injectMembers(this);    // add funds to the test player's bank account    wireTransfers.setFunds(""123-12312"", 100);  }  @Test",setup
3490,  public void <extra_id_0>() {    var oldSize = getSize() == Size.NORMAL ? Size.SMALL : Size.NORMAL;    setSize(oldSize);  }  /**   * Changes the visibility of the target.   */,changeSize
2099,"  void <extra_id_0>() {    final var cake = new Cake();    assertNotNull(cake.getLayers());    assertTrue(cake.getLayers().isEmpty());    final var expectedLayers = Set.of(        new CakeLayer(""layer1"", 1000),        new CakeLayer(""layer2"", 2000),        new CakeLayer(""layer3"", 3000));    cake.setLayers(expectedLayers);    assertEquals(expectedLayers, cake.getLayers());  }  @Test",testSetLayers
2678,"  public void <extra_id_0>(AudioInputStream stream, float volume) {    init();    // Walk the pending requests.    for (var i = headIndex; i != tailIndex; i = (i + 1) % MAX_PENDING) {      var playMessage = getPendingAudio()[i];      if (playMessage.getStream() == stream) {        // Use the larger of the two volumes.        playMessage.setVolume(Math.max(volume, playMessage.getVolume()));        // Don't need to enqueue.        return;      }    }    getPendingAudio()[tailIndex] = new PlayMessage(stream, volume);    tailIndex = (tailIndex + 1) % MAX_PENDING;  }  /**   * This method uses the Update Method pattern. It takes the audio from the queue and plays it   */",playSound
3007,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2487,  public static <E> List<E> <extra_id_0>(Iterator<E> iterator) {    var copy = new ArrayList<E>();    iterator.forEachRemaining(copy::add);    return copy;  },toList
1756,  public boolean <extra_id_0>() {    return this.locker != null;  }  @Override,isLocked
465,"  void <extra_id_0>(){      // Serializing Country      try {          Country country = new Country(                  86,                  ""China"",                  ""Asia"",                  ""Chinese"");          ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(""output.txt""));          objectOutputStream.writeObject(country);          objectOutputStream.close();      } catch (IOException e) {          e.printStackTrace();      }      // De-serialize Country      try {          ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(""output.txt""));          Country country = (Country) objectInputStream.readObject();          objectInputStream.close();          System.out.println(country);          Country China = new Country(                  86,                  ""China"",                  ""Asia"",                  ""Chinese"");          assertEquals(China, country);      } catch (Exception e) {          e.printStackTrace();      }  }",testSerializable
358,"  public static void <extra_id_0>(String[] args) {    // GoF Strategy pattern    LOGGER.info(GREEN_DRAGON_SPOTTED);    var dragonSlayer = new DragonSlayer(new MeleeStrategy());    dragonSlayer.goToBattle();    LOGGER.info(RED_DRAGON_EMERGES);    dragonSlayer.changeStrategy(new ProjectileStrategy());    dragonSlayer.goToBattle();    LOGGER.info(BLACK_DRAGON_LANDS);    dragonSlayer.changeStrategy(new SpellStrategy());    dragonSlayer.goToBattle();    // Java 8 functional implementation Strategy pattern    LOGGER.info(GREEN_DRAGON_SPOTTED);    dragonSlayer = new DragonSlayer(        () -> LOGGER.info(""With your Excalibur you severe the dragon's head!""));    dragonSlayer.goToBattle();    LOGGER.info(RED_DRAGON_EMERGES);    dragonSlayer.changeStrategy(() -> LOGGER.info(        ""You shoot the dragon with the magical crossbow and it falls dead on the ground!""));    dragonSlayer.goToBattle();    LOGGER.info(BLACK_DRAGON_LANDS);    dragonSlayer.changeStrategy(() -> LOGGER.info(        ""You cast the spell of disintegration and the dragon vaporizes in a pile of dust!""));    dragonSlayer.goToBattle();    // Java 8 lambda implementation with enum Strategy pattern    LOGGER.info(GREEN_DRAGON_SPOTTED);    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.MeleeStrategy);    dragonSlayer.goToBattle();    LOGGER.info(RED_DRAGON_EMERGES);    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.ProjectileStrategy);    dragonSlayer.goToBattle();    LOGGER.info(BLACK_DRAGON_LANDS);    dragonSlayer.changeStrategy(LambdaStrategy.Strategy.SpellStrategy);    dragonSlayer.goToBattle();  }",main
442,"  public int <extra_id_0>(final String username, final String password)          throws SQLException {    var sql = ""select count(*) from USERS where username=? and password=?"";    ResultSet resultSet = null;    try (var connection = dataSource.getConnection();         var preparedStatement =                 connection.prepareStatement(sql)    ) {      var result = 0;      preparedStatement.setString(1, username);      preparedStatement.setString(2, password);      resultSet = preparedStatement.executeQuery();      while (resultSet.next()) {        result = resultSet.getInt(1);      }      if (result == 1) {        LOGGER.info(""Login successfully!"");      } else {        LOGGER.info(""Fail to login!"");      }      return result;    } finally {      if (resultSet != null) {        resultSet.close();      }    }  }  /**   * Register a new user.   *   * @param user a user instance   * @return the execution result of the method   * @throws SQLException if any error   */",login
1982,"  void <extra_id_0>(Filter filter) {    assertNull(filter.getNext());    assertSame(filter, filter.getLast());  }",testNext
2296,  void <extra_id_0>(PlayerDetails details);  /**   * error submitting lottery ticket.   */,ticketSubmitted
2870,"  void <extra_id_0>() {    final var unit = new CommanderUnit(""CommanderUnitName"");    assertNull(unit.getUnitExtension(""SoldierExtension""));    assertNull(unit.getUnitExtension(""SergeantExtension""));    assertNotNull(unit.getUnitExtension(""CommanderExtension""));  }",getUnitExtension
3822,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
222,"  void <extra_id_0>() {    var entity = new Skeleton(1);    world.addEntity(entity);    assertEquals(entity, world.entities.get(0));  }",testAddEntity
1001,  public static Customer <extra_id_0>(Role... role) {    var customer = newCustomer();    Arrays.stream(role).forEach(customer::addRole);    return customer;  },newCustomer
716,    public Double <extra_id_0>() {      return amount;    }  }  /**   * Product info.   */,getAmount
1428,"  public String <extra_id_0>(String type, String sortBy) {    return getQuerySummary(type, sortBy, SortOrder.ASC);  }",search
417,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(UserTableModule.DELETE_SCHEMA_SQL);      statement.execute(UserTableModule.CREATE_SCHEMA_SQL);    }  }  @AfterEach,setUp
2818,"  public void <extra_id_0>(SpaceStationMir mir) {    LOGGER.info(AppConstants.HITS, mir.getClass().getSimpleName(), this.getClass().getSimpleName());  }  @Override",collisionResolve
3517,  String <extra_id_0>();,name
1405,"  void <extra_id_0>() {    final var observer = mock(Race.class);    final var weather = new GenWeather();    weather.addObserver(observer);    final var inOrder = inOrder(observer);    final var weatherTypes = WeatherType.values();    for (var i = 1; i < 20; i++) {      weather.timePasses();      inOrder.verify(observer).update(weather, weatherTypes[i % weatherTypes.length]);    }    verifyNoMoreInteractions(observer);  }",testTimePasses
2500,      public Iterator<E> <extra_id_0>() {        return new DecoratingIterator<>(iterable.iterator()) {          private int stopIndex;          private int totalElementsCount;          private List<E> list;          private int currentIndex;          @Override          public E computeNext() {            initialize();            while (currentIndex < stopIndex && fromIterator.hasNext()) {              currentIndex++;              fromIterator.next();            }            if (currentIndex >= stopIndex && fromIterator.hasNext()) {              return fromIterator.next();            }            return null;          }          private void initialize() {            if (list == null) {              list = new ArrayList<>();              iterable.forEach(list::add);              totalElementsCount = list.size();              stopIndex = totalElementsCount - count;            }          }        };      }    };  }  /**   * Transforms this FluentIterable into a new one containing objects of the type T.   *   * @param function a function that transforms an instance of E into an instance of T   * @param <T>      the target type of the transformation   * @return a new FluentIterable of the new type   */  @Override,iterator
2074,"  private boolean <extra_id_0>() throws InterruptedException {    boolean isTerminationIncomplete = !healthCheckExecutor.awaitTermination(5, TimeUnit.SECONDS);    LOGGER.info(""Termination status: {}"", isTerminationIncomplete);    // Await termination and return true if termination is incomplete (timeout elapsed)    return isTerminationIncomplete;  }  /** Shuts down the executor service, allowing in-flight tasks to complete. */  @PreDestroy",awaitTerminationWithTimeout
2425,  public void <extra_id_0>(Store store) {    var menuStore = (MenuStore) store;    selected = menuStore.getSelected();    render();  }  @Override,storeChanged
844,"  public void <extra_id_0>(AbstractNioChannel channel, Object readObject, SelectionKey key) {    executorService.execute(() -> channel.getHandler().handleChannelRead(channel, readObject, key));  }  /**   * Stops the pool of workers.   *   * @throws InterruptedException if interrupted while stopping pool of workers.   */  @Override",onChannelReadEvent
423,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
949,"  public void <extra_id_0>() {    try {      while (!Thread.currentThread().isInterrupted()) {        var msg = msgQueue.retrieveMsg();        if (null != msg) {          LOGGER.info(msg.toString() + "" is served."");        } else {          LOGGER.info(""Service Executor: Waiting for Messages to serve .. "");        }        Thread.sleep(1000);      }    } catch (Exception e) {      LOGGER.error(e.getMessage());    }  }",run
1442,    public Builder <extra_id_0>(String sortBy) {      this.sortBy = sortBy;      return this;    },sortBy
2524,"  public static void <extra_id_0>(String[] args) {    Blacksmith blacksmith = new OrcBlacksmith();    Weapon weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);    LOGGER.info(MANUFACTURED, blacksmith, weapon);    weapon = blacksmith.manufactureWeapon(WeaponType.AXE);    LOGGER.info(MANUFACTURED, blacksmith, weapon);    blacksmith = new ElfBlacksmith();    weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);    LOGGER.info(MANUFACTURED, blacksmith, weapon);    weapon = blacksmith.manufactureWeapon(WeaponType.AXE);    LOGGER.info(MANUFACTURED, blacksmith, weapon);  }",main
2564,  public Long <extra_id_0>(final Long num) {    return sumOfSquaredNumbers.addAndGet(num);  },add
2378,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    // Test if IdNotFoundException is thrown where expected.    Assertions.assertThrows(IdNotFoundException.class,()->db.find(3));  }  @Test",findNotInDb
960,  void <extra_id_0>() {    assertNotNull(dataSource);  }  /**   * Test for correct query execution   */  @Test  @Transactional,testDataSource
1631,"  void <extra_id_0>() {    var bank = new Bank(4, 1000);    var latch = new CountDownLatch(1);    assertDoesNotThrow(() -> Main.runner(bank, latch));    assertEquals(0, latch.getCount());  }",runnerShouldExecuteWithoutException
3270,"  void <extra_id_0>(String oldTitle, String newTitle);",bookTitleUpdated
1595,  public final void <extra_id_0>(Server server) {    synchronized (SERVERS) {      SERVERS.add(server);    }  },addServer
1599,"  void <extra_id_0>() {    bvm = new BookViewModel();    testBook = new Book(""Head First Design Patterns: A Brain-Friendly Guide"",    		""Eric Freeman, Bert Bates, Kathy Sierra, Elisabeth Robson"",    		""Head First Design Patterns Description"");    testBookList = bvm.getBookList();    testBookTwo = new Book(""Head First Design Patterns: A Brain-Friendly Guide"",	  		""Eric Freeman, Bert Bates, Kathy Sierra, Elisabeth Robson"",	  		""Head First Design Patterns Description"");    testBookThree = new Book(""Design Patterns: Elements of Reusable Object-Oriented Software"",            ""Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides"",            ""Design Patterns Description"");  }  @Test",setUp
1902,"  public static void <extra_id_0>(String[] args) {    // Simple lazy loader - not thread safe    var holderNaive = new HolderNaive();    var heavy = holderNaive.getHeavy();    LOGGER.info(""heavy={}"", heavy);    // Thread safe lazy loader, but with heavy synchronization on each access    var holderThreadSafe = new HolderThreadSafe();    var another = holderThreadSafe.getHeavy();    LOGGER.info(""another={}"", another);    // The most efficient lazy loader utilizing Java 8 features    var java8Holder = new Java8Holder();    var next = java8Holder.getHeavy();    LOGGER.info(""next={}"", next);  }",main
3129,  public void <extra_id_0>(String accountService) {    context.setAccountService(accountService);  },addAccountInfo
2308,"  private void <extra_id_0>() {    numbers.clear();    var generator = new RandomNumberGenerator(MIN_NUMBER, MAX_NUMBER);    while (numbers.size() < NUM_NUMBERS) {      var num = generator.nextInt();      numbers.add(num);    }  }  /**   * Helper class for generating random numbers.   */",generateRandomNumbers
1623,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
533,  public void <extra_id_0>(E entity) {    Transaction tx = null;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      session.persist(entity);      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }  }  @Override,persist
2595,"  void <extra_id_0>() {    //given    var rootkit = new SimpleThreat(ThreatType.ROOTKIT, 1, ""Simple-Rootkit"");    var trojan = new SimpleThreat(ThreatType.TROJAN, 2, ""Simple-Trojan"");    List<Threat> threats = List.of(rootkit, trojan);    var threatAwareSystem = new SimpleThreatAwareSystem(""System-1"", threats);    //when    var rootkitThreatAwareSystem = threatAwareSystem.filtered()        .by(threat -> threat.type() == ThreatType.ROOTKIT);    //then    assertEquals(rootkitThreatAwareSystem.threats().size(), 1);    assertEquals(rootkitThreatAwareSystem.threats().get(0), rootkit);  }",shouldFilterByThreatType
2787,"  void <extra_id_0>(){    assertThrows(LongRunningEventException.class, () -> {      var eventManager = new EventManager();      eventManager.createAsync(2000);    });  }  @Test",testLongRunningEventException
3626,"  public <T> AsyncResult<T> <extra_id_0>(Callable<T> task) {    return startProcess(task, null);  }  @Override",startProcess
2923,  void <extra_id_0>();,update
770,  public void <extra_id_0>() {    isHungry = false;  }  @Override,getFed
1118,  public boolean <extra_id_0>() {    return size == 0;  },isEmpty
3138,"  public boolean <extra_id_0>(Customer customer) throws Exception {    try (var connection = getConnection();         var statement =             connection                 .prepareStatement(""UPDATE CUSTOMERS SET FNAME = ?, LNAME = ? WHERE ID = ?"")) {      statement.setString(1, customer.getFirstName());      statement.setString(2, customer.getLastName());      statement.setInt(3, customer.getId());      return statement.executeUpdate() > 0;    } catch (SQLException ex) {      throw new CustomException(ex.getMessage(), ex);    }  }  /**   * {@inheritDoc}   */  @Override",update
2945,"      public Create <extra_id_0>(String supplier) {        this.supplier = supplier;        return this;      }    }  }  /**   * This is Response class which consist of any response DTO's   * you might want to provide to your clients.   */  public enum Response {    ;    /**     * This is Public dto class for API response with the lowest data security.     */    public static final class Public implements Id, Name, Price {      private Long id;      private String name;      private Double price;      @Override      public Long getId() {        return id;      }      public Public setId(Long id) {        this.id = id;        return this;      }      @Override      public String getName() {        return name;      }      public Public setName(String name) {        this.name = name;        return this;      }      @Override      public Double getPrice() {        return price;      }      public Public setPrice(Double price) {        this.price = price;        return this;      }      @Override      public String toString() {        return ""Public{""            + ""id=""            + id            + "", name='""            + name            + '\''            + "", price=""            + price            + '}';      }    }    /**     * This is Private dto class for API response with the highest data security.     */    public static final class Private implements Id, Name, Price, Cost {      private Long id;      private String name;      private Double price;      private Double cost;      @Override      public Long getId() {        return id;      }      public Private setId(Long id) {        this.id = id;        return this;      }      @Override      public String getName() {        return name;      }      public Private setName(String name) {        this.name = name;        return this;      }      @Override      public Double getPrice() {        return price;      }      public Private setPrice(Double price) {        this.price = price;        return this;      }      @Override      public Double getCost() {        return cost;      }      public Private setCost(Double cost) {        this.cost = cost;        return this;      }      @Override      public String toString() {        return ""Private{""            +            ""id=""            + id            +            "", name='""            + name            + '\''            +            "", price=""            + price            +            "", cost=""            + cost            +            '}';      }    }  }  /**   * Use this interface whenever you want to provide the product Id in your DTO.   */  private interface Id {    /**     * Unique identifier of the product.     *     * @return : id of the product.     */    Long getId();  }  /**   * Use this interface whenever you want to provide the product Name in your DTO.   */  private interface Name {    /**     * The name of the product.     *     * @return : name of the product.     */    String getName();  }  /**   * Use this interface whenever you want to provide the product Price in your DTO.   */  private interface Price {    /**     * The amount we sell a product for.     * <b>This data is not confidential</b>     *     * @return : price of the product.     */    Double getPrice();  }  /**   * Use this interface whenever you want to provide the product Cost in your DTO.   */  private interface Cost {    /**     * The amount that it costs us to purchase this product     * For the amount we sell a product for, see the {@link Price Price} parameter.     * <b>This data is confidential</b>     *     * @return : cost of the product.     */    Double getCost();  }  /**   * Use this interface whenever you want to provide the product Supplier in your DTO.   */  private interface Supplier {    /**     * The name of supplier of the product or its manufacturer.     * <b>This data is highly confidential</b>     *     * @return : supplier of the product.     */    String getSupplier();  }}",setSupplier
2147,"  public void <extra_id_0>() {    service.shutdown();    try {      service.awaitTermination(10, TimeUnit.SECONDS);    } catch (InterruptedException ie) {      LOGGER.error(""Error waiting for executor service shutdown!"");    }  }",close
3791,"  void <extra_id_0>() {    beans = new HashMap<>();    var fishingBoatAdapter = spy(new FishingBoatAdapter());    beans.put(FISHING_BEAN, fishingBoatAdapter);    var captain = new Captain();    captain.setRowingBoat((FishingBoatAdapter) beans.get(FISHING_BEAN));    beans.put(ROWING_BEAN, captain);  }  /**   * This test asserts that when we use the row() method on a captain bean(client), it is internally   * calling sail method on the fishing boat object. The Adapter ({@link FishingBoatAdapter} )   * converts the interface of the target class ( {@link FishingBoat}) into a suitable one expected   * by the client ({@link Captain} ).   */  @Test",setup
2119,"    private void <extra_id_0>() {        cakeBakingService.saveNewLayer(new CakeLayerInfo(""chocolate"", 1200));        cakeBakingService.saveNewLayer(new CakeLayerInfo(""banana"", 900));        cakeBakingService.saveNewLayer(new CakeLayerInfo(STRAWBERRY, 950));        cakeBakingService.saveNewLayer(new CakeLayerInfo(""lemon"", 950));        cakeBakingService.saveNewLayer(new CakeLayerInfo(""vanilla"", 950));        cakeBakingService.saveNewLayer(new CakeLayerInfo(STRAWBERRY, 950));        cakeBakingService.saveNewTopping(new CakeToppingInfo(""candies"", 350));        cakeBakingService.saveNewTopping(new CakeToppingInfo(""cherry"", 350));        var cake1 = new CakeInfo(new CakeToppingInfo(""candies"", 0), List.of(                new CakeLayerInfo(""chocolate"", 0),                new CakeLayerInfo(""banana"", 0),                new CakeLayerInfo(STRAWBERRY, 0)));        try {            cakeBakingService.bakeNewCake(cake1);        } catch (CakeBakingException e) {            LOGGER.error(""Cake baking exception"", e);        }        var cake2 = new CakeInfo(new CakeToppingInfo(""cherry"", 0), List.of(                new CakeLayerInfo(""vanilla"", 0),                new CakeLayerInfo(""lemon"", 0),                new CakeLayerInfo(STRAWBERRY, 0)));        try {            cakeBakingService.bakeNewCake(cake2);        } catch (CakeBakingException e) {            LOGGER.error(""Cake baking exception"", e);        }    }",initializeData
1409,"  void <extra_id_0>(WeatherType weather, String response) {    final var observer = this.factory.get();    assertEquals(0, appender.getLogSize());    observer.update(null, weather);    assertEquals(response, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testObserver
2207,"  void <extra_id_0>() {    gameLoop.update(20L);    Assertions.assertEquals(0.01f, gameLoop.controller.getBulletPosition(), 0);  }",testUpdate
3387,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",queuePaymentTaskDatabaseUnavailableCase
3031,  void <extra_id_0>(Customer customer) throws SQLException;,save
1936,  protected void <extra_id_0>(Message message) {    // Not used in Bully Instance  },handleElectionMessage
2610,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
2352,  static void <extra_id_0>() throws Exception {    MongodStarter starter = MongodStarter.getDefaultInstance();    MongodConfig mongodConfig = buildMongoConfig();    mongoClient = buildMongoClient();    mongodExe = starter.prepare(mongodConfig);    mongodProcess = mongodExe.start();    mongoDatabase = mongoClient.getDatabase(TEST_DB);  }  @BeforeEach,setUp
1496,"  void <extra_id_0>() {    var albumPage = albumListPage.selectAlbum(""21"");    albumPage.navigateToPage();    assertTrue(albumPage.isAt());  }",testSelectAlbum
1102,"  private boolean <extra_id_0>(Saga saga) {    if (!saga.isPresent()) {      saga.setFinished(true);      LOGGER.info("" the saga has been finished with {} status"", saga.getResult());      return true;    }    return false;  }",isSagaFinished
2297,  void <extra_id_0>(PlayerDetails details);  /**   * lottery ticket did not win.   */,ticketSubmitError
484,"  void <extra_id_0>() throws Exception {    ThreadSafeDoubleCheckLocking.getInstance();    var constructor = ThreadSafeDoubleCheckLocking.class.getDeclaredConstructor();    constructor.setAccessible(true);    assertThrows(InvocationTargetException.class, () -> constructor.newInstance((Object[]) null));  }",testCreatingNewInstanceByRefection
910,"  void <extra_id_0>() throws Exception {    var executeService = Executors.newFixedThreadPool(2);    var lock = new ReaderWriterLock();    var reader1 = spy(new Reader(""Reader 1"", lock.readLock()));    var reader2 = spy(new Reader(""Reader 2"", lock.readLock()));    executeService.submit(reader1);    Thread.sleep(150);    executeService.submit(reader2);    executeService.shutdown();    try {      executeService.awaitTermination(10, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"", e);    }    // Read operation will hold the read lock 250 milliseconds, so here we prove that multiple reads    // can be performed in the same time.    assertTrue(appender.logContains(""Reader 1 begin""));    assertTrue(appender.logContains(""Reader 2 begin""));    assertTrue(appender.logContains(""Reader 1 finish""));    assertTrue(appender.logContains(""Reader 2 finish""));  }",testRead
3156,"  public static List<Customer> <extra_id_0>() {    final var customer1 = new Customer(1, ""Adam"", ""Adamson"");    final var customer2 = new Customer(2, ""Bob"", ""Bobson"");    final var customer3 = new Customer(3, ""Carl"", ""Carlson"");    return List.of(customer1, customer2, customer3);  }",generateSampleCustomers
2747,  public abstract void <extra_id_0>(Weekday day);,timePasses
1932,"  protected void <extra_id_0>(Message message) {    leaderId = Integer.valueOf(message.getContent());    LOGGER.info(INSTANCE + localId + "" - Leader update done."");  }",handleLeaderMessage
2278,"  public static void <extra_id_0>(String[] args) {    MongoConnectionPropertiesLoader.load();    var injector = Guice.createInjector(new LotteryModule());    var administration = injector.getInstance(LotteryAdministration.class);    var service = injector.getInstance(LotteryService.class);    SampleData.submitTickets(service, 20);    var consoleAdministration = new ConsoleAdministrationSrvImpl(administration, LOGGER);    try (var scanner = new Scanner(System.in)) {      var exit = false;      while (!exit) {        printMainMenu();        var cmd = readString(scanner);        if (""1"".equals(cmd)) {          consoleAdministration.getAllSubmittedTickets();        } else if (""2"".equals(cmd)) {          consoleAdministration.performLottery();        } else if (""3"".equals(cmd)) {          consoleAdministration.resetLottery();        } else if (""4"".equals(cmd)) {          exit = true;        } else {          LOGGER.info(""Unknown command: {}"", cmd);        }      }    }  }",main
2112,    public void <extra_id_0>(CakeTopping topping) {        this.topping = topping;    },setTopping
1809,  Master <extra_id_0>(int numOfWorkers) {    return new ArrayTransposeMaster(numOfWorkers);  },setMaster
2062,"  void <extra_id_0>() {    // Arrange    CompletableFuture<Health> future = new CompletableFuture<>();    future.completeExceptionally(        new ExecutionException(new RuntimeException(""Service unavailable"")));    when(asynchronousHealthChecker.performCheck(any(Supplier.class), anyLong())).thenReturn(future);    // Act    Health health = memoryHealthIndicator.health();    // Assert    assertEquals(Status.DOWN, health.getStatus());    assertTrue(health.getDetails().get(""error"").toString().contains(""Service unavailable""));  }",whenHealthCheckExecutionFails_thenHealthIsDown
2449,  void <extra_id_0>() {    for (final var content : Content.values()) {      final var toString = content.toString();      assertNotNull(toString);      assertFalse(toString.trim().isEmpty());    }  },testToString
2002,  Filter <extra_id_0>();,getLast
2961,"      public String <extra_id_0>() {        return ""Private{""            +            ""id=""            + id            +            "", name='""            + name            + '\''            +            "", price=""            + price            +            "", cost=""            + cost            +            '}';      }    }  }  /**   * Use this interface whenever you want to provide the product Id in your DTO.   */  private interface Id {    /**     * Unique identifier of the product.     *     * @return : id of the product.     */    Long getId();  }  /**   * Use this interface whenever you want to provide the product Name in your DTO.   */  private interface Name {    /**     * The name of the product.     *     * @return : name of the product.     */    String getName();  }  /**   * Use this interface whenever you want to provide the product Price in your DTO.   */  private interface Price {    /**     * The amount we sell a product for.     * <b>This data is not confidential</b>     *     * @return : price of the product.     */    Double getPrice();  }  /**   * Use this interface whenever you want to provide the product Cost in your DTO.   */  private interface Cost {    /**     * The amount that it costs us to purchase this product     * For the amount we sell a product for, see the {@link Price Price} parameter.     * <b>This data is confidential</b>     *     * @return : cost of the product.     */    Double getCost();  }  /**   * Use this interface whenever you want to provide the product Supplier in your DTO.   */  private interface Supplier {    /**     * The name of supplier of the product or its manufacturer.     * <b>This data is highly confidential</b>     *     * @return : supplier of the product.     */    String getSupplier();  }}",toString
796,"  void <extra_id_0>() {    target = new ForeignTaxCalculator();    var tax = target.calculate(100.0);    Assertions.assertEquals(tax, 60.0);  }",testTaxCalculation
1509,"  public AlbumListPage <extra_id_0>() {    var cancelButton = (HtmlSubmitInput) page.getElementById(""cancelButton"");    try {      cancelButton.click();    } catch (IOException e) {      LOGGER.error(""An error occurred on cancelChanges."", e);    }    return new AlbumListPage(webClient);  }  /**   * Saves changes made by clicking the save button.   *   * @return {@link AlbumPage}   */",cancelChanges
2373,  void <extra_id_0>(Person person);,update
3397,  public Order <extra_id_0>(String orderId) throws DatabaseUnavailableException {    return data.get(orderId);  },get
3023,"  void <extra_id_0>() {    try {      var scene = new Scene();      var field1 = Scene.class.getDeclaredField(""current"");      var field2 = Scene.class.getDeclaredField(""next"");      field1.setAccessible(true);      field1.set(scene, 0);      field2.setAccessible(true);      field2.set(scene, 1);      scene.draw(new ArrayList<>());      assertEquals(1, field1.get(scene));      assertEquals(0, field2.get(scene));    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to access private field"");    }  }",testDraw
2614,  public void <extra_id_0>() {    new ArcherView().display();  },process
2862,"  void <extra_id_0>() {    testCollision(        new SpaceStationMir(1, 1, 3, 4),        true, false,        false, false    );  }",testCollideSpaceStationMir
1369,    public boolean <extra_id_0>(String message) {      return log.stream().map(ILoggingEvent::getMessage).anyMatch(message::equals);    },logContains
2371,  Person <extra_id_0>(int personNationalId);,find
744,"  static void <extra_id_0>(      int height, int width, int numOfMovements, Map<Integer, Bubble> bubbles) {    //creating quadtree    var rect = new Rect(width / 2D, height / 2D, width, height);    var quadTree = new QuadTree(rect, 4);    //will run numOfMovement times or till all bubbles have popped    while (numOfMovements > 0 && !bubbles.isEmpty()) {      //quadtree updated each time      bubbles.values().forEach(quadTree::insert);      bubbles.forEach((i, bubble) -> {        //bubble moves, new position gets updated, quadtree used to reduce computations        bubble.move();        bubbles.replace(i, bubble);        var sp = new SpatialPartitionBubbles(bubbles, quadTree);        sp.handleCollisionsUsingQt(bubble);      });      numOfMovements--;    }    //bubbles not popped    bubbles.keySet().forEach(key -> LOGGER.info(""Bubble {} not popped"", key));  }  /**   * Program entry point.   *   * @param args command line args   */",withSpatialPartition
2053,"  void <extra_id_0>()      throws ExecutionException, InterruptedException {    // Arrange    Supplier<Health> healthSupplier = () -> Health.up().build();    // Act    CompletableFuture<Health> healthFuture = healthChecker.performCheck(healthSupplier, 4);    // Assert    assertEquals(Status.UP, healthFuture.get().getStatus());  }  /**   * Tests that the {@link performCheck()} method rejects new tasks after the {@link shutdown()}   * method is called.   *   * <p>Given the {@link AsynchronousHealthChecker} instance is shut down, the test verifies that   * the {@link performCheck()} method throws a {@link RejectedExecutionException} when attempting   * to submit a new health check task.   */  @Test",whenHealthCheckIsSuccessful_ReturnsHealthy
3121,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[] {}));  },shouldExecuteWithoutException
1068,  private static ServiceDiscoveryService <extra_id_0>() {    var sd = new ServiceDiscoveryService();    return sd        .discover(new OrderService(sd))        .discover(new FlyBookingService(sd))        .discover(new HotelBookingService(sd))        .discover(new WithdrawMoneyService(sd));  },serviceDiscovery
3798,  public static void <extra_id_0>(final String[] args) {    // The captain can only operate rowing boats but with adapter he is able to    // use fishing boats as well    var captain = new Captain(new FishingBoatAdapter());    captain.row();  },main
2427,  public void <extra_id_0>(MenuItem item) {    Dispatcher.getInstance().menuItemSelected(item);  },itemClicked
2794,  boolean <extra_id_0>(Order order) throws SQLException;  ,insertOrder
3484,  public void <extra_id_0>() {    if (!undoStack.isEmpty()) {      var previousSpell = undoStack.pollLast();      redoStack.offerLast(previousSpell);      previousSpell.run();    }  }  /**   * Redo last spell.   */,undoLastSpell
1555,"  void <extra_id_0>() throws Exception {    var fields = new String[]{""id"", ""title"", ""length""};    var expectedDetails = ""{\""id\"": 1,\""title\"": \""Avatar\"",\""length\"": 178}"";    Mockito.when(fieldJsonMapper.toJson(any(Video.class), eq(fields))).thenReturn(expectedDetails);    var actualFieldsDetails = resource.getDetails(2, fields);    Assertions.assertEquals(expectedDetails, actualFieldsDetails);  }",shouldGiveSpecifiedFieldsInformationOfVideo
1621,"      public void <extra_id_0>() throws IOException {        throw new IOException(""Error in closing resource: "" + this);      }    };  }}",close
1930,"  protected void <extra_id_0>() {    try {      boolean isLeaderAlive = messageManager.sendHeartbeatMessage(leaderId);      if (isLeaderAlive) {        LOGGER.info(INSTANCE + localId + ""- Leader is alive."");        Thread.sleep(HEARTBEAT_INTERVAL);        messageManager.sendHeartbeatInvokeMessage(localId);      } else {        LOGGER.info(INSTANCE + localId + ""- Leader is not alive. Start election."");        boolean electionResult =            messageManager.sendElectionMessage(localId, String.valueOf(localId));        if (electionResult) {          LOGGER.info(INSTANCE + localId + ""- Succeed in election. Start leader notification."");          messageManager.sendLeaderMessage(localId, localId);        }      }    } catch (InterruptedException e) {      LOGGER.info(INSTANCE + localId + ""- Interrupted."");    }  }  /**   * Process election invoke message. Send election message to all the instances with smaller ID. If   * any one of them is alive, do nothing. If no instance alive, send leader message to all the   * alive instance and restart heartbeat.   */  @Override",handleHeartbeatInvokeMessage
913,"  void <extra_id_0>() throws Exception {    var executeService = Executors.newFixedThreadPool(2);    var lock = new ReaderWriterLock();    var writer1 = spy(new Writer(""Writer 1"", lock.writeLock()));    var writer2 = spy(new Writer(""Writer 2"", lock.writeLock()));    executeService.submit(writer1);    // Let write1 execute first    Thread.sleep(150);    executeService.submit(writer2);    executeService.shutdown();    try {      executeService.awaitTermination(10, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"", e);    }    // Write operation will hold the write lock 250 milliseconds, so here we verify that when two    // writer execute concurrently, the second writer can only writes only when the first one is    // finished.    assertTrue(appender.logContains(""Writer 1 begin""));    assertTrue(appender.logContains(""Writer 1 finish""));    assertTrue(appender.logContains(""Writer 2 begin""));    assertTrue(appender.logContains(""Writer 2 finish""));  }",testWrite
1278,  void <extra_id_0>(Exception exception) {    this.exception = exception;    this.state = FAILED;    synchronized (lock) {      lock.notifyAll();    }  }  @Override,fulfillExceptionally
2334,"  void <extra_id_0>() {    assertEquals(1, repository.getCountersCollection().countDocuments());    assertEquals(0, repository.getTicketsCollection().countDocuments());  }  @Test",testSetup
2891,"  public void <extra_id_0>() {    decorated.attack();    LOGGER.info(""The troll swings at you with a club!"");  }  @Override",attack
359,"  public void <extra_id_0>() {    LOGGER.info(""With your Excalibur you sever the dragon's head!"");  }",execute
3860,"  void <extra_id_0>() {    var partProperties = Map.of(        Property.TYPE.toString(), TEST_PART_TYPE,        Property.MODEL.toString(), TEST_PART_MODEL,        Property.PRICE.toString(), (Object) TEST_PART_PRICE    );    var part = new Part(partProperties);    assertEquals(TEST_PART_TYPE, part.getType().orElseThrow());    assertEquals(TEST_PART_MODEL, part.getModel().orElseThrow());    assertEquals(TEST_PART_PRICE, part.getPrice().orElseThrow());  }  @Test",shouldConstructPart
552,  List<Wizard> <extra_id_0>(String name);,findWizardsWithSpellbook
3,  void <extra_id_0>() {    assertTrue(Files.isDirectory(testFolder));  }  /**   * Rainbow fish version 1 used during the tests   */,beforeEach
1566,  public T <extra_id_0>() throws IllegalStateException {    if (exceptions.isEmpty()) {      return obj;    }    var e = new IllegalStateException();    exceptions.forEach(e::addSuppressed);    throw e;  },get
2954,      public Private <extra_id_0>(Long id) {        this.id = id;        return this;      }      @Override,setId
2668,"  public void <extra_id_0>(MoneyDepositEvent moneyDepositEvent) {    handleDeposit(moneyDepositEvent.getMoney(), moneyDepositEvent.isRealTime());  }  /**   * Handles the AccountCreateEvent.   *   * @param accountCreateEvent the account created event   */",handleEvent
1747,  public String <extra_id_0>() {    return TAG;  },tag
2339,"  void <extra_id_0>() {    var numbers = LotteryNumbers.create(Set.of(1, 2, 3, 4));    assertThrows(UnsupportedOperationException.class, () -> numbers.getNumbers().add(5));  }  @Test",testNumbersCantBeModified
1170,"  void <extra_id_0>() {    assertThrows(UnsupportedOperationException.class, () -> {      POISON_PILL.addHeader(Headers.SENDER, ""sender"");    });  }  @Test",testAddHeader
76,"  void <extra_id_0>() {    context.put(UnitActions.INSERT.getActionValue(), List.of(weapon1));    context.put(UnitActions.DELETE.getActionValue(), List.of(weapon1));    armsDealer.commit();    verify(weaponDatabase, never()).modify(weapon1);  }  @Test",shouldNotModifyToDbIfNotRegisteredStudentsToBeCommitted
3743,"  public void <extra_id_0>() {    LOGGER.info(""The item spreads bloodlust."");  }  @Override",onActivate
1581,  public static void <extra_id_0>() {    /* Send logs on file system */    fileLoggerModule.printString(MESSAGE);    fileLoggerModule.printErrorString(ERROR);    /* Send logs on console */    consoleLoggerModule.printString(MESSAGE);    consoleLoggerModule.printErrorString(ERROR);  }  /**   * Program entry point.   *   * @param args command line args.   * @throws FileNotFoundException if program is not able to find log files (output.txt and   *                               error.txt)   */,execute
3378,  private String <extra_id_0>() {    StringBuilder random = new StringBuilder();    while (random.length() < 12) { // length of the random string.      int index = (int) (RANDOM.nextFloat() * ALL_CHARS.length());      random.append(ALL_CHARS.charAt(index));    }    return random.toString();  },createUniqueId
2316,"  void <extra_id_0>(String bankAccount, int amount);  /**   * Get amount of funds for bank account.   */",setFunds
980,  void <extra_id_0>() {    var core = new CustomerCore();    assertTrue(core.addRole(Role.Borrower));  }  @Test,addRole
1067,"  private static Saga <extra_id_0>(Object value) {    return Saga        .create()        .chapter(""init an order"").setInValue(value)        .chapter(""booking a Fly"")        .chapter(""booking a Hotel"")        .chapter(""withdrawing Money"");  }",newSaga
1295,"  void <extra_id_0>()      throws InterruptedException, ExecutionException {    promise.fulfillInAsync(new NumberCrunchingTask(), executor);    assertEquals(NumberCrunchingTask.CRUNCHED_NUMBER, promise.get());    assertTrue(promise.isDone());    assertFalse(promise.isCancelled());  }  @Test",promiseIsFulfilledWithTheResultantValueOfExecutingTheTask
2472,  List<E> <extra_id_0>();  /**   * Utility method that iterates over iterable and adds the contents to a list.   *   * @param iterable the iterable to collect   * @param <E>      the type of the objects to iterate   * @return a list with all objects of the given iterator   */,asList
2521,"  private void <extra_id_0>(Weapon weapon, WeaponType expectedWeaponType, Class<?> clazz) {    assertTrue(clazz.isInstance(weapon), ""Weapon must be an object of: "" + clazz.getName());    assertEquals(expectedWeaponType, weapon        .getWeaponType(), ""Weapon must be of weaponType: "" + expectedWeaponType);  }",verifyWeapon
2234,  protected abstract void <extra_id_0>();,processGameLoop
2749,  public void <extra_id_0>(Weekday day) {    if (day == Weekday.FRIDAY) {      notifyObservers(Event.STARK_SIGHTED);    }  },timePasses
3100,  void <extra_id_0>() {    appender = new InMemoryAppender(Tobacco.class);  }  @AfterEach,setUp
3285,"  void <extra_id_0>() {    //given    final var stop = LocalDateTime.of(2017, Month.APRIL, 1, 19, 12);    final var stoppingData = new StoppingData(stop);    stoppingData.setDataBus(DataBus.getInstance());    final var statusMember = new StatusMember(1);    //when    statusMember.accept(stoppingData);    //then    assertEquals(stop, statusMember.getStopped());  }  @Test",statusRecordsTheStopTime
461,"  void <extra_id_0>() {    var tenant = new BarCustomer(""pirate"", 2, callsCount);    // In order to assure that throttling limits will not be reset, we use an empty throttling implementation    var timer = (Throttler) () -> {};    var service = new Bartender(timer, callsCount);    IntStream.range(0, 5).mapToObj(i -> tenant).forEach(service::orderDrink);    var counter = callsCount.getCount(tenant.getName());    assertEquals(2, counter, ""Counter limit must be reached"");  }",dummyCustomerApiTest
138,"      void <extra_id_0>() throws          Exception {        final var newRoomType = ""Double"";        final var newPrice = 80;        final var newBookingStatus = false;        final var Room = new Room(existingRoom.getId(), newRoomType, newPrice, newBookingStatus);        var result = dao.update(Room);        Assertions.assertTrue(result);        final var room = dao.getById(existingRoom.getId()).get();        assertEquals(newRoomType, room.getRoomType());        assertEquals(newPrice, room.getPrice());        assertEquals(newBookingStatus, room.isBooked());      }    }  }  /**   * Represents a scenario where DB connectivity is not present due to network issue, or DB service   * unavailable.   */  @Nested",updationShouldBeSuccessAndAccessingTheSameRoomShouldReturnUpdatedInformation
2715,  void <extra_id_0>(FileWriter writer) throws IOException;,writeFile
3327,"  public static GameObject <extra_id_0>() {    return new GameObject(new PlayerInputComponent(),        new ObjectPhysicComponent(),        new ObjectGraphicComponent(),        ""player"");  }  /**   * Creates a NPC game object.   *   * @return npc object   */",createPlayer
1209,"  void <extra_id_0>(){    Album album = new Album(""a"", ""b"", false, """");    album.setArtist(""c"");    assertEquals(""c"", album.getArtist());  }  @Test",testSetArtist
607,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    assertEquals(Health.HEALTHY, model.getHealth());    var messageFormat = ""Giant giant1, The giant looks %s, alert and saturated."";    for (final var health : Health.values()) {      model.setHealth(health);      assertEquals(health, model.getHealth());      assertEquals(String.format(messageFormat, health), model.toString());    }  }  /**   * Verify if the fatigue level is set properly though the constructor and setter   */  @Test",testSetHealth
772,  public void <extra_id_0>() {    complimentReceived = true;  }  @Override,receiveCompliments
1385,  public void <extra_id_0>() {    // Do nothing  },walk
2420,  public static void <extra_id_0>(String[] args) {    // initialize and wire the system    var menuStore = new MenuStore();    Dispatcher.getInstance().registerStore(menuStore);    var contentStore = new ContentStore();    Dispatcher.getInstance().registerStore(contentStore);    var menuView = new MenuView();    menuStore.registerView(menuView);    var contentView = new ContentView();    contentStore.registerView(contentView);    // render initial view    menuView.render();    contentView.render();    // user clicks another menu item    // this triggers action dispatching and eventually causes views to render with new content    menuView.itemClicked(MenuItem.COMPANY);  },main
1229,"  public String <extra_id_0>() {    return selectedAlbum.isClassical() ? selectedAlbum.getComposer() : """";  }  /**   * Sets the name of composer when the album is classical.   *   * @param value the name of composer.   */",getComposer
1823,  abstract List<Worker> <extra_id_0>(int num);,setWorkers
142,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.delete(existingRoom);      });    }    @Test",deletingARoomFailsWithExceptionAsFeedbackToTheClient
3368,"  private void <extra_id_0>(Order order, List<Exception> l)      throws Exception {    if (!l.isEmpty()) {      if (DatabaseUnavailableException.class.isAssignableFrom(l.get(0).getClass())) {        LOG.debug(ORDER_ID + ERROR_CONNECTING_MSG_SVC            + ""(Payment Error msg), trying again.."", order.id);      } else {        LOG.debug(ORDER_ID + "": Error in creating Payment Error""            + "" messaging request.."", order.id);      }      throw l.remove(0);    }    if (order.paid.equals(PaymentStatus.TRYING) && order.messageSent        .equals(MessageSent.NONE_SENT)) {      var requestId = messagingService.receiveRequest(1);      order.messageSent = MessageSent.PAYMENT_TRYING;      LOG.info(ORDER_ID + "": Payment Error message sent successfully,""          + REQUEST_ID, order.id, requestId);    }  }",handlePaymentPossibleErrorMsgRetryOperation
2210,      protected void <extra_id_0>() {      }    };  }  @AfterEach,processGameLoop
518,  public Data <extra_id_0>(final int id) {    return dataStore.get(id);  },getDataById
1723,"  void <extra_id_0>() {    stub.setFileName(null);    presenter.start();    presenter.fileNameChanged();    presenter.confirmed();    assertFalse(loader.isLoaded());    assertEquals(1, stub.getMessagesSent());  }  /**   * Tests if we receive a confirmation when we attempt to open a file that it doesn't exist.   */  @Test",fileConfirmationWhenNameIsNull
2802,"  public Stream<Order> <extra_id_0>() {    var ordersList = new ArrayList<Order>();    try (var rSet = queryOrders.executeQuery(QUERY_ORDERS)) {      while (rSet.next()) {        var order = new Order(rSet.getInt(1), rSet.getString(2), rSet.getString(3),            new ShippingAddress(rSet.getString(4), rSet.getString(5),            rSet.getString(6)));        ordersList.add(order);      }      rSet.close();    } catch (SQLException e) {      LOGGER.error(e.getMessage(), e.getCause());    }    return ordersList.stream();  }  /**   * Query order by given id.   * @param id as the parameter   * @return Order objct   * @throws SQLException in case of unexpected events   */  @Override",queryOrders
803,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1990,"  public String <extra_id_0>(Order order) {    if (chain != null) {      return chain.execute(order);    } else {      return ""RUNNING..."";    }  }",execute
297,  protected abstract String <extra_id_0>();,pickTarget
278,"  protected void <extra_id_0>(String particleType, int count) {    logger.info(""Spawn {} particle with type {}"", count, particleType);  }",spawnParticles
1116,  public T <extra_id_0>() {    if (isEmpty()) {      return null;    }    final var root = queue[0];    queue[0] = queue[size - 1];    size--;    maxHeapifyDown();    return root;  }  /**   * Add message to queue.   */,remove
2205,  void <extra_id_0>() {    gameLoop = new VariableStepGameLoop();  }  @AfterEach,setup
2060,"  void <extra_id_0>() {    // Arrange    CompletableFuture<Health> future =        CompletableFuture.completedFuture(            Health.down().withDetail(""memory usage"", ""95% of max"").build());    when(asynchronousHealthChecker.performCheck(any(Supplier.class), anyLong())).thenReturn(future);    // Act    Health health = memoryHealthIndicator.health();    // Assert    assertEquals(Status.DOWN, health.getStatus());    assertEquals(""95% of max"", health.getDetails().get(""memory usage""));  }  /**   * Test case for the `health()` method when the health check is interrupted.   *   * <p>Asserts that when the `health()` method is called and the health check is interrupted, it   * returns a Health object with Status DOWN and an error detail indicating the interruption.   *   * @throws ExecutionException if the future fails to complete   * @throws InterruptedException if the thread is interrupted while waiting for the future to   *     complete   */  @Test",whenMemoryUsageIsAboveThreshold_thenHealthIsDown
320,"  void <extra_id_0>() {    final var initialMethod = spy(StealingMethod.class);    final var thief = new HalflingThief(initialMethod);    thief.steal();    verify(initialMethod).steal();    String target = verify(initialMethod).pickTarget();    verify(initialMethod).confuseTarget(target);    verify(initialMethod).stealTheItem(target);    final var newMethod = spy(StealingMethod.class);    thief.changeMethod(newMethod);    thief.steal();    verify(newMethod).steal();    String newTarget = verify(newMethod).pickTarget();    verify(newMethod).confuseTarget(newTarget);    verify(newMethod).stealTheItem(newTarget);    verifyNoMoreInteractions(initialMethod, newMethod);  }",testChangeMethod
121,  static <T> Trampoline<T> <extra_id_0>(final T result) {    return () -> result;  }  /**   * Create a Trampoline that has more work to do.   *   * @param trampoline Next stage in Trampoline   * @return Trampoline with more work   */,done
3673,  private void <extra_id_0>(final UserAccount userAccount) {    dbManager.updateDb(userAccount);    cacheStore.invalidate(userAccount.getUserId());  }  /**   * Cache-Aside find user account helper.   *   * @param userId String   * @return {@link UserAccount}   */,saveAside
245,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Source module {}"", VERSION);    var sum = 0;    for (final var num : nums) {      sum += num;    }    return sum;  }  /**   * Implement accumulate multiply with old technique.   */",accumulateSum
548,  Spellbook <extra_id_0>(String name);,findByName
912,  void <extra_id_0>() {    appender.stop();  },tearDown
1277,  void <extra_id_0>(T value) {    this.value = value;    this.state = COMPLETED;    synchronized (lock) {      lock.notifyAll();    }  },fulfill
3736,"  public void <extra_id_0>() {    LOGGER.info(""The item begins to glow faintly."");  }  @Override",onActivate
575,  public Spellbook <extra_id_0>() {    return spellbook;  },getSpellbook
287,"  private String <extra_id_0>(String log) {    return log.split(""-"")[1].trim();  }",getLogContent
1836,"  private static void <extra_id_0>(WorkCenter workCenter, TaskSet taskSet) throws InterruptedException {    var workers = workCenter.getWorkers();    var exec = Executors.newFixedThreadPool(workers.size());    workers.forEach(exec::submit);    Thread.sleep(1000);    addTasks(taskSet);    exec.awaitTermination(2, TimeUnit.SECONDS);    exec.shutdownNow();  }  /**   * Add tasks.   */",execute
1341,"  public void <extra_id_0>() throws InterruptedException {    var item = new Item(name, itemId++);    queue.put(item);    Thread.sleep(RANDOM.nextInt(2000));  }",produce
228,  public void <extra_id_0>() {    if (++frames == delay) {      shootLightning();      frames = 0;    }  },update
2873,"  public void <extra_id_0>() {    LOGGER.info(""[Commander] "" + unit.getName() + "" is ready!"");  }",commanderReady
1721,  void <extra_id_0>() {    presenter.start();    assertNotNull(stub.getPresenter());    assertTrue(stub.isOpened());  }  /**   * Tests if the name of the file changes.   */  @Test,wiring
1163,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
2918,"  public void <extra_id_0>() {    LOGGER.info(""Render Component"");  }",render
1477,  public abstract boolean <extra_id_0>();,isAt
3880,"  public String <extra_id_0>() {    return this.name;  }    /**   * Kills the thread of execution.   * @param status of the thread of execution. 0 == OK, the rest is logging an error.   */",name
1333,"  public static void <extra_id_0>(String[] args) {    /*      Suppose we wanted to pass through a String to a series of filtering stages and convert it      as a char array on the last stage.      - Stage handler 1 (pipe): Removing the alphabets, accepts a String input and returns the      processed String output. This will be used by the next handler as its input.      - Stage handler 2 (pipe): Removing the digits, accepts a String input and returns the      processed String output. This shall also be used by the last handler we have.      - Stage handler 3 (pipe): Converting the String input to a char array handler. We would      be returning a different type in here since that is what's specified by the requirement.      This means that at any stages along the pipeline, the handler can return any type of data      as long as it fulfills the requirements for the next handler's input.      Suppose we wanted to add another handler after ConvertToCharArrayHandler. That handler      then is expected to receive an input of char[] array since that is the type being returned      by the previous handler, ConvertToCharArrayHandler.     */    var filters = new Pipeline<>(new RemoveAlphabetsHandler())        .addHandler(new RemoveDigitsHandler())        .addHandler(new ConvertToCharArrayHandler());    filters.execute(""GoYankees123!"");  }",main
2272,  void <extra_id_0>();  /**   * Draw lottery numbers.   */,getAllSubmittedTickets
3070,"    void <extra_id_0>() {        assertEquals(Money.of(USD, 100), product.getSalePrice());        product.setExpirationDate(LocalDate.now().plusDays(2));        assertEquals(Money.of(USD, 80), product.getSalePrice());    }",shouldGetSalePriceOfProduct
3813,  public Army <extra_id_0>() {    return new OrcArmy();  },createArmy
399,"  public void <extra_id_0>() {    LOGGER.info(""{} calms down."", mammoth);  }",onEnterState
469,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setURL(DB_URL);    return dataSource;  },createDataSource
1565,"  public <U> Validator<T> <extra_id_0>(      Function<? super T, ? extends U> projection,      Predicate<? super U> validation,      String message  ) {    return validate(projection.andThen(validation::test)::apply, message);  }  /**   * Receives validated object or throws exception when invalid.   *   * @return object that was validated   * @throws IllegalStateException when any validation step results with failure   */",validate
1506,"  public AlbumPage <extra_id_0>(int year) {    var albumYearSelectOption = (HtmlSelect) page.getElementById(""albumYear"");    var yearOption = albumYearSelectOption.getOptionByValue(Integer.toString(year));    albumYearSelectOption.setSelectedAttribute(yearOption, true);    return this;  }  /**   * Sets the album rating input text field.   *   * @param albumRating the new album rating value to set   * @return {@link AlbumPage}   */",changeAlbumYear
3845,  Object <extra_id_0>(String key);  /**   * Gets the stream of child documents.   *   * @param key         element key   * @param constructor constructor of child class   * @return child documents   */,get
3347,  public abstract T <extra_id_0>(T obj) throws DatabaseUnavailableException;,add
3653,"  public void <extra_id_0>() {    LOGGER.info(""Playing sound"");    numberOfPlayedSounds++;  }",playSound
702,  public static synchronized MaintenanceLock <extra_id_0>() {    if (instance == null) {      instance = new MaintenanceLock();    }    return instance;  },getInstance
3614,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2417,  public void <extra_id_0>(Store store) {    stores.add(store);  }  /**   * Menu item selected handler.   */,registerStore
1934,  protected void <extra_id_0>() {    // Not used in Bully Instance  }  @Override,handleLeaderInvokeMessage
3821,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
3645,"  public void <extra_id_0>(int[] bytecode) {    for (var i = 0; i < bytecode.length; i++) {      Instruction instruction = Instruction.getInstruction(bytecode[i]);      switch (instruction) {        case LITERAL:          // Read the next byte from the bytecode.          int value = bytecode[++i];          // Push the next value to stack          stack.push(value);          break;        case SET_AGILITY:          var amount = stack.pop();          var wizard = stack.pop();          setAgility(wizard, amount);          break;        case SET_WISDOM:          amount = stack.pop();          wizard = stack.pop();          setWisdom(wizard, amount);          break;        case SET_HEALTH:          amount = stack.pop();          wizard = stack.pop();          setHealth(wizard, amount);          break;        case GET_HEALTH:          wizard = stack.pop();          stack.push(getHealth(wizard));          break;        case GET_AGILITY:          wizard = stack.pop();          stack.push(getAgility(wizard));          break;        case GET_WISDOM:          wizard = stack.pop();          stack.push(getWisdom(wizard));          break;        case ADD:          var a = stack.pop();          var b = stack.pop();          stack.push(a + b);          break;        case DIVIDE:          a = stack.pop();          b = stack.pop();          stack.push(b / a);          break;        case PLAY_SOUND:          wizard = stack.pop();          getWizards()[wizard].playSound();          break;        case SPAWN_PARTICLES:          wizard = stack.pop();          getWizards()[wizard].spawnParticles();          break;        default:          throw new IllegalArgumentException(""Invalid instruction value"");      }      LOGGER.info(""Executed "" + instruction.name() + "", Stack contains "" + getStack());    }  }",execute
3687,"  public static void <extra_id_0>(final String[] args) {    // VirtualDB (instead of MongoDB) was used in running the JUnit tests    // and the App class to avoid Maven compilation errors. Set flag to    // true to run the tests with MongoDB (provided that MongoDB is    // installed and socket connection is open).    boolean isDbMongo = isDbMongo(args);    if (isDbMongo) {      LOGGER.info(""Using the Mongo database engine to run the application."");    } else {      LOGGER.info(""Using the 'in Memory' database to run the application."");    }    App app = new App(isDbMongo);    app.useReadAndWriteThroughStrategy();    String splitLine = ""=============================================="";    LOGGER.info(splitLine);    app.useReadThroughAndWriteAroundStrategy();    LOGGER.info(splitLine);    app.useReadThroughAndWriteBehindStrategy();    LOGGER.info(splitLine);    app.useCacheAsideStategy();    LOGGER.info(splitLine);  }  /**   * Check the input parameters. if   *   * @param args input params   * @return true if there is ""--mongo"" parameter in arguments   */",main
1812,  Input<?> <extra_id_0>() {    return this.receivedData;  },getReceivedData
2295,"  public void <extra_id_0>(PlayerDetails details, int prizeAmount) {    var document = new Document(EMAIL, details.getEmail());    document.put(PHONE, details.getPhoneNumber());    document.put(""bank"", details.getBankAccount());    document.put(MESSAGE, String        .format(""Lottery ticket won! Unfortunately the bank credit transfer of %d failed."",            prizeAmount));    eventsCollection.insertOne(document);    stdOutEventLog.prizeError(details, prizeAmount);  }",prizeError
1120,"  private void <extra_id_0>() {    var index = size - 1;    while (hasParent(index) && parent(index).compareTo(queue[index]) < 0) {      swap(parentIndex(index), index);      index = parentIndex(index);    }  }  // index",maxHeapifyUp
248,"  public int <extra_id_0>(int... nums) {    LOGGER.info(SOURCE_MODULE, VERSION);    return Arrays.stream(nums).reduce(1, (a, b) -> a * b);  }",accumulateMul
2926,"  public void <extra_id_0>() {    LOGGER.info(""Update AI Game Component"");    IntStream.range(0, numEntities)        .filter(i -> aiComponents.length > i && aiComponents[i] != null)        .forEach(i -> aiComponents[i].update());  }",update
1567,"  public static void <extra_id_0>(String[] args) {    var user = new User(""user"", 24, Sex.FEMALE, ""foobar.com"");    LOGGER.info(Validator.of(user).validate(User::name, Objects::nonNull, ""name is null"")        .validate(User::name, name -> !name.isEmpty(), ""name is empty"")        .validate(User::email, email -> !email.contains(""@""), ""email doesn't contains '@'"")        .validate(User::age, age -> age > 20 && age < 30, ""age isn't between..."").get()        .toString());  }",main
32,"  void <extra_id_0>() {    assertTimeout(ofMillis(5000), () -> {      final var ballThread = new BallThread();      final var ballItem = mock(BallItem.class);      ballThread.setTwin(ballItem);      ballThread.start();      sleep(200);      verify(ballItem, atLeastOnce()).draw();      verify(ballItem, atLeastOnce()).move();      ballThread.suspendMe();      sleep(1000);      ballThread.stopMe();      ballThread.join();      verifyNoMoreInteractions(ballItem);    });  }  /**   * Verify if the {@link BallThread} can be resumed   */  @Test",testSuspend
1169,"  void <extra_id_0>() throws Exception {    final var publishPoint = mock(MqPublishPoint.class);    final var producer = new Producer(""producer"", publishPoint);    verifyNoMoreInteractions(publishPoint);    producer.stop();    verify(publishPoint).put(eq(Message.POISON_PILL));    try {      producer.send(""Hello!"");      fail(""Expected 'IllegalStateException' at this point, since the producer has stopped!"");    } catch (IllegalStateException e) {      assertNotNull(e);      assertNotNull(e.getMessage());      assertEquals(""Producer Hello! was stopped and fail to deliver requested message [producer]."",          e.getMessage());    }    verifyNoMoreInteractions(publishPoint);  }",testStop
436,"  void <extra_id_0>() {    assertEquals(-1332207447, (new User(1, null,            ""iloveyou"")).hashCode());  }  @Test",testHashCode2
1681,"  boolean <extra_id_0>();  /**   * Sets the presenter component, to the one given as parameter.   *   * @param presenter The new presenter component.   */",isOpened
3863,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(InventoryApplication.class, args);  }",main
3364,"  private void <extra_id_0>(Order order, Order o) {    if ((o.messageSent.equals(MessageSent.NONE_SENT) || o.messageSent        .equals(MessageSent.PAYMENT_TRYING))        && System.currentTimeMillis() - o.createdTime < messageTime) {      var qt = new QueueTask(order, TaskType.MESSAGING, 0);      updateQueue(qt);      LOG.warn(ORDER_ID + "": Error in sending Payment Failure message, ""              + ""trying to queue task and add to employee handle.."", order.id);      employeeHandleIssue(o);    }  }",handlePaymentErrorIssue
855,"  public SelectableChannel <extra_id_0>() {    return channel;  }  /**   * The operation in which the channel is interested, this operation is provided to {@link   * Selector}.   *   * @return interested operation.   * @see SelectionKey   */",getJavaChannel
2785,"  void <extra_id_0>() {    var eventManager = new EventManager();    try {      var eventTime = 1;      var sEventId = eventManager.create(eventTime);      assertEquals(1, eventManager.getEventPool().size());      eventManager.start(sEventId);      var currentTime = System.currentTimeMillis();      // +2 to give a bit of buffer time for event to complete properly.      var endTime = currentTime + (eventTime + 2 * 1000);      while (System.currentTimeMillis() < endTime) ;      assertTrue(eventManager.getEventPool().isEmpty());    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException        | InvalidOperationException e) {      LOGGER.error(e.getMessage());    }  }  @Test",testFullSynchronousEvent
3520,"  void <extra_id_0>() {    var models = FunctionalProgramming.getModelsAfter2000(cars);    assertEquals(List.of(""Avenger"", ""Wrangler"", ""Focus"", ""Cascada""), models);  }  @Test",testGetModelsAfter2000UsingPipeline
1282,"  public T <extra_id_0>() throws InterruptedException, ExecutionException {    synchronized (lock) {      while (state == RUNNING) {        lock.wait();      }    }    if (state == COMPLETED) {      return value;    }    throw new ExecutionException(exception);  }  @Override",get
3402,"  public String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var messageToSend = (int) parameters[0];    var id = generateId();    MessageToSend msg;    if (messageToSend == 0) {      msg = MessageToSend.PAYMENT_FAIL;    } else if (messageToSend == 1) {      msg = MessageToSend.PAYMENT_TRYING;    } else { //messageToSend == 2      msg = MessageToSend.PAYMENT_SUCCESSFUL;    }    var req = new MessageRequest(id, msg);    return updateDb(req);  }",receiveRequest
2131,"    public List<CakeInfo> <extra_id_0>() {        List<CakeInfo> result = new ArrayList<>();        for (Cake cake : cakeDao.findAll()) {            var cakeToppingInfo =                    new CakeToppingInfo(cake.getTopping().getId(), cake.getTopping().getName(), cake                            .getTopping().getCalories());            List<CakeLayerInfo> cakeLayerInfos = new ArrayList<>();            for (var layer : cake.getLayers()) {                cakeLayerInfos.add(new CakeLayerInfo(layer.getId(), layer.getName(), layer.getCalories()));            }            var cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);            result.add(cakeInfo);        }        return result;    }",getAllCakes
1574,  public static ConsoleLoggerModule <extra_id_0>() {    if (ConsoleLoggerModule.singleton == null) {      ConsoleLoggerModule.singleton = new ConsoleLoggerModule();    }    return ConsoleLoggerModule.singleton;  }  /**   * Following method performs the initialization.   */,getSingleton
2913,  public List<Student> <extra_id_0>() {    return this.students;  },getStudents
2086,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2538,"  public void <extra_id_0>() {    LOGGER.info(""You become invisible. (Potion={})"", System.identityHashCode(this));  }",drink
1821,  int <extra_id_0>() {    return this.expectedNumResults;  },getExpectedNumResults
3546,"  void <extra_id_0>() throws RemoteServiceException {    RemoteService mockService = new RemoteService() {      @Override      public String call() throws RemoteServiceException {        return ""Remote Success"";      }    };    var circuitBreaker = new DefaultCircuitBreaker(mockService, 1, 1, 100);    //Call with the parameter start_time set to huge amount of time in past so that service    //replies with ""Ok"". Also, state is CLOSED in start    var serviceStartTime = System.nanoTime() - 60 * 1000 * 1000 * 1000;    var response = circuitBreaker.attemptRequest();    assertEquals(response, ""Remote Success"");  }",testApiResponses
1718,  public void <extra_id_0>() {    view.close();  },cancelled
111,"  void <extra_id_0>() {    var cp = new CellPool(10);    var ht = new Hashtable<String, Boolean>();    var parentTypes = 0;    for (var i = 0; i < cp.randomCode.length; i++) {      ht.putIfAbsent(cp.randomCode[i].name, true);      if (cp.randomCode[i].name.equals(""fruit"") || cp.randomCode[i].name.equals(""candy"")) {        parentTypes++;      }    }    assertTrue(ht.size() == 5 && parentTypes == 0);  }",assignRandomCandyTypesTest
3308,"  private void <extra_id_0>(final LetterComposite composedMessage, final String message) {    // Test is the composed message has the correct number of words    final var words = message.split("" "");    assertNotNull(composedMessage);    assertEquals(words.length, composedMessage.count());    // Print the message to the mocked stdOut ...    composedMessage.print();    // ... and verify if the message matches with the expected one    assertEquals(message, new String(this.stdOutBuffer.toByteArray()).trim());  }",testMessage
2190,"  void <extra_id_0>(Item expectedItem) {    final var chest = new TreasureChest();    final var iterator = chest.iterator(expectedItem.getType());    assertNotNull(iterator);    while (iterator.hasNext()) {      final var item = iterator.next();      assertNotNull(item);      assertEquals(expectedItem.getType(), item.getType());      final var name = item.toString();      assertNotNull(name);      if (expectedItem.toString().equals(name)) {        return;      }    }    fail(""Expected to find item ["" + expectedItem + ""] using iterator, but we didn't."");  }  /**   * Test if the expected item can be retrieved from the chest using the {@link   * TreasureChest#getItems()} method   */  @ParameterizedTest  @MethodSource(""dataProvider"")",testIterator
927,"    public void <extra_id_0>() {      synchronized (readerMutex) {        currentReaderCount--;        // Release the lock only when it is the last reader, it is ensure that the lock is released        // when all reader is completely.        if (currentReaderCount == 0) {          synchronized (globalMutex) {            // Notify the waiter, mostly the writer            globalMutex.remove(this);            globalMutex.notifyAll();          }        }      }    }    @Override",unlock
1157,  public Message <extra_id_0>() throws InterruptedException {    return queue.take();  },take
992,  public void <extra_id_0>(String name) {    this.name = name;  },setName
3078,"  void <extra_id_0>() throws SQLException {    var customer = customerDao.findByName(""customer"");    assertTrue(customer.isEmpty());    TestUtils.executeSQL(INSERT_CUSTOMER_SQL, dataSource);    customer = customerDao.findByName(""customer"");    assertTrue(customer.isPresent());    assertEquals(""customer"", customer.get().getName());    assertEquals(Money.of(USD, 100), customer.get().getMoney());  }  @Test",shouldFindCustomerByName
2868,"  void <extra_id_0>() throws Exception {    final var name = ""testName"";    final var unit = new Unit(name);    assertEquals(name, unit.getName());    final var newName = ""newName"";    unit.setName(newName);    assertEquals(newName, unit.getName());    assertNull(unit.getUnitExtension(""""));    assertNull(unit.getUnitExtension(""SoldierExtension""));    assertNull(unit.getUnitExtension(""SergeantExtension""));    assertNull(unit.getUnitExtension(""CommanderExtension""));  }",testConstGetSet
2767,"  private int <extra_id_0>() {    // nextInt is normally exclusive of the top value,    // so add 1 to make it inclusive    var randomNum = rand.nextInt((MAX_ID - MIN_ID) + 1) + MIN_ID;    while (eventPool.containsKey(randomNum)) {      randomNum = rand.nextInt((MAX_ID - MIN_ID) + 1) + MIN_ID;    }    return randomNum;  }  /**   * Callback from an {@link AsyncEvent} (once it is complete). The Event is then removed from the pool.   */  @Override",generateId
1187,"  public String <extra_id_0>() {    return ""Elven eagle helps in "" + helpType;  }",toString
1055,  public K <extra_id_0>() {    return value;  },getValue
1881,"  void <extra_id_0>(PartyMember actor, Action action);",act
2568,  public String <extra_id_0>() {    return name;  }  /**   * {@inheritDoc}   */  @Override,name
1680,"  void <extra_id_0>();  /**   * Returns true if view is opened.   *   * @return True, if the view is opened, false otherwise.   */",close
3180,"      void <extra_id_0>() throws Exception {        final var nonExistingCustomer = new Customer(2, ""Robert"", ""Englund"");        var result = dao.delete(nonExistingCustomer);        assertFalse(result);        assertCustomerCountIs(1);      }      @Test",deletionShouldBeFailureAndNotAffectExistingCustomers
1200,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testTitle = """";    model.setTitle(testTitle);    assertEquals(testTitle, model.getTitle());  }  @Test",testSetTitle_2
791,  void <extra_id_0>() {    final var queen = new Queen();    queen.setFlirtiness(false);    queen.receiveCompliments();    queen.changeMood();    assertFalse(queen.getMood());  }  @Test,testNotFlirtyComplemented
1324,  Integer <extra_id_0>(Stats stat);,get
1777,"  void <extra_id_0>(){    Assertions.assertThrows(NullPointerException.class, () -> new Feind(null, null));    Assertions.assertThrows(NullPointerException.class, () -> new Feind(elf, null));    Assertions.assertThrows(NullPointerException.class, () -> new Feind(null, sword));  }  @Test",nullTests
931,"    public Condition <extra_id_0>() {      throw new UnsupportedOperationException();    }  }  /**   * Writer Lock, can only be accessed by one writer concurrently.   */  private class WriteLock implements Lock {    @Override    public void lock() {      synchronized (globalMutex) {        // Wait until the lock is free.        while (!isLockFree()) {          try {            globalMutex.wait();          } catch (InterruptedException e) {            LOGGER.info(""InterruptedException while waiting for globalMutex to begin writing"", e);            Thread.currentThread().interrupt();          }        }        // When the lock is free, acquire it by placing an entry in globalMutex        globalMutex.add(this);      }    }    @Override    public void unlock() {      synchronized (globalMutex) {        globalMutex.remove(this);        // Notify the waiter, other writer or reader        globalMutex.notifyAll();      }    }    @Override    public void lockInterruptibly() {      throw new UnsupportedOperationException();    }    @Override    public boolean tryLock() {      throw new UnsupportedOperationException();    }    @Override    public boolean tryLock(long time, TimeUnit unit) {      throw new UnsupportedOperationException();    }    @Override    public Condition newCondition() {      throw new UnsupportedOperationException();    }  }}",newCondition
456,  void <extra_id_0>();,start
1741,  void <extra_id_0>() {    viewModel.handleAction(new MultiplicationCalculatorAction());  }  /**   * Handle division action.   */,multiply
3693,  public UserAccount <extra_id_0>(final String userId) {    if (cache.containsKey(userId)) {      var node = cache.get(userId);      remove(node);      setHead(node);      return node.userAccount;    }    return null;  }  /**   * Remove node from linked list.   *   * @param node {@link Node}   */,get
1824,  public void <extra_id_0>(Input<?> input) {    divideWork(input);  },doWork
1424,"  public void <extra_id_0>(GenWeather weather, WeatherType weatherType) {    LOGGER.info(""The hobbits are facing "" + weatherType.getDescription() + "" weather now"");  }",update
883,"    private void <extra_id_0>(PrintWriter writer, InputStream inputStream) throws IOException {      for (var i = 0; i < 4; i++) {        writer.println(clientName + "" - Log request: "" + i);        writer.flush();        var data = new byte[1024];        var read = inputStream.read(data, 0, data.length);        if (read == 0) {          LOGGER.info(""Read zero bytes"");        } else {          LOGGER.info(new String(data, 0, read));        }        artificialDelayOf(100);      }    }  }  /**   * A logging client that sends requests to Reactor on UDP socket.   */  static class UdpLoggingClient implements Runnable {    private final String clientName;    private final InetSocketAddress remoteAddress;    /**     * Creates a new UDP logging client.     *     * @param clientName the name of the client to be sent in logging requests.     * @param port       the port on which client will send logging requests.     * @throws UnknownHostException if localhost is unknown     */    public UdpLoggingClient(String clientName, int port) throws UnknownHostException {      this.clientName = clientName;      this.remoteAddress = new InetSocketAddress(InetAddress.getLocalHost(), port);    }    @Override    public void run() {      try (var socket = new DatagramSocket()) {        for (var i = 0; i < 4; i++) {          var message = clientName + "" - Log request: "" + i;          var bytes = message.getBytes();          var request = new DatagramPacket(bytes, bytes.length, remoteAddress);          socket.send(request);          var data = new byte[1024];          var reply = new DatagramPacket(data, data.length);          socket.receive(reply);          if (reply.getLength() == 0) {            LOGGER.info(""Read zero bytes"");          } else {            LOGGER.info(new String(reply.getData(), 0, reply.getLength()));          }          artificialDelayOf(100);        }      } catch (IOException e1) {        LOGGER.error(""error sending packets"", e1);      }    }  }}",sendLogRequests
1978,"  void <extra_id_0>() {    final var order = new Order();    order.setDepositNumber(EXPECTED_VALUE);    assertEquals(EXPECTED_VALUE, order.getDepositNumber());  }  @Test",testSetDepositNumber
3286,"  void <extra_id_0>() {    //given    final var messageData = new MessageData(""message"");    final var statusMember = new StatusMember(1);    //when    statusMember.accept(messageData);    //then    assertNull(statusMember.getStarted());    assertNull(statusMember.getStopped());  }",statusIgnoresMessageData
2581,"  public Filterer<? extends ProbabilisticThreatAwareSystem, ? extends ProbableThreat> <extra_id_0>() {    return this::filteredGroup;  }",filtered
382,"  public void <extra_id_0>() {    LOGGER.info(""{} processing {}"", Thread.currentThread().getName(), task.toString());    try {      Thread.sleep(task.getTimeMs());    } catch (InterruptedException e) {      e.printStackTrace();    }  }",run
3209,    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertTrue(newBean.isScienceNewsInterest());        newBean.setScienceNewsInterest(false);        assertFalse(newBean.isScienceNewsInterest());    }    @Test,testScienceSetterGetter
1397,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
133,"      void <extra_id_0>() throws Exception {        final var nonExistingRoom = new Room(2, ""Double"", 80, false);        var result = dao.delete(nonExistingRoom);        Assertions.assertFalse(result);        assertRoomCountIs(1);      }      @Test",deletionShouldBeFailureAndNotAffectExistingRooms
1246,  public String <extra_id_0>() {    return log.get(log.size() - 1).getFormattedMessage();  },getLastMessage
719,"  public static void <extra_id_0>(String[] args) {    // DB seeding    LOGGER.info(""Db seeding: "" + ""1 user: {\""ignite1771\"", amount = 1000.0}, ""        + ""2 products: {\""computer\"": price = 800.0, \""car\"": price = 20000.0}"");    Db.getInstance().seedUser(TEST_USER_1, 1000.0);    Db.getInstance().seedItem(ITEM_COMPUTER, 800.0);    Db.getInstance().seedItem(ITEM_CAR, 20000.0);    final var applicationServices = new ApplicationServicesImpl();    ReceiptViewModel receipt;    LOGGER.info(LOGGER_STRING, TEST_USER_2, ITEM_TV);    receipt = applicationServices.loggedInUserPurchase(TEST_USER_2, ITEM_TV);    receipt.show();    MaintenanceLock.getInstance().setLock(false);    LOGGER.info(LOGGER_STRING, TEST_USER_2, ITEM_TV);    receipt = applicationServices.loggedInUserPurchase(TEST_USER_2, ITEM_TV);    receipt.show();    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_TV);    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_TV);    receipt.show();    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_CAR);    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_CAR);    receipt.show();    LOGGER.info(LOGGER_STRING, TEST_USER_1, ITEM_COMPUTER);    receipt = applicationServices.loggedInUserPurchase(TEST_USER_1, ITEM_COMPUTER);    receipt.show();  }",main
3665,  void <extra_id_0>(int addend) {    amount += addend;  }  //minus,plus
2251,  Optional<LotteryTicket> <extra_id_0>(LotteryTicketId id);  /**   * Save lottery ticket.   */,findById
928,    public void <extra_id_0>() {      throw new UnsupportedOperationException();    }    @Override,lockInterruptibly
1525,"  void <extra_id_0>() {    var flirtyQueen = RoyaltyObjectMother.createFlirtyQueen();    var notFlirtyQueen = RoyaltyObjectMother.createNotFlirtyQueen();    assertEquals(flirtyQueen.getClass(), Queen.class);    assertEquals(notFlirtyQueen.getClass(), Queen.class);  }  @Test",testQueenType
3621,"  private static <T> AsyncCallback<T> <extra_id_0>(String name) {    return (value, ex) -> {      if (ex.isPresent()) {        log(name + "" failed: "" + ex.map(Exception::getMessage).orElse(""""));      } else {        log(name + "" <"" + value + "">"");      }    };  }",callback
1867,    public int <extra_id_0>() {      return log.size();    },getLogSize
578,"  public static synchronized SessionFactory <extra_id_0>() {    if (sessionFactory == null) {      try {        sessionFactory = new Configuration()            .addAnnotatedClass(Wizard.class)            .addAnnotatedClass(Spellbook.class)            .addAnnotatedClass(Spell.class)            .setProperty(""hibernate.dialect"", ""org.hibernate.dialect.H2Dialect"")            .setProperty(""hibernate.connection.url"", ""jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"")            .setProperty(""hibernate.current_session_context_class"", ""thread"")            .setProperty(""hibernate.show_sql"", ""false"")            .setProperty(""hibernate.hbm2ddl.auto"", ""create-drop"").buildSessionFactory();      } catch (Throwable ex) {        LOGGER.error(""Initial SessionFactory creation failed."", ex);        throw new ExceptionInInitializerError(ex);      }    }    return sessionFactory;  }  /**   * Drop the current connection, resulting in a create-drop clean database next time. This is   * mainly used for JUnit testing since one test should not influence the other   */",getSessionFactory
696,  void <extra_id_0>() {    MaintenanceLock.getInstance().setLock(false);  }  @Test,beforeEach
2342,"  void <extra_id_0>() {    var details1 = new PlayerDetails(""bob@foo.bar"", ""1212-121212"", ""+34332322"");    var numbers1 = LotteryNumbers.create(Set.of(1, 2, 3, 4));    var ticket1 = new LotteryTicket(new LotteryTicketId(), details1, numbers1);    var details2 = new PlayerDetails(""bob@foo.bar"", ""1212-121212"", ""+34332322"");    var numbers2 = LotteryNumbers.create(Set.of(1, 2, 3, 4));    var ticket2 = new LotteryTicket(new LotteryTicketId(), details2, numbers2);    assertEquals(ticket1, ticket2);    var details3 = new PlayerDetails(""elsa@foo.bar"", ""1223-121212"", ""+49332322"");    var numbers3 = LotteryNumbers.create(Set.of(1, 2, 3, 8));    var ticket3 = new LotteryTicket(new LotteryTicketId(), details3, numbers3);    assertNotEquals(ticket1, ticket3);  }",testEquals
3232,"  public int <extra_id_0>() {    return Objects.hash(author, genre, title, publicationDate);  }  @Override",hashCode
1626,  void <extra_id_0>() {    assertDoesNotThrow(() -> Mute.mute(this::methodNotThrowingAnyException));  }  @Test,loggedMuteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException
1199,"  void <extra_id_0>() {    PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());    String testTitle = ""TestTile"";    model.setTitle(testTitle);    assertEquals(testTitle, model.getTitle());  }  @Test",testSetTitle_1
1675,"  public static void <extra_id_0>(String[] args) {    // create model, view and controller    var giant = new GiantModel(Health.HEALTHY, Fatigue.ALERT, Nourishment.SATURATED);    var view = new GiantView();    var controller = new GiantController(giant, view);    // initial display    controller.updateView();    // controller receives some interactions that affect the giant    controller.setHealth(Health.WOUNDED);    controller.setNourishment(Nourishment.HUNGRY);    controller.setFatigue(Fatigue.TIRED);    // redisplay    controller.updateView();  }",main
2322,"  public void <extra_id_0>() {    connect(DEFAULT_DB, DEFAULT_ACCOUNTS_COLLECTION);  }  /**   * Connect to database with given parameters.   */",connect
1927,  boolean <extra_id_0>();  /**   * Set the health status of the certain instance.   *   * @param alive {@code true} for alive.   */,isAlive
1891,  Heavy <extra_id_0>() throws Exception {    return this.holder.getHeavy();  },getHeavy
1449,"  void <extra_id_0>() {    assertEquals(searchService.search(parameterObject), searchService.search(""sneakers"",        SortOrder.ASC), ""Default Parameter values do not not match."");    LOGGER.info(""SortBy Default parameter value matches."");    assertEquals(searchService.search(parameterObject), searchService.search(""sneakers"",        ""price""), ""Default Parameter values do not not match."");    LOGGER.info(""SortOrder Default parameter value matches."");    LOGGER.info(""testDefaultParametersMatch executed successfully without errors."");  }",testDefaultParametersMatch
1011,  private static ServiceDiscoveryService <extra_id_0>() {    return        new ServiceDiscoveryService()            .discover(new OrderService())            .discover(new FlyBookingService())            .discover(new HotelBookingService())            .discover(new WithdrawMoneyService());  },serviceDiscovery
3162,"    void <extra_id_0>() throws Exception {      var result = dao.add(CUSTOMER);      assertFalse(result);      assertCustomerCountIs(1);      assertEquals(CUSTOMER, dao.getById(CUSTOMER.getId()).get());    }    @Test",addingShouldResultInFailureAndNotAffectExistingCustomers
3338,  void <extra_id_0>(GameObject gameObject);,update
1813,"  public void <extra_id_0>(Master m, Input<?> i) {    //check if ready to receive..if yes:    this.receivedData = i;  }",setReceivedData
886,"  private static void <extra_id_0>(      AbstractNioChannel channel,      DatagramPacket incomingPacket,      SelectionKey key  ) {    /*     * Create a reply acknowledgement datagram packet setting the receiver to the sender of incoming     * message.     */    var replyPacket = new DatagramPacket(ByteBuffer.wrap(ACK));    replyPacket.setReceiver(incomingPacket.getSender());    channel.write(replyPacket, key);  }",sendReply
606,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    GiantView giantView = new GiantView();    Dispatcher dispatcher = new Dispatcher(giantView);    assertDoesNotThrow(() -> dispatcher.updateView(model));  }",testUpdateView
1780,"  void <extra_id_0>(){    var elf = new Elf(""Limbar"");    var orc = new Orc(""Dargal"");    var human = new Human(""Jerry"");    Assertions.assertEquals(CreatureStats.ELF_HEALTH.getValue(), elf.getHealth());    Assertions.assertEquals(CreatureStats.ELF_DAMAGE.getValue(), elf.getDamage());    Assertions.assertEquals(CreatureStats.ORC_DAMAGE.getValue(), orc.getDamage());    Assertions.assertEquals(CreatureStats.ORC_HEALTH.getValue(), orc.getHealth());    Assertions.assertEquals(CreatureStats.HUMAN_DAMAGE.getValue(), human.getDamage());    Assertions.assertEquals(CreatureStats.HUMAN_HEALTH.getValue(), human.getHealth());  }",statsTest
3856,"  void <extra_id_0>() {    var children = List.of(Map.of(), Map.of());    document.put(KEY, children);    var childrenStream = document.children(KEY, DocumentImplementation::new);    assertNotNull(children);    assertEquals(2, childrenStream.count());  }  @Test",shouldRetrieveChildren
680,  void <extra_id_0>() {    final var greenCreature = mock(Creature.class);    when(greenCreature.getColor()).thenReturn(Color.GREEN);    final var redCreature = mock(Creature.class);    when(redCreature.getColor()).thenReturn(Color.RED);    final var greenSelector = new ColorSelector(Color.GREEN);    assertTrue(greenSelector.test(greenCreature));    assertFalse(greenSelector.test(redCreature));  },testColor
704,"  public void <extra_id_0>(boolean lock) {    this.lock = lock;    LOGGER.info(""Maintenance lock is set to: {}"", lock);  }",setLock
1183,  public Mage <extra_id_0>() {    return mage.copy();  }  /**   * Create warlord.   */,createMage
671,"  public String <extra_id_0>() {    return String.format(""%s [size=%s, movement=%s, color=%s, mass=%s]"",        name, size, movement, color, mass);  }  @Override",toString
2995,  public static void <extra_id_0>(String[] args) {    var hpPrinterController = new PrinterController(new HpPrinter());    var canonPrinterController = new PrinterController(new CanonPrinter());    var epsonPrinterController = new PrinterController(new EpsonPrinter());    hpPrinterController.print(MESSAGE_TO_PRINT);    canonPrinterController.print(MESSAGE_TO_PRINT);    epsonPrinterController.print(MESSAGE_TO_PRINT);  },main
2816,"  public void <extra_id_0>(FlamingAsteroid asteroid) {    LOGGER.info(AppConstants.HITS, asteroid.getClass().getSimpleName(), this.getClass()        .getSimpleName());  }  @Override",collisionResolve
1176,"  public String <extra_id_0>() {    return ""Elven mage helps in "" + helpType;  }",toString
2037,"  void <extra_id_0>() {    // Set thresholds for testing within the test method to avoid issues with Spring's @Value    cpuHealthIndicator.setSystemCpuLoadThreshold(80.0);    cpuHealthIndicator.setProcessCpuLoadThreshold(50.0);    cpuHealthIndicator.setLoadAverageThreshold(0.75);    // Mock the getters to return your desired values    when(mockOsBean.getCpuLoad()).thenReturn(0.9); // Simulate 90% system CPU load    when(mockOsBean.getAvailableProcessors()).thenReturn(8);    when(mockOsBean.getSystemLoadAverage()).thenReturn(9.0);    // Execute the health check    Health health = cpuHealthIndicator.health();    // Assertions    assertEquals(        Status.DOWN,        health.getStatus(),        ""Health status should be DOWN when system CPU load is high"");    assertEquals(        ""High system CPU load"",        health.getDetails().get(""error""),        ""Error message should indicate high system CPU load"");  }  /**   * Tests that the health status is DOWN when the process CPU load is high.   *   * <p>Sets the process CPU load to 80% and mocks the other getters to return appropriate values.   * Executes the health check and asserts that the health status is DOWN and the error message   * indicates high process CPU load.   */  @Test",whenSystemCpuLoadIsHigh_thenHealthIsDown
1614,  public static void <extra_id_0>(CheckedRunnable runnable) {    try {      runnable.run();    } catch (Exception e) {      e.printStackTrace();    }  },loggedMute
1653,"  void <extra_id_0>() {    final var model = mock(GiantModel.class);    final var view = mock(GiantView.class);    final var controller = new GiantController(model, view);    verifyNoMoreInteractions(model, view);    for (final var fatigue : Fatigue.values()) {      controller.setFatigue(fatigue);      verify(model).setFatigue(fatigue);      verifyNoMoreInteractions(view);    }    controller.getFatigue();    //noinspection ResultOfMethodCallIgnored    verify(model).getFatigue();    verifyNoMoreInteractions(model, view);  }  /**   * Verify if the controller passes the nourishment level through to the model and vice versa   */  @Test",testSetFatigue
2128,    public void <extra_id_0>() {        cakeDao.deleteAll();    }    @Override,deleteAllCakes
1207,"  void <extra_id_0>(){    DisplayedAlbums displayedAlbums = new DisplayedAlbums();    displayedAlbums.addAlbums(""title"", ""artist"", false, ""composer"");    assertEquals("""", displayedAlbums.getAlbums().get(0).getComposer());  }",testAdd_false
252,"  public boolean <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic check zero {}"", VERSION);    return !newSource.ifNonZero(nums);  }",ifHasZero
1571,"  void <extra_id_0>() throws FileNotFoundException {    /* Get singleton instance of File Logger Module */    final var fileLoggerModule = FileLoggerModule.getSingleton();    /* Prepare the essential sub modules, to perform the sequence of jobs */    fileLoggerModule.prepare();    /* Test if nothing is printed in file */    assertNull(readFirstLine(ERROR_FILE));    /* Unprepare to cleanup the modules */    fileLoggerModule.unprepare();  }  /**   * Utility method to read first line of a file   *   * @param file as file name to be read   * @return a string value as first line in file   */",testNoFileErrorMessage
2001,  Filter <extra_id_0>();  /**   * Get last filter in the chain.   */,getNext
1807,  abstract Master <extra_id_0>(int numOfWorkers);,setMaster
2900,  void <extra_id_0>();,fleeBattle
1648,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
329,    AbilityStep <extra_id_0>(String spell);,withSpell
1167,    public boolean <extra_id_0>(String message) {      return log.stream().map(ILoggingEvent::getFormattedMessage).anyMatch(message::equals);    }  }},logContains
3706,  UserAccount <extra_id_0>(String userId);  /**   * Write to DB.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */,readFromDb
3682,"  public void <extra_id_0>() {    LOGGER.info(""# flushCache..."");    Optional.ofNullable(cache)        .map(LruCache::getCacheDataInListForm)        .orElse(List.of())        .forEach(dbManager::updateDb);    dbManager.disconnect();  }  /**   * Print user accounts.   * @return {@link String}   */",flushCache
12,"  public void <extra_id_0>() {    isSuspended = true;    LOGGER.info(""Begin to suspend BallThread"");  }",suspendMe
2319,"  public void <extra_id_0>(String bankAccount, int amount) {    accounts.put(bankAccount, amount);  }  @Override",setFunds
21,  public static void <extra_id_0>(String[] args) throws Exception {    var ballItem = new BallItem();    var ballThread = new BallThread();    ballItem.setTwin(ballThread);    ballThread.setTwin(ballItem);    ballThread.start();    waiting();    ballItem.click();    waiting();    ballItem.click();    waiting();    // exit    ballThread.stopMe();  },main
3452,  public Queue<PrinterItem> <extra_id_0>() {    return currentInstance.printerItemQueue;  }  /**   * Adds a single print job to the queue.   *   * @param printerItem The printing job to be added to the queue   */,getPrinterQueue
1115,  public Message <extra_id_0>() {    if (messagePriorityMessageQueue.isEmpty()) {      return null;    }    return messagePriorityMessageQueue.remove();  },receiveMessage
1361,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1298,"  private void <extra_id_0>() throws InterruptedException {    var promise = new Promise<Integer>();    promise.fulfillInAsync(() -> {      throw new RuntimeException(""Barf!"");    }, executor);    try {      promise.get(1000, TimeUnit.SECONDS);      fail(""Fetching promise should result in exception if the task threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }    try {      promise.get();      fail(""Fetching promise should result in exception if the task threw an exception"");    } catch (ExecutionException ex) {      assertTrue(promise.isDone());      assertFalse(promise.isCancelled());    }  }  @Test",testWaitingSomeTimeForPromiseToBeFulfilled
75,"  void <extra_id_0>() {    context.put(UnitActions.MODIFY.getActionValue(), List.of(weapon1));    context.put(UnitActions.DELETE.getActionValue(), List.of(weapon1));    armsDealer.commit();    verify(weaponDatabase, never()).insert(weapon1);  }  @Test",shouldNotInsertToDbIfNoRegisteredStudentsToBeCommitted
1036,  public boolean <extra_id_0>(int idx) {    return idx >= 0 && idx < chapters.size();  },isPresent
2073,"  public CompletableFuture<Health> <extra_id_0>(      Supplier<Health> healthCheck, long timeoutInSeconds) {    CompletableFuture<Health> future =        CompletableFuture.supplyAsync(healthCheck, healthCheckExecutor);    // Schedule a task to enforce the timeout    healthCheckExecutor.schedule(        () -> {          if (!future.isDone()) {            LOGGER.error(HEALTH_CHECK_TIMEOUT_MESSAGE);            future.completeExceptionally(new TimeoutException(HEALTH_CHECK_TIMEOUT_MESSAGE));          }        },        timeoutInSeconds,        TimeUnit.SECONDS);    return future.handle(        (result, throwable) -> {          if (throwable != null) {            LOGGER.error(HEALTH_CHECK_FAILED_MESSAGE, throwable);            // Check if the throwable is a TimeoutException or caused by a TimeoutException            Throwable rootCause =                throwable instanceof CompletionException ? throwable.getCause() : throwable;            if (!(rootCause instanceof TimeoutException)) {              LOGGER.error(HEALTH_CHECK_FAILED_MESSAGE, rootCause);              return Health.down().withException(rootCause).build();            } else {              LOGGER.error(HEALTH_CHECK_TIMEOUT_MESSAGE, rootCause);              // If it is a TimeoutException, rethrow it wrapped in a CompletionException              throw new CompletionException(rootCause);            }          } else {            return result;          }        });  }  /**   * Checks whether the health check executor service has terminated completely. This method waits   * for the executor service to finish all its tasks within a specified timeout. If the timeout is   * reached before all tasks are completed, the method returns `true`; otherwise, it returns   * `false`.   *   * @throws InterruptedException if the current thread is interrupted while waiting for the   *     executor service to terminate   */",performCheck
3057,  public Money <extra_id_0>() {    return price.minus(calculateDiscount());  },getSalePrice
833,"  public int <extra_id_0>() {    /*     * there is no need to accept connections in UDP, so the channel shows interest in reading data.     */    return SelectionKey.OP_READ;  }  /**   * Reads and returns a {@link DatagramPacket} from the underlying channel.   *   * @return the datagram packet read having the sender address.   */  @Override",getInterestedOps
1417,"  public void <extra_id_0>() {    var enumValues = WeatherType.values();    currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];    LOGGER.info(""The weather changed to {}."", currentWeather);    notifyObservers();  }",timePasses
3135,"  private Customer <extra_id_0>(ResultSet resultSet) throws SQLException {    return new Customer(resultSet.getInt(""ID""),        resultSet.getString(""FNAME""),        resultSet.getString(""LNAME""));  }  /**   * {@inheritDoc}   */  @Override",createCustomer
241,"  void <extra_id_0>() {    var heroStatA = HeroStat.valueOf(3, 9, 2);    var heroStatB = HeroStat.valueOf(3, 9, 2);    var heroStatC = HeroStat.valueOf(3, 9, 8);    assertEquals(heroStatA.toString(), heroStatB.toString());    assertNotEquals(heroStatA.toString(), heroStatC.toString());  }",testToString
3571,"  void <extra_id_0>() {    var imageController = new ImageController();    var imagePath = imageController.getImagePath();    assertEquals(""/product-image.png"", imagePath);  }",testGetImagePath
3093,"  void <extra_id_0>() {    final var simpleWizard = new SimpleWizard();    simpleWizard.smoke();    assertEquals(""SimpleWizard smoking OldTobyTobacco"", appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testSmoke
2238,"  public static void <extra_id_0>(String[] args) {    MongoConnectionPropertiesLoader.load();    var injector = Guice.createInjector(new LotteryModule());    var service = injector.getInstance(LotteryService.class);    var bank = injector.getInstance(WireTransfers.class);    try (Scanner scanner = new Scanner(System.in)) {      var exit = false;      while (!exit) {        printMainMenu();        var cmd = readString(scanner);        var lotteryConsoleService = new LotteryConsoleServiceImpl(LOGGER);        if (""1"".equals(cmd)) {          lotteryConsoleService.queryLotteryAccountFunds(bank, scanner);        } else if (""2"".equals(cmd)) {          lotteryConsoleService.addFundsToLotteryAccount(bank, scanner);        } else if (""3"".equals(cmd)) {          lotteryConsoleService.submitTicket(service, scanner);        } else if (""4"".equals(cmd)) {          lotteryConsoleService.checkTicket(service, scanner);        } else if (""5"".equals(cmd)) {          exit = true;        } else {          LOGGER.info(""Unknown command"");        }      }    }  }",main
3119,"  void <extra_id_0>() {    var converter = new Converter<UserDto, User>(        userDto -> new User(            userDto.getFirstName(),            userDto.getLastName(),            userDto.isActive(),            String.valueOf(new Random().nextInt())        ),        user -> new UserDto(            user.getFirstName(),            user.getLastName(),            user.isActive(),            user.getFirstName().toLowerCase() + user.getLastName().toLowerCase() + ""@whatever.com"")    );    var u1 = new User(""John"", ""Doe"", false, ""12324"");    var userDto = converter.convertFromEntity(u1);    assertEquals(""johndoe@whatever.com"", userDto.getEmail());  }  /**   * Test whether converting a collection of Users to DTO Users and then converting them back to   * domain users returns an equal collection.   */  @Test",testCustomConverter
557,  public List<Wizard> <extra_id_0>(String name) {    var spellbook = spellbookDao.findByName(name);    return new ArrayList<>(spellbook.getWizards());  }  @Override,findWizardsWithSpellbook
103,"  public static void <extra_id_0>(String[] args) {    var givenTime = 50; //50ms    var toWin = 500; //points    var pointsWon = 0;    var numOfRows = 3;    var start = System.currentTimeMillis();    var end = System.currentTimeMillis();    var round = 0;    while (pointsWon < toWin && end - start < givenTime) {      round++;      var pool = new CellPool(numOfRows * numOfRows + 5);      var cg = new CandyGame(numOfRows, pool);      if (round > 1) {        LOGGER.info(""Refreshing.."");      } else {        LOGGER.info(""Starting game.."");      }      cg.printGameStatus();      end = System.currentTimeMillis();      cg.round((int) (end - start), givenTime);      pointsWon += cg.totalPoints;      end = System.currentTimeMillis();    }    LOGGER.info(""Game Over"");    if (pointsWon >= toWin) {      LOGGER.info("""" + pointsWon);      LOGGER.info(""You win!!"");    } else {      LOGGER.info("""" + pointsWon);      LOGGER.info(""Sorry, you lose!"");    }  }",main
2927,"  public void <extra_id_0>() {    LOGGER.info(""Start Physics Game Component "");    IntStream.range(0, numEntities).forEach(i -> physicsComponents[i] = new PhysicsComponent());  }  /**   * Update physics component of Game.   */",start
1924,"  boolean <extra_id_0>(int currentId, String content);  /**   * Send new leader notification message to other instances.   *   * @param currentId Instance ID of which sends this message.   * @param leaderId  Leader message content.   * @return {@code true} if the message is accepted by the target instances.   */",sendElectionMessage
1208,"  void <extra_id_0>(){    Album album = new Album(""a"", ""b"", false, """");    album.setTitle(""b"");    assertEquals(""b"", album.getTitle());  }  @Test",testSetTitle
3142,"  boolean <extra_id_0>(Customer customer) throws Exception;  /**   * Update a customer.   *   * @param customer the customer to be updated.   * @return true if customer exists and is successfully updated, false otherwise.   * @throws Exception if any error occurs.   */",add
1855,"  void <extra_id_0>() {    var taskSet = new TaskSet();    var taskHandler = new TaskHandler();    var workCenter = new WorkCenter();    workCenter.createWorkers(5, taskSet, taskHandler);    workCenter.removeWorker(workCenter.getLeader());    workCenter.promoteLeader();    assertEquals(4, workCenter.getWorkers().size());    assertEquals(workCenter.getWorkers().get(0), workCenter.getLeader());  }",testPromoteLeader
3342,"    void <extra_id_0>(){        LOGGER.info(""npcDemoTest:"");        npcTest.demoUpdate();        assertEquals(2, npcTest.getVelocity());        assertEquals(2, npcTest.getCoordinate());    }",npcDemoTest
1915,"  void <extra_id_0>() {    var instance1 = new BullyInstance(null, 1, 1);    var instance2 = new BullyInstance(null, 1, 2);    var instance3 = new BullyInstance(null, 1, 3);    var instance4 = new BullyInstance(null, 1, 4);    Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3, 4, instance4);    instance1.setAlive(false);    var messageManager = new BullyMessageManager(instanceMap);    var result = messageManager.sendElectionMessage(2, ""2"");    assertEquals(result, true);  }  @Test",testElectionMessageAccepted
3573,  String <extra_id_0>();,getImagePath
1876,  public String <extra_id_0>() {    return description;  },getDescription
1301,"  void <extra_id_0>()      throws InterruptedException, ExecutionException {    var dependentPromise = promise        .fulfillInAsync(new NumberCrunchingTask(), executor)        .thenApply(value -> {          assertEquals(NumberCrunchingTask.CRUNCHED_NUMBER, value);          return String.valueOf(value);        });    assertEquals(String.valueOf(NumberCrunchingTask.CRUNCHED_NUMBER), dependentPromise.get());    assertTrue(dependentPromise.isDone());    assertFalse(dependentPromise.isCancelled());  }  @Test",dependentPromiseIsFulfilledAfterTheFunctionTransformsTheResultOfThisPromise
2791,"  public static void <extra_id_0>(String[] args) throws Exception {    final var dataSource = new DataSource();    // Orders to insert into database    final var order1 = new Order(""JBL headphone"", ""Ram"",         new ShippingAddress(""Bangalore"", ""Karnataka"", ""560040""));    final var order2 = new Order(""MacBook Pro"", ""Manjunath"",        new ShippingAddress(""Bangalore"", ""Karnataka"", ""581204""));    final var order3 = new Order(""Carrie Soto is Back"", ""Shiva"",        new ShippingAddress(""Bangalore"", ""Karnataka"", ""560004""));        // Create table for orders - Orders(id, name, orderedBy, city, state, pincode).    // We can see that table is different from the Order object we have.    // We're mapping ShippingAddress into city, state, pincode columns of the database and not creating a separate table.    if (dataSource.createSchema()) {      LOGGER.info(""TABLE CREATED"");      LOGGER.info(""Table \""Orders\"" schema:"" + dataSource.getSchema());    } else {      //If not able to create table, there's nothing we can do further.      LOGGER.error(""Error creating table"");      System.exit(0);    }    // Initially, database is empty    LOGGER.info(""Orders Query: {}"", dataSource.queryOrders().collect(Collectors.toList()));        //Insert orders where shippingAddress is mapped to different columns of the same table     dataSource.insertOrder(order1);    dataSource.insertOrder(order2);    dataSource.insertOrder(order3);        // Query orders.    // We'll create ShippingAddress object from city, state, pincode values from the table and add it to Order object    LOGGER.info(""Orders Query: {}"", dataSource.queryOrders().collect(Collectors.toList()) + """");        //Query order by given id    LOGGER.info(""Query Order with id=2: {}"", dataSource.queryOrder(2));        //Remove order by given id.     //Since we'd mapped address in the same table, deleting order will also take out the shipping address details.    LOGGER.info(""Remove Order with id=1"");    dataSource.removeOrder(1);    LOGGER.info(""Orders Query: {}"", dataSource.queryOrders().collect(Collectors.toList()) + """");        //After successful demonstration of the pattern, drop the table    if (dataSource.deleteSchema()) {      LOGGER.info(""TABLE DROPPED"");    } else {      //If there's a potential error while dropping table      LOGGER.error(""Error deleting table"");    }  }",main
2056,"  private boolean <extra_id_0>(Runnable action) {    action.run();    List<ILoggingEvent> events = listAppender.list;    return events.stream()        .anyMatch(event -> event.getMessage().contains(""Health check executor did not terminate""));  }  /**   * Tests that the {@link AsynchronousHealthChecker#shutdown()} method logs an error message when   * the executor does not terminate after attempting to cancel tasks.   */  @Test",doesLogContainMessage
1672,  public void <extra_id_0>() {    this.view.displayGiant(giant);  },updateView
3528,"  public static List<String> <extra_id_0>(List<Car> cars) {    List<Car> carsSortedByYear = new ArrayList<>();    for (Car car : cars) {      if (car.getYear() > 2000) {        carsSortedByYear.add(car);      }    }    Collections.sort(carsSortedByYear, new Comparator<Car>() {      @Override      public int compare(Car car1, Car car2) {        return car1.getYear() - car2.getYear();      }    });    List<String> models = new ArrayList<>();    for (Car car : carsSortedByYear) {      models.add(car.getModel());    }    return models;  }  /**   * Method to group cars by category using for loops.   *   * @param cars {@link List} of {@link Car} to be used for grouping   * @return {@link Map} with category as key and cars belonging to that category as value   */",getModelsAfter2000
2176,  private void <extra_id_0>(T valToInsert) {    if (this.isLessThanOrEqualTo(valToInsert)) {      this.setRight(new TreeNode<>(valToInsert));    } else {      this.setLeft(new TreeNode<>(valToInsert));    }  },insertNewChild
2185,  public String <extra_id_0>() {    return name;  },toString
152,"  void <extra_id_0>() {    final var newPrice = 60;    room.setPrice(newPrice);    assertEquals(newPrice, room.getPrice());  }  @Test",getAndSetLastName
1427,  public String <extra_id_0>() {    return value;  },getValue
1334,"  <K> Pipeline<I, K> <extra_id_0>(Handler<O, K> newHandler) {    return new Pipeline<>(input -> newHandler.process(currentHandler.process(input)));  }",addHandler
877,  void <extra_id_0>() throws InterruptedException;,stop
1655,"  void <extra_id_0>() {    final var model = mock(GiantModel.class);    final var view = mock(GiantView.class);    final var controller = new GiantController(model, view);    verifyNoMoreInteractions(model, view);    controller.updateView();    verify(view).displayGiant(model);    verifyNoMoreInteractions(model, view);  }",testUpdateView
1288,"  private Promise<Character> <extra_id_0>() {    return characterFrequency().thenApply(Utility::lowestFrequencyChar);  }  /*   * Download the file at DEFAULT_URL and when that promise is fulfilled,   * then promise to apply function to calculate character frequency.   */",lowestFrequencyChar
3205,"  void <extra_id_0>() throws Exception {    HttpServletRequest mockReq = Mockito.mock(HttpServletRequest.class);    HttpServletResponse mockResp = Mockito.mock(HttpServletResponse.class);    StringWriter stringWriter = new StringWriter();    PrintWriter printWriter = new PrintWriter(stringWriter);    when(mockResp.getWriter()).thenReturn(printWriter);    AppServlet curServlet = new AppServlet();    curServlet.doDelete(mockReq, mockResp);    printWriter.flush();    assertTrue(stringWriter.toString().contains(msgPartOne + "" Delete "" + msgPartTwo));  }",testDoDelete
257,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Arithmetic mul {}"", VERSION);    return source.accumulateMul(nums);  }  /**   * Chech if has any zero.   * @param nums numbers need to check   * @return if has any zero, return true, else, return false   */",mul
2094,"  void <extra_id_0>() {    final var layer1 = new CakeLayerInfo(""Layer1"", 1000);    final var layer2 = new CakeLayerInfo(""Layer2"", 2000);    cakeBakingService.saveNewLayer(layer1);    cakeBakingService.saveNewLayer(layer2);    final var missingTopping = new CakeToppingInfo(""Topping1"", 1000);    assertThrows(CakeBakingException.class, () -> cakeBakingService.bakeNewCake(new CakeInfo(missingTopping, List.of(layer1, layer2))));  }  @Test",testBakeCakeMissingTopping
3841,"  public void <extra_id_0>(Zoom zoom) {    LOGGER.info(zoom + "" used with Dos configurator."");  }",visit
185,"  public Stream<Room> <extra_id_0>() throws Exception {    try {      var connection = getConnection();      var statement = connection.prepareStatement(""SELECT * FROM ROOMS""); // NOSONAR      var resultSet = statement.executeQuery(); // NOSONAR      return StreamSupport.stream(new Spliterators.AbstractSpliterator<Room>(Long.MAX_VALUE,          Spliterator.ORDERED) {        @Override        public boolean tryAdvance(Consumer<? super Room> action) {          try {            if (!resultSet.next()) {              return false;            }            action.accept(createRoom(resultSet));            return true;          } catch (Exception e) {            throw new RuntimeException(e); // NOSONAR          }        }      }, false).onClose(() -> {        try {          mutedClose(connection, statement, resultSet);        } catch (Exception e) {          LOGGER.error(e.getMessage());        }      });    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }  @Override",getAll
2351,"  void <extra_id_0>() {    var playerDetails = new PlayerDetails(""john@wayne.com"", ""000-000"", ""03432534543"");    mongoEventLog.prizeError(playerDetails, 1000);    assertEquals(1, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.prizeError(playerDetails, 1000);    assertEquals(2, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketDidNotWin(playerDetails);    assertEquals(3, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketDidNotWin(playerDetails);    assertEquals(4, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketSubmitError(playerDetails);    assertEquals(5, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketSubmitError(playerDetails);    assertEquals(6, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketSubmitted(playerDetails);    assertEquals(7, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketSubmitted(playerDetails);    assertEquals(8, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketWon(playerDetails, 1000);    assertEquals(9, mongoEventLog.getEventsCollection().countDocuments());    mongoEventLog.ticketWon(playerDetails, 1000);    assertEquals(10, mongoEventLog.getEventsCollection().countDocuments());  }",testFundTransfers
70,"  void <extra_id_0>() {    armsDealer.registerDeleted(weapon1);    armsDealer.registerDeleted(weapon2);    assertEquals(2, context.get(UnitActions.DELETE.getActionValue()).size());    verifyNoMoreInteractions(weaponDatabase);  }  @Test",shouldSaveDeletedStudentWithoutWritingToDb
174,"  private static void <extra_id_0>(DataSource dataSource) throws Exception {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.CREATE_SCHEMA_SQL);    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }  /**   * Get database.   *   * @return h2 datasource   */",createSchema
2651,  public void <extra_id_0>() {    DomainEvent domainEvent;    while ((domainEvent = eventJournal.readNext()) != null) {      domainEvent.process();    }  },recover
1032,"  public String <extra_id_0>() {    return ""booking a Hotel"";  }  @Override",getName
2533,  void <extra_id_0>();,drink
862,"  public void <extra_id_0>(Object data, SelectionKey key) {    var pendingWrites = this.channelToPendingWrites.get(key.channel());    if (pendingWrites == null) {      synchronized (this.channelToPendingWrites) {        pendingWrites = this.channelToPendingWrites.get(key.channel());        if (pendingWrites == null) {          pendingWrites = new ConcurrentLinkedQueue<>();          this.channelToPendingWrites.put(key.channel(), pendingWrites);        }      }    }    pendingWrites.add(data);    reactor.changeOps(key, SelectionKey.OP_WRITE);  }",write
3365,"  private void <extra_id_0>(Order order, List<Exception> l) throws Exception {    if (!l.isEmpty()) {      if (DatabaseUnavailableException.class.isAssignableFrom(l.get(0).getClass())) {        LOG.debug(ORDER_ID + ERROR_CONNECTING_MSG_SVC            + ""(Payment Failure msg), trying again.."", order.id);      } else {        LOG.debug(ORDER_ID + "": Error in creating Payment Failure""            + "" message request.."", order.id);      }      throw l.remove(0);    }    if (!order.messageSent.equals(MessageSent.PAYMENT_FAIL)        && !order.messageSent.equals(MessageSent.PAYMENT_SUCCESSFUL)) {      var requestId = messagingService.receiveRequest(0);      order.messageSent = MessageSent.PAYMENT_FAIL;      LOG.info(ORDER_ID + "": Payment Failure message sent successfully,""          + REQUEST_ID, order.id, requestId);    }  }",handlePaymentFailureRetryOperation
369,  void <extra_id_0>() {    final var strategy = mock(DragonSlayingStrategy.class);    final var dragonSlayer = new DragonSlayer(strategy);    dragonSlayer.goToBattle();    verify(strategy).execute();    verifyNoMoreInteractions(strategy);  }  /**   * Verify if the dragon slayer uses the new strategy during battle after a change of strategy.   */  @Test,testGoToBattle
3098,        protected void <extra_id_0>() {          bind(Tobacco.class).to(tobaccoClass);        }      });,configure
919,"  public void <extra_id_0>() throws InterruptedException {    LOGGER.info(""{} begin"", name);    Thread.sleep(readingTime);    LOGGER.info(""{} finish after reading {}ms"", name, readingTime);  }",read
2889,    String <extra_id_0>() {      return log.get(log.size() - 1).getMessage();    },getLastMessage
1416,  public void <extra_id_0>(WeatherObserver obs) {    observers.remove(obs);  }  /**   * Makes time pass for weather.   */,removeObserver
1720,  void <extra_id_0>() {    this.stub = new FileSelectorStub();    this.loader = new FileLoader();    presenter = new FileSelectorPresenter(this.stub);    presenter.setLoader(loader);  }  /**   * Tests if the Presenter was successfully connected with the View.   */  @Test,setUp
1801,"  public List<Input<int[][]>> <extra_id_0>(int num) {    if (this.data == null) {      return null;    } else {      var divisions = makeDivisions(this.data, num);      var result = new ArrayList<Input<int[][]>>(num);      var rowsDone = 0; //number of rows divided so far      for (var i = 0; i < num; i++) {        var rows = divisions[i];        if (rows != 0) {          var divided = new int[rows][this.data[0].length];          System.arraycopy(this.data, rowsDone, divided, 0, rows);          rowsDone += rows;          var dividedInput = new ArrayInput(divided);          result.add(dividedInput);        } else {          break; //rest of divisions will also be 0        }      }      return result;    }  }",divideData
1006,"  public String <extra_id_0>() {    var roles = Arrays.toString(this.roles.keySet().toArray());    return ""Customer{roles="" + roles + ""}"";  }",toString
885,"  public void <extra_id_0>(AbstractNioChannel channel, Object readObject, SelectionKey key) {    /*     * As this handler is attached with both TCP and UDP channels we need to check whether the data     * received is a ByteBuffer (from TCP channel) or a DatagramPacket (from UDP channel).     */    if (readObject instanceof ByteBuffer) {      doLogging((ByteBuffer) readObject);      sendReply(channel, key);    } else if (readObject instanceof DatagramPacket) {      var datagram = (DatagramPacket) readObject;      doLogging(datagram.getData());      sendReply(channel, datagram, key);    } else {      throw new IllegalStateException(""Unknown data received"");    }  }",handleChannelRead
454,"  public static void <extra_id_0>(String[] args) {    var callsCount = new CallsCount();    var human = new BarCustomer(""young human"", 2, callsCount);    var dwarf = new BarCustomer(""dwarf soldier"", 4, callsCount);    var executorService = Executors.newFixedThreadPool(2);    executorService.execute(() -> makeServiceCalls(human, callsCount));    executorService.execute(() -> makeServiceCalls(dwarf, callsCount));    executorService.shutdown();    try {      if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {        executorService.shutdownNow();      }    } catch (InterruptedException e) {      executorService.shutdownNow();    }  }  /**   * Make calls to the bartender.   */",main
2347,"  public static LotteryTicket <extra_id_0>() {    return createLotteryTicket(""foo@bar.com"", ""12231-213132"", ""+99324554"", Set.of(1, 2, 3, 4));  }  /**   * @return lottery ticket   */",createLotteryTicket
645,"  void <extra_id_0>() {    final var serviceNames = List.of(""jndi/serviceA"", ""jndi/serviceB"");    for (final var serviceName : serviceNames) {      final var service = ServiceLocator.getService(serviceName);      assertNotNull(service);      assertEquals(serviceName, service.getName());      assertTrue(service.getId() > 0); // The id is generated randomly, but the minimum value is '1'      assertSame(service, ServiceLocator.getService(serviceName));    }  }",testServiceCache
208,"  public void <extra_id_0>(Book book) throws BookDuplicateException {    if (collection.containsKey(book.getId())) {      throw new BookDuplicateException(""Duplicated book with id: "" + book.getId());    }    // add copy of the book    collection.put(book.getId(), new Book(book));  }  /**   * Updates book in collection only if client has modified the latest version of the book.   */",add
3155,  private static void <extra_id_0>(CustomerDao customerDao) throws Exception {    for (var customer : generateSampleCustomers()) {      customerDao.add(customer);    }  }  /**   * Generate customers.   *   * @return list of customers.   */,addCustomers
1557,  static void <extra_id_0>() {    mapper = new FieldJsonMapper();  }  @Test,setUp
3157,  void <extra_id_0>() {    dao = new InMemoryCustomerDao();    assertTrue(dao.add(CUSTOMER));  }  /**   * Represents the scenario when the DAO operations are being performed on a non existent   * customer.   */  @Nested,setUp
1766,  public static void <extra_id_0>(String[] args) {    var app = new App();    app.run();  }  @Override,main
3230,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""Librarian begins their work."");    // Defining genre book functions    Book.AddAuthor fantasyBookFunc = Book.builder().withGenre(Genre.FANTASY);    Book.AddAuthor horrorBookFunc = Book.builder().withGenre(Genre.HORROR);    Book.AddAuthor scifiBookFunc = Book.builder().withGenre(Genre.SCIFI);    // Defining author book functions    Book.AddTitle kingFantasyBooksFunc = fantasyBookFunc.withAuthor(""Stephen King"");    Book.AddTitle kingHorrorBooksFunc = horrorBookFunc.withAuthor(""Stephen King"");    Book.AddTitle rowlingFantasyBooksFunc = fantasyBookFunc.withAuthor(""J.K. Rowling"");    // Creates books by Stephen King (horror and fantasy genres)    Book shining = kingHorrorBooksFunc.withTitle(""The Shining"")            .withPublicationDate(LocalDate.of(1977, 1, 28));    Book darkTower = kingFantasyBooksFunc.withTitle(""The Dark Tower: Gunslinger"")            .withPublicationDate(LocalDate.of(1982, 6, 10));    // Creates fantasy books by J.K. Rowling    Book chamberOfSecrets = rowlingFantasyBooksFunc.withTitle(""Harry Potter and the Chamber of Secrets"")            .withPublicationDate(LocalDate.of(1998, 7, 2));    // Create sci-fi books    Book dune = scifiBookFunc.withAuthor(""Frank Herbert"")            .withTitle(""Dune"")            .withPublicationDate(LocalDate.of(1965, 8, 1));    Book foundation = scifiBookFunc.withAuthor(""Isaac Asimov"")            .withTitle(""Foundation"")            .withPublicationDate(LocalDate.of(1942, 5, 1));    LOGGER.info(""Stephen King Books:"");    LOGGER.info(shining.toString());    LOGGER.info(darkTower.toString());    LOGGER.info(""J.K. Rowling Books:"");    LOGGER.info(chamberOfSecrets.toString());    LOGGER.info(""Sci-fi Books:"");    LOGGER.info(dune.toString());    LOGGER.info(foundation.toString());  }",main
600,"  void <extra_id_0>() throws Exception {    final var wizards = Set.of(        mock(Wizard.class),        mock(Wizard.class),        mock(Wizard.class)    );    final var spellbook = mock(Spellbook.class);    when(spellbook.getWizards()).thenReturn(wizards);    final var spellbookDao = mock(SpellbookDao.class);    final var wizardDao = mock(WizardDao.class);    final var spell = mock(Spell.class);    when(spell.getSpellbook()).thenReturn(spellbook);    final var spellName = ""spellname"";    final var spellDao = mock(SpellDao.class);    when(spellDao.findByName(spellName)).thenReturn(spell);    final var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    verifyNoInteractions(wizardDao, spellbookDao, spellDao, spellbook);    final var result = service.findWizardsWithSpell(spellName);    verify(spellDao).findByName(spellName);    verify(spellbook).getWizards();    assertNotNull(result);    assertEquals(3, result.size());    verifyNoMoreInteractions(wizardDao, spellbookDao, spellDao);  }",testFindWizardsWithSpell
3778,"  void <extra_id_0>() {    assertThrows(IllegalArgumentException.class, () -> new Hero.Builder(null, ""Sir without a job""));  }  /**   * Test if we get the expected exception when trying to create a hero without a name   */  @Test",testMissingProfession
2306,  public Set<Integer> <extra_id_0>() {    return Collections.unmodifiableSet(numbers);  }  /**   * Get numbers as string.   *   * @return numbers as comma separated string   */,getNumbers
135,      void <extra_id_0>() throws Exception {        assertFalse(dao.getById(getNonExistingRoomId()).isPresent());      }    }    /**     * Represents a scenario where DAO operations are being performed on an already existing     * room.     */    @Nested,retrieveShouldReturnNoRoom
1829,"  void <extra_id_0>() {    var rows = 10;    var columns = 10;    var inputMatrix = new int[rows][columns];    var rand = new Random();    for (var i = 0; i < rows; i++) {      for (var j = 0; j < columns; j++) {        inputMatrix[i][j] = rand.nextInt(10);      }    }    var i = new ArrayInput(inputMatrix);    var table = i.divideData(4);    var division1 = new int[][]{inputMatrix[0], inputMatrix[1], inputMatrix[2]};    var division2 = new int[][]{inputMatrix[3], inputMatrix[4], inputMatrix[5]};    var division3 = new int[][]{inputMatrix[6], inputMatrix[7]};    var division4 = new int[][]{inputMatrix[8], inputMatrix[9]};    assertTrue(matricesSame(table.get(0).data, division1)        && matricesSame(table.get(1).data, division2)        && matricesSame(table.get(2).data, division3)        && matricesSame(table.get(3).data, division4));  }",divideDataTest
2523,"  public String <extra_id_0>() {    return ""an orcish "" + weaponType;  }",toString
2375,"  void <extra_id_0>(){    // new instance of an identity map(not connected to any DB here)    IdentityMap idMap = new IdentityMap();    // Dummy person instances    Person person1 = new Person(11, ""Michael"", 27304159);    Person person2 = new Person(22, ""John"", 42273631);    Person person3 = new Person(33, ""Arthur"", 27489171);    Person person4 = new Person(44, ""Finn"", 20499078);    // id already in map    Person person5 = new Person(11, ""Michael"", 40599078);    // All records go into identity map    idMap.addPerson(person1);    idMap.addPerson(person2);    idMap.addPerson(person3);    idMap.addPerson(person4);    idMap.addPerson(person5);    // Test no duplicate in our Map.    Assertions.assertEquals(4,idMap.size(),""Size of the map is incorrect"");    // Test record not updated by add method.    Assertions.assertEquals(27304159,idMap.getPerson(11).getPhoneNum(),""Incorrect return value for phone number"");  }  @Test",addToMap
1539,  public void <extra_id_0>() {    isHappy = true;  }  @Override,makeHappy
1004,  public boolean <extra_id_0>(Role role) {    return Objects.nonNull(roles.remove(role));  }  @Override,remRole
523,  public abstract void <extra_id_0>(Long id);  /**   * Get the name of this entity.   *   * @return The name of the entity   */,setId
2216,  void <extra_id_0>() {    gameLoop = null;  }  @Test,tearDown
3326,"  public static void <extra_id_0>(String[] args) {    final var player = GameObject.createPlayer();    final var npc = GameObject.createNpc();    LOGGER.info(""Player Update:"");    player.update(KeyEvent.KEY_LOCATION_LEFT);    LOGGER.info(""NPC Update:"");    npc.demoUpdate();  }",main
1843,  public Task <extra_id_0>() throws InterruptedException {    return queue.take();  },getTask
1218,      public void <extra_id_0>(final MouseEvent e) {        loadFromMod();      }    });,mouseClicked
667,  Size <extra_id_0>();,getSize
619,"  public void <extra_id_0>(Command s, int index) {    dispatcher.performAction(s, index);  }  /**   * Update view. This is a simple implementation, in fact, View can be implemented in a concrete   * way   *   * @param giantModel the giant model   */",setCommand
771,  public void <extra_id_0>() {    isDrunk = true;  },getDrink
2284,"  public void <extra_id_0>(PlayerDetails details, int prizeAmount) {    LOGGER.error(""Lottery ticket for {} has won! Unfortunately the bank credit transfer of""        + "" {} failed."", details.getEmail(), prizeAmount);  }  @Override",prizeError
2071,"  private Health <extra_id_0>() {    Integer result = healthCheckRepository.checkHealth();    boolean databaseIsUp = result != null && result == 1;    LOGGER.info(""Health check result: {}"", databaseIsUp);    return databaseIsUp        ? Health.up().withDetail(""database"", ""reachable"").build()        : Health.down().withDetail(""database"", ""unreachable"").build();  }  /**   * Evicts all entries from the health check cache. This is scheduled to run at a fixed rate   * defined in the application properties.   */  @Scheduled(fixedRateString = ""${health.check.cache.evict.interval:60000}"")",check
387,"  void <extra_id_0>() {    final var mammoth = new Mammoth();    mammoth.observe();    assertEquals(""The mammoth is calm and peaceful."", appender.getLastMessage());    assertEquals(1, appender.getLogSize());    mammoth.timePasses();    assertEquals(""The mammoth gets angry!"", appender.getLastMessage());    assertEquals(2, appender.getLogSize());    mammoth.observe();    assertEquals(""The mammoth is furious!"", appender.getLastMessage());    assertEquals(3, appender.getLogSize());    mammoth.timePasses();    assertEquals(""The mammoth calms down."", appender.getLastMessage());    assertEquals(4, appender.getLogSize());    mammoth.observe();    assertEquals(""The mammoth is calm and peaceful."", appender.getLastMessage());    assertEquals(5, appender.getLogSize());  }  /**   * Verify if {@link Mammoth#toString()} gives the expected value   */  @Test",testTimePasses
3060,"  public static void <extra_id_0>(DataSource dataSource) throws SQLException {    TestUtils.executeSQL(App.CREATE_SCHEMA_SQL, dataSource);  }",createSchema
1228,"  public void <extra_id_0>(final boolean value) {    LOGGER.info(""Change album isClassical from {} to {}"",            selectedAlbum.isClassical(), value);    selectedAlbum.setClassical(value);  }  /**   * get is classical of the selected album.   *   * @return is the album classical.   */",setIsClassical
2360,  public Person <extra_id_0>(int personNationalId) throws IdNotFoundException {    Optional<Person> elem = personList.stream().filter(p -> p.getPersonNationalId() == personNationalId).findFirst();    if (elem.isEmpty()) {      throw new IdNotFoundException(ID_STR + personNationalId + NOT_IN_DATA_BASE);    }    LOGGER.info(elem.get().toString());    return elem.get();  }  @Override,find
3824,  public Castle <extra_id_0>() {    return new ElfCastle();  }  @Override,createCastle
31,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
3868,"  public Product <extra_id_0>() {    var product = new Product();    var productTitle = informationClient.getProductTitle();    var productInventory = inventoryClient.getProductInventories();    //Fallback to error message    product.setTitle(requireNonNullElse(productTitle, ""Error: Fetching Product Title Failed""));    //Fallback to default error inventory    product.setProductInventories(requireNonNullElse(productInventory, -1));    return product;  }",getProduct
1193,"  void <extra_id_0>(){    View view = new View();    view.createView();    boolean isClassical = true;    String testComposer = ""testComposer"";    view.getChkClassical().setSelected(isClassical);    view.getTxtComposer().setText(testComposer);    view.saveToMod();    view.loadFromMod();    assertTrue(view.getModel().getIsClassical());    assertEquals(testComposer, view.getModel().getComposer());  }  @Test",testSave_setClassicalAndComposer
426,"  void <extra_id_0>() {    var user = new User(1, ""janedoe"", ""iloveyou"");    assertNotEquals(""42"", user);  }  @Test",testEquals1
3834,  void <extra_id_0>(Hayes hayes);,visit
2841,"  final FlamingAsteroid <extra_id_0>() {    return new FlamingAsteroid(1, 2, 3, 4);  }  /**   * Test the constructor parameters   */  @Test",getTestedObject
3434,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObjectNoPaymentException3();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoException3
3202,"  void <extra_id_0>() throws Exception {    HttpServletRequest mockReq = Mockito.mock(HttpServletRequest.class);    HttpServletResponse mockResp = Mockito.mock(HttpServletResponse.class);    RequestDispatcher mockDispatcher = Mockito.mock(RequestDispatcher.class);    StringWriter stringWriter = new StringWriter();    PrintWriter printWriter = new PrintWriter(stringWriter);    when(mockResp.getWriter()).thenReturn(printWriter);    when(mockReq.getRequestDispatcher(destination)).thenReturn(mockDispatcher);    AppServlet curServlet = new AppServlet();    curServlet.doGet(mockReq, mockResp);    verify(mockReq, times(1)).getRequestDispatcher(destination);    verify(mockDispatcher).forward(mockReq, mockResp);  }  @Test",testDoGet
3507,"  public void <extra_id_0>(Request req) {    req.markHandled();    LOGGER.info(""{} handling request \""{}\"""", name(), req);  }  @Override",handle
1771,  public boolean <extra_id_0>(@NonNull Lockable lockable) {    if (lockable.lock(this)) {      instruments.add(lockable);      return true;    }    return false;  }  /** Terminates the Creature and unlocks all of the Lockable that it posses. */,acquire
3853,"  default Stream<Part> <extra_id_0>() {    return children(Property.PARTS.toString(), Part::new);  }",getParts
2888,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2049,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[] {}));  },shouldExecuteApplicationWithoutException
2057,"  void <extra_id_0>() {    // Given    healthChecker.shutdown(); // To trigger the scenario    // When/Then    boolean containsMessage = doesLogContainMessage(healthChecker::shutdown);    if (!containsMessage) {      List<ch.qos.logback.classic.spi.ILoggingEvent> events = listAppender.list;      LOGGER.info(""Logged events:"");      for (ch.qos.logback.classic.spi.ILoggingEvent event : events) {        LOGGER.info(event.getMessage());      }    }    assertTrue(containsMessage, ""Expected log message not found"");  }  /**   * Verifies that {@link AsynchronousHealthChecker#awaitTerminationWithTimeout} returns true even   * if the executor service does not terminate completely within the specified timeout.   *   * @throws NoSuchMethodException if the private method cannot be accessed.   * @throws InvocationTargetException if the private method throws an exception.   * @throws IllegalAccessException if the private method is not accessible.   * @throws InterruptedException if the thread is interrupted while waiting for the executor   *     service to terminate.   */  @Test",whenShutdownExecutorDoesNotTerminateAfterCanceling_LogsErrorMessage
2170,  private void <extra_id_0>(TreeNode<T> left) {    this.left = left;  },setLeft
2608,"  void <extra_id_0>(String request, String displayMessage) {    final var frontController = new FrontController();    assertEquals(0, appender.getLogSize());    frontController.handleRequest(request);    assertEquals(displayMessage, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testDisplay
3381,"  void <extra_id_0>() throws Exception {    //rest is successful    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c =        new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration, queueTime, queueTaskTime,            paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",messagingDatabaseUnavailableCasePaymentFailure
14,  public void <extra_id_0>() {    this.isRunning = false;    this.isSuspended = true;  },stopMe
6,"  void <extra_id_0>() {    final var fish = new RainbowFishV2(""name"", 1, 2, 3, false, true, false);    assertEquals(""name"", fish.getName());    assertEquals(1, fish.getAge());    assertEquals(2, fish.getLengthMeters());    assertEquals(3, fish.getWeightTons());    assertFalse(fish.isSleeping());    assertTrue(fish.isHungry());    assertFalse(fish.isAngry());  }",testValues
115,"  void <extra_id_0>() {    var c1 = new Candy(""green jelly"", ""jelly"", Type.CRUSHABLE_CANDY, 5);    var c2 = new Candy(""purple candy"", ""candy"", Type.CRUSHABLE_CANDY, 5);    var matrix = new Cell[4][4];    matrix[0][0] = new Cell(c1, 0, 0);    matrix[1][0] = new Cell(c2, 0, 1);    matrix[1][0].crush(new CellPool(5), matrix);    assertEquals(""green jelly"", matrix[1][0].candy.name);  }",crushTest
392,"  public void <extra_id_0>() {    LOGGER.info(""{} is furious!"", mammoth);  }  @Override",observe
3329,"  public void <extra_id_0>() {    inputComponent.update(this, 0);    physicComponent.update(this);    graphicComponent.update(this);  }  /**   * Updates the three components for objects based on key events.   *   * @param e key event from the player.   */",demoUpdate
655,  public boolean <extra_id_0>(T t) {    return leafComponents.stream().anyMatch(comp -> comp.test(t));  },test
3769,  long <extra_id_0>(int value);,doRemoteFunction
3029,  Optional<Customer> <extra_id_0>(String name) throws SQLException;,findByName
3651,  public int <extra_id_0>(int wizard) {    return wizards[wizard].getAgility();  },getAgility
508,  public DataType <extra_id_0>() {    return type;  },getType
1499,  void <extra_id_0>() {    albumPage.navigateToPage();  }  @Test,setUp
538,  public Long <extra_id_0>() {    return id;  },getId
807,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2631,  public String <extra_id_0>() {    return name;  },toString
1605,"  void <extra_id_0>() {	bvm.setSelectedBook(testBook);    assertNotNull(bvm.getSelectedBook());    assertEquals(testBook.toString(), bvm.getSelectedBook().toString());    assertTrue(true, bvm.getSelectedBook().toString());  }  @Test",testSelectedData
192,"  private void <extra_id_0>(Connection connection, PreparedStatement statement, ResultSet resultSet)      throws Exception {    try {      resultSet.close();      statement.close();      connection.close();    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }",mutedClose
3795,  void <extra_id_0>() {    rowingBoat.row();  },row
3203,"  void <extra_id_0>() throws Exception {    HttpServletRequest mockReq = Mockito.mock(HttpServletRequest.class);    HttpServletResponse mockResp = Mockito.mock(HttpServletResponse.class);    StringWriter stringWriter = new StringWriter();    PrintWriter printWriter = new PrintWriter(stringWriter);    when(mockResp.getWriter()).thenReturn(printWriter);    AppServlet curServlet = new AppServlet();    curServlet.doPost(mockReq, mockResp);    printWriter.flush();    assertTrue(stringWriter.toString().contains(msgPartOne + "" Post "" + msgPartTwo));  }  @Test",testDoPost
2403,  public int <extra_id_0>() {    return leftExpression.interpret() - rightExpression.interpret();  }  @Override,interpret
1224,"  public void <extra_id_0>(final String value) {    LOGGER.info(""Change album title from {} to {}"",            selectedAlbum.getTitle(), value);    selectedAlbum.setTitle(value);  }  /**   * get the artist of selected album.   *   * @return the artist of selected album.   */",setTitle
1552,"  private String <extra_id_0>(Video video, Field declaredField) throws IllegalAccessException {    declaredField.setAccessible(true);    var value = declaredField.get(video);    if (declaredField.get(video) instanceof Integer) {      return ""\"""" + declaredField.getName() + ""\"""" + "": "" + value;    }    return ""\"""" + declaredField.getName() + ""\"""" + "": "" + ""\"""" + value.toString() + ""\"""";  }",getString
3099,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1323,"  public String <extra_id_0>() {    var builder = new StringBuilder();    if (name != null) {      builder.append(""Player: "").append(name).append('');    }    if (type != null) {      builder.append(""Character type: "").append(type.name()).append('');    }    builder.append(""Stats:"");    for (var stat : Stats.values()) {      var value = this.get(stat);      if (value == null) {        continue;      }      builder.append("" - "").append(stat.name()).append(':').append(value).append('');    }    return builder.toString();  }",toString
2422,  void <extra_id_0>();,render
810,"  public static void <extra_id_0>(String[] args) throws Exception {    try (var ignored = new SlidingDoor()) {      LOGGER.info(""Walking in."");    }    try (var ignored = new TreasureChest()) {      LOGGER.info(""Looting contents."");    }  }",main
2052,"  void <extra_id_0>() throws ExecutionException, InterruptedException {    // Given    Supplier<Health> healthSupplier = () -> Health.up().build();    // When    CompletableFuture<Health> healthFuture = healthChecker.performCheck(healthSupplier, 3);    // Then    Health health = healthFuture.get();    assertEquals(Health.up().build(), health);  }  /**   * Tests that the {@link performCheck()} method returns a healthy health status when the health   * supplier returns a healthy status.   *   * <p>Given a health supplier that returns a healthy status, the test verifies that the {@link   * performCheck()} method returns a health object with a status of UP.   */  @Test",whenPerformCheck_thenCompletesNormally
1529,  public static King <extra_id_0>() {    var king = new King();    king.makeHappy();    return king;  }  /**   * Method to create a happy and drunk king.   *   * @return A drunk and happy {@link com.iluwatar.objectmother.King}.   */,createHappyKing
2964,    Double <extra_id_0>();  }  /**   * Use this interface whenever you want to provide the product Cost in your DTO.   */,getPrice
2549,"  private void <extra_id_0>(Weapon weapon, Class<?> clazz) {    assertTrue(clazz.isInstance(weapon), ""Weapon must be an object of: "" + clazz.getName());  }",verifyWeapon
2919,"  public void <extra_id_0>() {    LOGGER.info(""update AI component"");  }  @Override",update
3609,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(5000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var result = new Object();      when(task.call()).thenAnswer(i -> {        Thread.sleep(1500);        return result;      });      final var asyncResult = executor.startProcess(task, callback);      assertNotNull(asyncResult);      assertFalse(asyncResult.isCompleted());      verifyNoMoreInteractions(callback);      try {        asyncResult.getValue();        fail(""Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task"");      } catch (IllegalStateException e) {        assertNotNull(e.getMessage());      }      // Our task should only execute once, but it can take a while ...      verify(task, timeout(3000).times(1)).call();      verify(callback, timeout(3000).times(1)).onComplete(eq(result), optionalCaptor.capture());      final var optionalException = optionalCaptor.getValue();      assertNotNull(optionalException);      assertFalse(optionalException.isPresent());      // Prevent timing issues, and wait until the result is available      asyncResult.await();      assertTrue(asyncResult.isCompleted());      verifyNoMoreInteractions(task, callback);      // ... and the result should be exactly the same object      assertSame(result, asyncResult.getValue());    });  }  /**   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)} when a   * task takes a while to execute, while waiting on the result using {@link   * ThreadAsyncExecutor#endProcess(AsyncResult)}   */  @Test",testLongRunningTaskWithCallback
2473,  static <E> List<E> <extra_id_0>(Iterable<E> iterable) {    var copy = new ArrayList<E>();    iterable.forEach(copy::add);    return copy;  },copyToList
1980,"  static List<Object[]> <extra_id_0>() {    return List.of(        new Object[]{new NameFilter(), PERFECT_ORDER, """"},        new Object[]{new NameFilter(), WRONG_NAME, ""Invalid name!""},        new Object[]{new NameFilter(), WRONG_CONTACT, """"},        new Object[]{new NameFilter(), WRONG_ADDRESS, """"},        new Object[]{new NameFilter(), WRONG_DEPOSIT, """"},        new Object[]{new NameFilter(), WRONG_ORDER, """"},        new Object[]{new ContactFilter(), PERFECT_ORDER, """"},        new Object[]{new ContactFilter(), WRONG_NAME, """"},        new Object[]{new ContactFilter(), WRONG_CONTACT, ""Invalid contact number!""},        new Object[]{new ContactFilter(), WRONG_ADDRESS, """"},        new Object[]{new ContactFilter(), WRONG_DEPOSIT, """"},        new Object[]{new ContactFilter(), WRONG_ORDER, """"},        new Object[]{new AddressFilter(), PERFECT_ORDER, """"},        new Object[]{new AddressFilter(), WRONG_NAME, """"},        new Object[]{new AddressFilter(), WRONG_CONTACT, """"},        new Object[]{new AddressFilter(), WRONG_ADDRESS, ""Invalid address!""},        new Object[]{new AddressFilter(), WRONG_DEPOSIT, """"},        new Object[]{new AddressFilter(), WRONG_ORDER, """"},        new Object[]{new DepositFilter(), PERFECT_ORDER, """"},        new Object[]{new DepositFilter(), WRONG_NAME, """"},        new Object[]{new DepositFilter(), WRONG_CONTACT, """"},        new Object[]{new DepositFilter(), WRONG_ADDRESS, """"},        new Object[]{new DepositFilter(), WRONG_DEPOSIT, ""Invalid deposit number!""},        new Object[]{new DepositFilter(), WRONG_ORDER, """"},        new Object[]{new OrderFilter(), PERFECT_ORDER, """"},        new Object[]{new OrderFilter(), WRONG_NAME, """"},        new Object[]{new OrderFilter(), WRONG_CONTACT, """"},        new Object[]{new OrderFilter(), WRONG_ADDRESS, """"},        new Object[]{new OrderFilter(), WRONG_DEPOSIT, """"},        new Object[]{new OrderFilter(), WRONG_ORDER, ""Invalid order!""}    );  }  @ParameterizedTest  @MethodSource(""getTestData"")",getTestData
3879,"  public void <extra_id_0>() throws InterruptedException {    requests.put(() ->        logger.info(""{} has started to roam in the wastelands."", name())    );  }    /**   * Returns the name of the creature.   * @return the name of the creature.   */",roam
2684,"  void <extra_id_0>() throws UnsupportedAudioFileException, IOException, InterruptedException {    audio.playSound(audio.getAudioStream(""./etc/Bass-Drum-1.wav""), -10.0f);    // test that service is started    assertTrue(audio.isServiceRunning());    // adding a small pause to be sure that the sound is ended    Thread.sleep(5000);    audio.stopService();    // test that service is finished    assertFalse(audio.isServiceRunning());  }  /**   * Test here that the Queue   * @throws UnsupportedAudioFileException when the audio file is not supported    * @throws IOException when the file is not readable   * @throws InterruptedException when the test is interrupted externally   */  @Test",testPlaySound
2397,"  void <extra_id_0>(NumberExpression first, NumberExpression second) {    final var expression = factory.apply(first, second);    assertNotNull(expression);    assertEquals(expectedToString, expression.toString());  }",testToString
2044,              protected List<GarbageCollectorMXBean> <extra_id_0>() {                return Collections.singletonList(garbageCollectorMXBean);              }              @Override,getGarbageCollectorMxBeans
1516,"  public AlbumListPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      LOGGER.error(""An error occurred on navigateToPage."", e);    }    return this;  }  /**   * {@inheritDoc}   */  @Override",navigateToPage
13,"  public void <extra_id_0>() {    isSuspended = false;    LOGGER.info(""Begin to resume BallThread"");  }",resumeMe
401,  void <extra_id_0>();,observe
2577,  int <extra_id_0>();  /**   * Returns threat type.   * @return {@link ThreatType}   */,id
3543,"  void <extra_id_0>() {    var delayedService = new QuickRemoteService();    var delayedServiceCircuitBreaker = new DefaultCircuitBreaker(delayedService, 3000,        1,        2 * 1000 * 1000 * 1000);    var monitoringService = new MonitoringService(delayedServiceCircuitBreaker,null);    //Set time as current time as initially server fails    var response = monitoringService.delayedServiceResponse();    assertEquals(response, ""Quick Service is working"");  }",testQuickRemoteServiceResponse
2906,  void <extra_id_0>(Student student) throws DataMapperException;,update
3350,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase(), new ShippingNotPossibleException());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",shippingNotPossibleCase
2575,"  Filterer<? extends ThreatAwareSystem, ? extends Threat> <extra_id_0>();",filtered
2585,"  public String <extra_id_0>() {    return ""SimpleProbableThreat{""        + ""probability="" + probability        + ""} ""        + super.toString();  }",toString
1625,"  void <extra_id_0>() {    assertThrows(AssertionError.class, () -> Mute.mute(this::methodThrowingException));  }  @Test",muteShouldRethrowUnexpectedExceptionAsAssertionError
2421,  void <extra_id_0>(Store store);,storeChanged
1244,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
2458,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3);    final var last4 = createFluentIterable(integers)        .last(4)        .asList();    assertNotNull(last4);    assertEquals(3, last4.size());    assertEquals(Integer.valueOf(1), last4.get(0));    assertEquals(Integer.valueOf(2), last4.get(1));    assertEquals(Integer.valueOf(3), last4.get(2));  }  @Test",testLastCountLessItems
3087,  protected void <extra_id_0>() {    bind(Tobacco.class).to(RivendellTobacco.class);  },configure
2508,      public E <extra_id_0>() {        return fromIterator.hasNext() ? fromIterator.next() : null;      }    };  }  /**   * Constructors FluentIterable from given iterable.   *   * @return a FluentIterable from a given iterable. Calls the LazyFluentIterable constructor.   */,computeNext
978,  void <extra_id_0>() {    repository.deleteAll();  },cleanup
2983,"  public List<String> <extra_id_0>() {    var classLoader = getClass().getClassLoader();    var file = new File(classLoader.getResource(filename).getFile());    if (isDirty(file.lastModified())) {      LOGGER.info(filename + "" is dirty! Re-fetching file content..."");      try (var br = new BufferedReader(new FileReader(file))) {        return br.lines().collect(Collectors.collectingAndThen(Collectors.toList(), List::copyOf));      } catch (IOException e) {        e.printStackTrace();      }    }    return List.of();  }",fetch
2039,"  void <extra_id_0>() {    // Arrange    Query mockedQuery = mock(Query.class);    when(entityManager.createNativeQuery(""SELECT 1"")).thenReturn(mockedQuery);    when(mockedQuery.getSingleResult()).thenReturn(1);    // Act    Integer healthCheckResult = healthCheckRepository.checkHealth();    // Assert    assertNotNull(healthCheckResult);    assertEquals(1, healthCheckResult);  }  /**   * Test case for the `performTestTransaction()` method.   *   * <p>Asserts that when the `performTestTransaction()` method is called, it successfully executes   * a test transaction.   */  @Test",whenCheckHealth_thenReturnsOne
366,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
172,  private static void <extra_id_0>(HotelDaoImpl dao) throws Exception {    try (var customerStream = dao.getAll()) {      customerStream.forEach((customer) -> LOGGER.info(customer.toString()));    }  },getRoomStatus
8,"  public static void <extra_id_0>(RainbowFishV2 rainbowFish, String filename) throws IOException {    var map = Map.of(        ""name"", rainbowFish.getName(),        ""age"", String.format(""%d"", rainbowFish.getAge()),        LENGTH_METERS, String.format(""%d"", rainbowFish.getLengthMeters()),        WEIGHT_TONS, String.format(""%d"", rainbowFish.getWeightTons()),        ""angry"", Boolean.toString(rainbowFish.isAngry()),        ""hungry"", Boolean.toString(rainbowFish.isHungry()),        ""sleeping"", Boolean.toString(rainbowFish.isSleeping())    );    try (var fileOut = new FileOutputStream(filename);         var objOut = new ObjectOutputStream(fileOut)) {      objOut.writeObject(map);    }  }  /**   * Read V1 RainbowFish from file.   */",writeV2
1667,"  public void <extra_id_0>(Health health) {    this.giant.setHealth(health);  }  @SuppressWarnings(""UnusedReturnValue"")",setHealth
1250,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2206,  void <extra_id_0>() {    gameLoop = null;  }  @Test,tearDown
3478,"  private String <extra_id_0>() {    return        ""It was many and many a year ago,""            + ""In a kingdom by the sea,""            + ""That a maiden there lived whom you may know""            + ""By the name of ANNABEL LEE;""            + ""And this maiden she lived with no other thought""            + ""Than to love and be loved by me.""            + ""I was a child and she was a child,""            + ""In this kingdom by the sea;""            + ""But we loved with a love that was more than love-""            + ""I and my Annabel Lee;""            + ""With a love that the winged seraphs of heaven""            + ""Coveted her and me."";  }",text
2043,  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);    healthIndicator =        spy(            new GarbageCollectionHealthIndicator() {              @Override              protected List<GarbageCollectorMXBean> getGarbageCollectorMxBeans() {                return Collections.singletonList(garbageCollectorMXBean);              }              @Override              protected List<MemoryPoolMXBean> getMemoryPoolMxBeans() {                return Collections.singletonList(memoryPoolMXBean);              }            });    healthIndicator.setMemoryUsageThreshold(0.8);  }  /** Test case to verify that the health status is up when memory usage is low. */  @Test,setUp
3526,"  public static Map<Category, List<Car>> <extra_id_0>(List<Car> cars) {    return cars.stream().collect(Collectors.groupingBy(Car::getCategory));  }  /**   * Method to get all Sedan cars belonging to a group of persons sorted by year of manufacture.   *   * @param persons {@link List} of {@link Person} to be used   * @return {@link List} of {@link Car} to belonging to the group   */",getGroupingOfCarsByCategory
2455,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3, 10, 9, 8);    final var last = createFluentIterable(integers).last();    assertNotNull(last);    assertTrue(last.isPresent());    assertEquals(integers.get(integers.size() - 1), last.get());  }  @Test",testLast
1350,"  public static void <extra_id_0>(final String[] args) {    SpringApplication.run(App.class, args);  }",main
3711,  void <extra_id_0>(MongoDatabase db) {    this.db = db;  }  /**   * Connect to Db. Check th connection   */  @Override,setDb
2069,  public Health <extra_id_0>() {    return checkMemory();  },health
281,"  protected void <extra_id_0>() {    move(0, 0, 20);    playSound(""SKYLAUNCH_SOUND"", 1);    spawnParticles(""SKYLAUNCH_PARTICLE"", 100);  }",activate
2159,"  private static void <extra_id_0>(ItemType itemType) {    LOGGER.info(""------------------------"");    LOGGER.info(""Item Iterator for ItemType "" + itemType + "": "");    var itemIterator = TREASURE_CHEST.iterator(itemType);    while (itemIterator.hasNext()) {      LOGGER.info(itemIterator.next().toString());    }  }",demonstrateTreasureChestIteratorForType
1792,"  protected void <extra_id_0>() {    LOGGER.info(""Steal valuable items"");  }",steal
1266,  private void <extra_id_0>() {    if (fulfillmentAction == null) {      return;    }    fulfillmentAction.run();  }  /**   * Executes the task using the executor in other thread and fulfills the promise returned once the   * task completes either successfully or with an exception.   *   * @param task     the task that will provide the value to fulfill the promise.   * @param executor the executor in which the task should be run.   * @return a promise that represents the result of running the task provided.   */,postFulfillment
3456,"  void <extra_id_0>() throws IllegalArgumentException {    Assertions.assertThrows(IllegalArgumentException.class, () -> new PrinterItem(null, 1, true, true));  }",nullPageSize
710,  public User <extra_id_0>(String userName) {    if (!userName2User.containsKey(userName)) {      return null;    }    return userName2User.get(userName);  }  /**   * Find an account of the user.   *   * @param user in Db   * @return instance of Account of the user   */,findUserByUserName
947,  public void <extra_id_0>(Message msg) {    try {      this.msgQueue.submitMsg(msg);    } catch (Exception e) {      LOGGER.error(e.getMessage());    }  }  /**   * Each TaskGenerator thread will submit all the messages to the Queue. After every message   * submission TaskGenerator thread will sleep for 1 second.   */,submit
3503,"  public void <extra_id_0>(Request req) {    req.markHandled();    LOGGER.info(""{} handling request \""{}\"""", name(), req);  }  @Override",handle
1907,"  void <extra_id_0>() {    final var ringInstance = new RingInstance(null, 1, 1);    ringInstance.setAlive(false);    assertFalse(ringInstance.isAlive());  }",testSetAlive
3536,  public abstract void <extra_id_0>();,execute
191,  private Connection <extra_id_0>() throws Exception {    return dataSource.getConnection();  },getConnection
3521,"  void <extra_id_0>() {    var modelsExpected = Map.of(        Category.CONVERTIBLE, List.of(            new Car(""Buick"", ""Cascada"", 2016, Category.CONVERTIBLE),            new Car(""Chevrolet"", ""Geo Metro"", 1992, Category.CONVERTIBLE)        ),        Category.SEDAN, List.of(            new Car(""Dodge"", ""Avenger"", 2010, Category.SEDAN),            new Car(""Ford"", ""Focus"", 2012, Category.SEDAN)        ),        Category.JEEP, List.of(            new Car(""Jeep"", ""Wrangler"", 2011, Category.JEEP),            new Car(""Jeep"", ""Comanche"", 1990, Category.JEEP))    );    var modelsFunctional = FunctionalProgramming.getGroupingOfCarsByCategory(cars);    var modelsImperative = ImperativeProgramming.getGroupingOfCarsByCategory(cars);    LOGGER.info(""Category "" + modelsFunctional);    assertEquals(modelsExpected, modelsFunctional);    assertEquals(modelsExpected, modelsImperative);  }  @Test",testGetGroupingOfCarsByCategory
2711,"  void <extra_id_0>() {    final var goldMine = new DwarvenGoldmineFacade();    goldMine.startNewDay();    // On the start of a day, all workers should wake up ...    assertTrue(appender.logContains(""Dwarf gold digger wakes up.""));    assertTrue(appender.logContains(""Dwarf cart operator wakes up.""));    assertTrue(appender.logContains(""Dwarven tunnel digger wakes up.""));    // ... and go to the mine    assertTrue(appender.logContains(""Dwarf gold digger goes to the mine.""));    assertTrue(appender.logContains(""Dwarf cart operator goes to the mine.""));    assertTrue(appender.logContains(""Dwarven tunnel digger goes to the mine.""));    // No other actions were invoked, so the workers shouldn't have done (printed) anything else    assertEquals(6, appender.getLogSize());    // Now do some actual work, start digging gold!    goldMine.digOutGold();    // Since we gave the dig command, every worker should be doing it's job ...    assertTrue(appender.logContains(""Dwarf gold digger digs for gold.""));    assertTrue(appender.logContains(""Dwarf cart operator moves gold chunks out of the mine.""));    assertTrue(appender.logContains(""Dwarven tunnel digger creates another promising tunnel.""));    // Again, they shouldn't be doing anything else.    assertEquals(9, appender.getLogSize());    // Enough gold, lets end the day.    goldMine.endDay();    // Check if the workers go home ...    assertTrue(appender.logContains(""Dwarf gold digger goes home.""));    assertTrue(appender.logContains(""Dwarf cart operator goes home.""));    assertTrue(appender.logContains(""Dwarven tunnel digger goes home.""));    // ... and go to sleep. We need well rested workers the next day :)    assertTrue(appender.logContains(""Dwarf gold digger goes to sleep.""));    assertTrue(appender.logContains(""Dwarf cart operator goes to sleep.""));    assertTrue(appender.logContains(""Dwarven tunnel digger goes to sleep.""));    // Every worker should be sleeping now, no other actions allowed    assertEquals(15, appender.getLogSize());  }",testFullWorkDay
1249,"  void <extra_id_0>() {    final var wizards = List.of(        new Wizard(""Gandalf""),        new Wizard(""Dumbledore""),        new Wizard(""Oz""),        new Wizard(""Merlin"")    );    final var proxy = new WizardTowerProxy(new IvoryTower());    wizards.forEach(proxy::enter);    assertTrue(appender.logContains(""Gandalf enters the tower.""));    assertTrue(appender.logContains(""Dumbledore enters the tower.""));    assertTrue(appender.logContains(""Oz enters the tower.""));    assertTrue(appender.logContains(""Merlin is not allowed to enter!""));    assertEquals(4, appender.getLogSize());  }",testEnter
374,  private static <O> O <extra_id_0>(Future<O> future) {    try {      return future.get();    } catch (InterruptedException | ExecutionException e) {      return null;    }  },get
3120,"  void <extra_id_0>() {    var users = List.of(        new User(""Camile"", ""Tough"", false, ""124sad""),        new User(""Marti"", ""Luther"", true, ""42309fd""),        new User(""Kate"", ""Smith"", true, ""if0243"")    );    var fromDtos = userConverter.createFromDtos(userConverter.createFromEntities(users));    assertEquals(users, fromDtos);  }",testCollectionConversion
2211,  void <extra_id_0>() {    gameLoop = null;  }  @Test,tearDown
2454,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3);    final var first4 = createFluentIterable(integers)        .first(4)        .asList();    assertNotNull(first4);    assertEquals(3, first4.size());    assertEquals(integers.get(0), first4.get(0));    assertEquals(integers.get(1), first4.get(1));    assertEquals(integers.get(2), first4.get(2));  }  @Test",testFirstCountLessItems
974,"  void <extra_id_0>() {    var terry = repository.findByName(""Terry"");    repository.delete(terry);    assertEquals(3, repository.count());    assertNull(repository.findByName(""Terry""));  }  @Test",testDelete
627,"  public String <extra_id_0>() {    return String        .format(""Giant %s, The giant looks %s, %s and %s."", name,            model.getHealth(), model.getFatigue(), model.getNourishment());  }",toString
3371,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new PaymentDetailsErrorException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase(new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",paymentNotPossibleCase
2260,  public MongoCollection<Document> <extra_id_0>() {    return countersCollection;  }  @Override,getCountersCollection
735,"  void <extra_id_0>() {    var b = new Bubble(10, 10, 1, 2);    var initialX = b.coordinateX;    var initialY = b.coordinateY;    b.move();    //change in x and y < |2|    assertTrue(b.coordinateX - initialX < 2 && b.coordinateX - initialX > -2);    assertTrue(b.coordinateY - initialY < 2 && b.coordinateY - initialY > -2);  }  @Test",moveTest
1558,"  void <extra_id_0>() throws Exception {    var fields = new String[]{""id"", ""title"", ""length""};    var video = new Video(        2, ""Godzilla Resurgence"", 120,        ""Action & drama movie|"", ""Hideaki Anno"", ""Japanese""    );    var jsonFieldResponse = mapper.toJson(video, fields);    var expectedDetails = ""{\""id\"": 2,\""title\"": \""Godzilla Resurgence\"",\""length\"": 120}"";    Assertions.assertEquals(expectedDetails, jsonFieldResponse);  }",shouldReturnJsonForSpecifiedFieldsInVideo
3597,  public WashingMachineState <extra_id_0>() {    return washingMachineState;  }  /**   * Method responsible for washing if the object is in appropriate state.   */,getWashingMachineState
513,  public Shard <extra_id_0>(final int shardId) {    return shardMap.get(shardId);  }  /**   * Store data in proper shard instance.   *   * @param data new data   * @return id of shard that the data is stored in   */,getShardById
2935,  public void <extra_id_0>(CustomerDto customer) {    customers.add(customer);  }  /**   * Delete customer with given id.   *   * @param customerId delete customer with id {@code customerId}   */,save
102,"  void <extra_id_0>(int timeSoFar, int totalTime) {    var start = System.currentTimeMillis();    var end = System.currentTimeMillis();    while (end - start + timeSoFar < totalTime && continueRound()) {      for (var i = 0; i < this.cells.length; i++) {        var points = 0;        var j = this.cells.length - 1;        while (this.cells[j][i].candy.getType().equals(Type.REWARD_FRUIT)) {          points = this.cells[j][i].candy.getPoints();          this.cells[j][i].crush(pool, this.cells);          handleChange(points);        }      }      for (var i = 0; i < this.cells.length; i++) {        var j = cells.length - 1;        var points = 0;        while (j > 0) {          points = this.cells[j][i].interact(this.cells[j - 1][i], this.pool, this.cells);          if (points != 0) {            handleChange(points);          } else {            j = j - 1;          }        }      }      for (Cell[] cell : this.cells) {        var j = 0;        var points = 0;        while (j < cells.length - 1) {          points = cell[j].interact(cell[j + 1], this.pool, this.cells);          if (points != 0) {            handleChange(points);          } else {            j = j + 1;          }        }      }      end = System.currentTimeMillis();    }  }",round
1014,"  private static Saga <extra_id_0>() {    return Saga.create()        .chapter(""1"")        .chapter(""2"")        .chapter(""3"")        .chapter(""4"");  }",newSaga
3840,"  public void <extra_id_0>(Hayes hayes) {    LOGGER.info(hayes + "" used with Dos configurator."");  }  @Override",visit
3668,  public void <extra_id_0>() {    dbManager.connect();  }  /**   * Initialize caching policy.   *   * @param policy is a {@link CachingPolicy}   */,initDb
969,  void <extra_id_0>() {    repository.deleteAll();  },cleanup
448,"  public int <extra_id_0>(BarCustomer barCustomer) {    var tenantName = barCustomer.getName();    var count = callsCount.getCount(tenantName);    if (count >= barCustomer.getAllowedCallsPerSecond()) {      LOGGER.error(""I'm sorry {}, you've had enough for today!"", tenantName);      return -1;    }    callsCount.incrementCount(tenantName);    LOGGER.debug(""Serving beer to {} : [{} consumed] "", barCustomer.getName(), count + 1);    return getRandomCustomerId();  }",orderDrink
3440,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObjectUnknownException();            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderNoExceptionShortQueueDuration
661,  public AbstractSelector<T> <extra_id_0>() {    return new NegationSelector<>(this);  },not
3553,"  void <extra_id_0>() throws RemoteServiceException {      var obj = new DelayedRemoteService(System.nanoTime()-2000*1000*1000,1);      assertEquals(""Delayed service is working"",obj.call());  }",testParameterizedConstructor
2496,      public Iterator<E> <extra_id_0>() {        return new DecoratingIterator<>(iterable.iterator()) {          int currentIndex;          @Override          public E computeNext() {            if (currentIndex < count && fromIterator.hasNext()) {              var candidate = fromIterator.next();              currentIndex++;              return candidate;            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the last object of this Iterable   */  @Override,iterator
2250,"  public static void <extra_id_0>() {    var host = DEFAULT_HOST;    var port = DEFAULT_PORT;    var path = System.getProperty(""hexagonal.properties.path"");    var properties = new Properties();    if (path != null) {      try (var fin = new FileInputStream(path)) {        properties.load(fin);        host = properties.getProperty(""mongo-host"");        port = Integer.parseInt(properties.getProperty(""mongo-port""));      } catch (Exception e) {        // error occurred, use default properties        e.printStackTrace();      }    }    System.setProperty(""mongo-host"", host);    System.setProperty(""mongo-port"", String.format(""%d"", port));  }",load
824,"  void <extra_id_0>() {    final var e = new BusinessException(""unhandled"");    final var retry = new Retry<String>(        () -> {          throw e;        },        2,        0    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.errors(), hasItem(e));  }  /**   * No exceptions will be ignored, hence final number of attempts should be 1 even if we're asking   * it to attempt twice.   */  @Test",errors
795,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3212,"    void <extra_id_0>(){        HttpServletRequest mockReq = Mockito.mock(HttpServletRequest.class);        ClientPropertiesBean newBean = new ClientPropertiesBean((mockReq));        assertEquals(""DEFAULT_NAME"", newBean.getName());        assertFalse(newBean.isWorldNewsInterest());        assertFalse(newBean.isBusinessInterest());        assertFalse(newBean.isScienceNewsInterest());        assertFalse(newBean.isSportsInterest());    }",testRequestConstructor
225,"  void <extra_id_0>() {    statue.frames = 10;    statue.update();    assertEquals(11, statue.frames);  }  @Test",testUpdateForPendingShoot
2627,  boolean <extra_id_0>();,isEnhanced
3713,  public void <extra_id_0>() {    client.close();  }  /**   * Read data from DB.   *   * @param userId {@link String}   * @return {@link UserAccount}   */  @Override,disconnect
1296,  void <extra_id_0>()      throws InterruptedException {    testWaitingForeverForPromiseToBeFulfilled();    testWaitingSomeTimeForPromiseToBeFulfilled();  },promiseIsFulfilledWithAnExceptionIfTaskThrowsAnException
2930,"  public void <extra_id_0>() {    LOGGER.info(""Update Render Game Component "");    // Process Render.    IntStream.range(0, numEntities)        .filter(i -> renderComponents.length > i && renderComponents[i] != null)        .forEach(i -> renderComponents[i].render());  }",render
2503,"  public <T> FluentIterable<T> <extra_id_0>(Function<? super E, T> function) {    return new LazyFluentIterable<>() {      @Override      public Iterator<T> iterator() {        return new DecoratingIterator<>(null) {          final Iterator<E> oldTypeIterator = iterable.iterator();          @Override          public T computeNext() {            if (oldTypeIterator.hasNext()) {              E candidate = oldTypeIterator.next();              return function.apply(candidate);            } else {              return null;            }          }        };      }    };  }  /**   * Collects all remaining objects of this iteration into a list.   *   * @return a list with all remaining objects of this iteration   */  @Override",map
2649,  public void <extra_id_0>(DomainEvent domainEvent) {    domainEvent.process();    eventJournal.write(domainEvent);  }  /**   * Reset.   */,process
2003,"  private void <extra_id_0>() {    setLayout(new BorderLayout());    var bot = new JPanel();    add(jt.getTableHeader(), BorderLayout.NORTH);    bot.setLayout(new BorderLayout());    bot.add(del, BorderLayout.EAST);    add(bot, BorderLayout.SOUTH);    var jsp = new JScrollPane(jt);    jsp.setPreferredSize(new Dimension(500, 250));    add(jsp, BorderLayout.CENTER);    del.addActionListener(new TargetListener());    var rootPane = SwingUtilities.getRootPane(del);    rootPane.setDefaultButton(del);    setVisible(true);  }",setup
1457,  int <extra_id_0>(T obj);,update
2696,  void <extra_id_0>(E event);,onEvent
1436,  public String <extra_id_0>() {    return sortBy;  },getSortBy
1041,"  public ChapterResult<K> <extra_id_0>(K value) {    LOGGER.info(""The Rollback for a chapter '{}' has been started. ""            + ""The data {} has been rollbacked successfully"",        getName(), value);    return ChapterResult.success(value);  }",rollback
1953,  protected void <extra_id_0>() {    // Not used in Ring instance.  },handleElectionInvokeMessage
98,"  void <extra_id_0>() {    LOGGER.info("""");    for (Cell[] cell : cells) {      for (var j = 0; j < cells.length; j++) {        var candyName = cell[j].candy.name;        if (candyName.length() < 20) {          var totalSpaces = 20 - candyName.length();          LOGGER.info(numOfSpaces(totalSpaces / 2) + cell[j].candy.name              + numOfSpaces(totalSpaces - totalSpaces / 2) + ""|"");        } else {          LOGGER.info(candyName + ""|"");        }      }      LOGGER.info("""");    }    LOGGER.info("""");  }",printGameStatus
126,"      T <extra_id_0>(final Trampoline<T> trampoline) {        return Stream.iterate(trampoline, Trampoline::jump)            .filter(Trampoline::complete)            .findFirst()            .map(Trampoline::result)            .get();      }    };  }}",trampoline
217,"  void <extra_id_0>() {    skeleton.patrollingLeft = false;    skeleton.setPosition(99);    skeleton.update();    assertEquals(100, skeleton.getPosition());    assertTrue(skeleton.patrollingLeft);  }",testUpdateForReverseDirectionFromRightToLeft
3192,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.getAll();      });    }  }  /**   * Delete customer schema for fresh setup per test.   *   * @throws SQLException if any error occurs.   */  @AfterEach",retrievingAllCustomersFailsWithExceptionAsFeedbackToClient
1627,  void <extra_id_0>() {    var stream = new ByteArrayOutputStream();    System.setErr(new PrintStream(stream));    Mute.loggedMute(this::methodThrowingException);    assertTrue(new String(stream.toByteArray()).contains(MESSAGE));  },loggedMuteShouldLogExceptionTraceBeforeSwallowingIt
3854,  default Optional<String> <extra_id_0>() {    return Optional.ofNullable((String) get(Property.TYPE.toString()));  },getType
3151,  private static void <extra_id_0>(DataSource dataSource) throws SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);    }  },deleteSchema
2750,  public void <extra_id_0>(Weekday day) {    if (day == Weekday.TUESDAY) {      notifyObservers(Event.WARSHIPS_APPROACHING);    }    if (day == Weekday.WEDNESDAY) {      notifyObservers(Event.WHITE_WALKERS_SIGHTED);    }  },timePasses
1779,"  void <extra_id_0>(){    Exception e;    try{      throw new LockingException(msg);    }    catch(LockingException ex){      e = ex;    }    Assertions.assertEquals(msg, e.getMessage());  }",testException
2883,"  void <extra_id_0>() {    // Create a normal troll first, but make sure we can spy on it later on.    final var simpleTroll = spy(new SimpleTroll());    // Now we want to decorate the troll to make it stronger ...    final var clubbed = new ClubbedTroll(simpleTroll);    assertEquals(20, clubbed.getAttackPower());    verify(simpleTroll, times(1)).getAttackPower();    // Check if the clubbed troll actions are delegated to the decorated troll    clubbed.attack();    verify(simpleTroll, times(1)).attack();    clubbed.fleeBattle();    verify(simpleTroll, times(1)).fleeBattle();    verifyNoMoreInteractions(simpleTroll);  }",testClubbedTroll
1699,  public void <extra_id_0>(ActionEvent e) {    if (this.ok.equals(e.getSource())) {      this.fileName = this.input.getText();      presenter.fileNameChanged();      presenter.confirmed();    } else if (this.cancel.equals(e.getSource())) {      presenter.cancelled();    }  }  @Override,actionPerformed
1540,  public void <extra_id_0>() {    isHappy = false;  },makeUnhappy
2404,"  public String <extra_id_0>() {    return ""-"";  }",toString
955,"  public LocalContainerEntityManagerFactoryBean <extra_id_0>() {    var entityManager = new LocalContainerEntityManagerFactoryBean();    entityManager.setDataSource(dataSource());    entityManager.setPackagesToScan(""com.iluwatar"");    entityManager.setPersistenceProvider(new HibernatePersistenceProvider());    entityManager.setJpaProperties(jpaProperties());    return entityManager;  }  /**   * Properties for Jpa.   */",entityManagerFactory
3685,"  public void <extra_id_0>(final String userId, final UserAccount userAccount) {    cache.set(userId, userAccount);  }  /**   * Delegate to backing cache store.   * @param userId {@link String}   */",set
1315,"      public void <extra_id_0>(Stats stat, Integer val) {        // Does Nothing      }      @Override",set
1774,"  public synchronized void <extra_id_0>(int damage) {    if (damage < 0) {      throw new IllegalArgumentException(""Damage cannot be a negative number"");    }    if (isAlive()) {      setHealth(getHealth() - damage);      if (!isAlive()) {        kill();      }    }  }  /**   * Checks if the creature is still alive.   *   * @return true of creature is alive.   */",hit
884,"    public void <extra_id_0>() {      try (var socket = new DatagramSocket()) {        for (var i = 0; i < 4; i++) {          var message = clientName + "" - Log request: "" + i;          var bytes = message.getBytes();          var request = new DatagramPacket(bytes, bytes.length, remoteAddress);          socket.send(request);          var data = new byte[1024];          var reply = new DatagramPacket(data, data.length);          socket.receive(reply);          if (reply.getLength() == 0) {            LOGGER.info(""Read zero bytes"");          } else {            LOGGER.info(new String(reply.getData(), 0, reply.getLength()));          }          artificialDelayOf(100);        }      } catch (IOException e1) {        LOGGER.error(""error sending packets"", e1);      }    }  }}",run
123,      public boolean <extra_id_0>() {        return false;      }      @Override,complete
865,"  public NioReactor <extra_id_0>(AbstractNioChannel channel) throws IOException {    var key = channel.getJavaChannel().register(selector, channel.getInterestedOps());    key.attach(channel);    channel.setReactor(this);    return this;  }",registerChannel
2683,  void <extra_id_0>() {    audio = new Audio();  }  /**   * Test here that the playSound method works correctly   * @throws UnsupportedAudioFileException when the audio file is not supported    * @throws IOException when the file is not readable   * @throws InterruptedException when the test is interrupted externally   */  @Test,createAudioInstance
2036,"  private void <extra_id_0>(      CpuHealthIndicator indicator, OperatingSystemMXBean osBean) {    try {      Field osBeanField = CpuHealthIndicator.class.getDeclaredField(""osBean"");      osBeanField.setAccessible(true);      osBeanField.set(indicator, osBean);    } catch (NoSuchFieldException | IllegalAccessException e) {      throw new RuntimeException(e);    }  }  /**   * Tests that the health status is DOWN when the system CPU load is high.   *   * <p>Sets the system CPU load to 90% and mocks the other getters to return appropriate values.   * Executes the health check and asserts that the health status is DOWN and the error message   * indicates high system CPU load.   */  @Test",setOperatingSystemMXBean
908,  void <extra_id_0>() {    appender = new InMemoryAppender(Reader.class);  }  @AfterEach,setUp
3476,"  void <extra_id_0>() {    var res = specializedFinder(""love"", ""heaven"").find(text());    assertEquals(1, res.size());    assertEquals( ""With a love that the winged seraphs of heaven"", res.get(0));  }  @Test",specializedFinderTest
2468,  FluentIterable<E> <extra_id_0>(int count);  /**   * Evaluates the iteration and returns the last element. This is a terminating operation.   *   * @return the last element after the iteration is evaluated   */,first
3849,"  public <T> Stream<T> <extra_id_0>(String key, Function<Map<String, Object>, T> constructor) {    return Stream.ofNullable(get(key))        .filter(Objects::nonNull)        .map(el -> (List<Map<String, Object>>) el)        .findAny()        .stream()        .flatMap(Collection::stream)        .map(constructor);  }  @Override",children
27,"  void <extra_id_0>() {    final var ballItem = new BallItem();    final var ballThread = mock(BallThread.class);    ballItem.setTwin(ballThread);    ballItem.draw();    assertTrue(appender.logContains(""draw""));    assertTrue(appender.logContains(""doDraw""));    verifyNoMoreInteractions(ballThread);    assertEquals(2, appender.getLogSize());  }  @Test",testDoDraw
343,    public BuildStep <extra_id_0>() {      return this;    }    @Override,noMoreAbilities
2204,"  void <extra_id_0>() {    gameLoop.update();    assertEquals(0.01f, gameLoop.controller.getBulletPosition(), 0);  }",testUpdate
1044,  private static ServiceDiscoveryService <extra_id_0>() {    return new ServiceDiscoveryService()        .discover(new OrderService())        .discover(new FlyBookingService())        .discover(new HotelBookingService())        .discover(new WithdrawMoneyService());  },serviceDiscovery
2851,"  void <extra_id_0>() {    testCollision(        new SpaceStationIss(1, 1, 3, 4),        true, false,        false, false    );  }  /**   * Test what happens we collide with MIR   */  @Test",testCollideSpaceStationIss
2531,"  public String <extra_id_0>() {    return ""The orc blacksmith"";  }",toString
905,  void <extra_id_0>() {    appender.stop();  },tearDown
2154,  void <extra_id_0>() {    service = new AsynchronousService(new LinkedBlockingQueue<>());    task = mock(AsyncTask.class);  }  @Test,setUp
624,  void <extra_id_0>(Fatigue fatigue) {    model.setFatigue(fatigue);  }  /**   * Gets nourishment.   *   * @return the nourishment   */,setFatigue
363,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3204,"  void <extra_id_0>() throws Exception {    HttpServletRequest mockReq = Mockito.mock(HttpServletRequest.class);    HttpServletResponse mockResp = Mockito.mock(HttpServletResponse.class);    StringWriter stringWriter = new StringWriter();    PrintWriter printWriter = new PrintWriter(stringWriter);    when(mockResp.getWriter()).thenReturn(printWriter);    AppServlet curServlet = new AppServlet();    curServlet.doPut(mockReq, mockResp);    printWriter.flush();    assertTrue(stringWriter.toString().contains(msgPartOne + "" Put "" + msgPartTwo));  }  @Test",testDoPut
2127,"    public List<CakeLayerInfo> <extra_id_0>() {        List<CakeLayerInfo> result = new ArrayList<>();        for (CakeLayer next : cakeLayerDao.findAll()) {            if (next.getCake() == null) {                result.add(new CakeLayerInfo(next.getId(), next.getName(), next.getCalories()));            }        }        return result;    }    @Override",getAvailableLayers
183,"  public void <extra_id_0>(int roomNumber) throws Exception {    var room = hotelDao.getById(roomNumber);    if (room.isEmpty()) {      throw new Exception(""Room number: "" + roomNumber + "" does not exist"");    } else {      if (room.get().isBooked()) {        throw new Exception(""Room already booked!"");      } else {        var updateRoomBooking = room.get();        updateRoomBooking.setBooked(true);        hotelDao.update(updateRoomBooking);      }    }  }  /**   * Cancel a room booking.   *   * @param roomNumber room to cancel booking   * @throws Exception if any error   */",bookRoom
2020,"  private void <extra_id_0>(Response response) {    LOGGER.info(""Request URI: "" + response.getDetailedCookies());    LOGGER.info(""Response Time: "" + response.getTime() + ""ms"");    LOGGER.info(""Response Status: "" + response.getStatusCode());    LOGGER.info(""Response: "" + response.getBody().asString());  }  /** Test that the health endpoint returns the UP status. */  @Test",logResponseDetails
2778,  public void <extra_id_0>() {    var currentTime = System.currentTimeMillis();    var endTime = currentTime + (eventTime * 1000);    while (System.currentTimeMillis() < endTime) {      try {        Thread.sleep(1000); // Sleep for 1 second.      } catch (InterruptedException e) {        Thread.currentThread().interrupt();        return;      }    }    isComplete = true;    completed();  },run
1912,  void <extra_id_0>() {    assertDoesNotThrow(() -> RingApp.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3242,"  void <extra_id_0>() {    Book.AddTitle daveFantasyBookFunc = Book.builder()      .withGenre(Genre.FANTASY)      .withAuthor(""Dave"");    Book curriedBook = daveFantasyBookFunc.withTitle(""Into the Night"")      .withPublicationDate(LocalDate.of(2002, 4, 7));    assertEquals(expectedBook, curriedBook);  }",functionCreatesExpectedBook
818,  public static void <extra_id_0>(String[] args) throws Exception {    noErrors();    errorNoRetry();    errorWithRetry();    errorWithRetryExponentialBackoff();  },main
47,"  void <extra_id_0>(Commander unit, UnitVisitor mockedVisitor) {    verify(mockedVisitor).visit(eq(unit));  }",verifyVisit
3026,"  void <extra_id_0>() {    try {      var field = FrameBuffer.class.getDeclaredField(""pixels"");      var pixels = new Pixel[FrameBuffer.HEIGHT * FrameBuffer.WIDTH];      Arrays.fill(pixels, Pixel.WHITE);      pixels[0] = Pixel.BLACK;      var frameBuffer = new FrameBuffer();      field.setAccessible(true);      field.set(frameBuffer, pixels);      frameBuffer.clear(0, 0);      assertEquals(Pixel.WHITE, frameBuffer.getPixels()[0]);    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }  @Test",testClear
2195,"  void <extra_id_0>() {    var iter = new BstIterator<>(emptyRoot);    assertFalse(iter.hasNext(), ""hasNext() should return false for empty tree."");  }  @Test",hasNextForEmptyTree
2311,"  public LotteryNumbers <extra_id_0>() {    var numbers = LotteryNumbers.createRandom();    var tickets = getAllSubmittedTickets();    for (var id : tickets.keySet()) {      var lotteryTicket = tickets.get(id);      var playerDetails = lotteryTicket.getPlayerDetails();      var playerAccount = playerDetails.getBankAccount();      var result = LotteryUtils.checkTicketForPrize(repository, id, numbers).getResult();      if (result == LotteryTicketCheckResult.CheckResult.WIN_PRIZE) {        if (wireTransfers.transferFunds(PRIZE_AMOUNT, SERVICE_BANK_ACCOUNT, playerAccount)) {          notifications.ticketWon(playerDetails, PRIZE_AMOUNT);        } else {          notifications.prizeError(playerDetails, PRIZE_AMOUNT);        }      } else if (result == LotteryTicketCheckResult.CheckResult.NO_PRIZE) {        notifications.ticketDidNotWin(playerDetails);      }    }    return numbers;  }  /**   * Begin new lottery round.   */",performLottery
2628,"  public String <extra_id_0>(User user) {    if (UserGroup.isPaid(user)) {      return ""You're amazing "" + user + "". Thanks for paying for this awesome software."";    }    return ""I suppose you can use this software."";  }  /**   * Method that checks if the welcome message to be returned is the enhanced version. For this   * instance as the logic is driven by the user group. This method is a little redundant. However   * can be used to show that there is an enhanced version available.   *   * @return Boolean value {@code true} if enhanced.   */  @Override",getWelcomeMessage
58,  public void <extra_id_0>(Sergeant sergeant) {    // Do nothing  }  /**   * Commander Visitor method.   * @param commander Commander to be visited   */  @Override,visit
1255,  protected void <extra_id_0>(ILoggingEvent eventObject) {    log.add(eventObject);  },append
2475,  public final Optional<E> <extra_id_0>() {    var resultIterator = first(1).iterator();    return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();  }  /**   * Can be used to collect objects from the Iterable. Is a terminating operation.   *   * @param count defines the number of objects to return   * @return the same FluentIterable with a collection decimated to a maximum of 'count' first   *     objects.   */  @Override,first
2884,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
750,  boolean <extra_id_0>(Point p) {    return p.coordinateX >= this.coordinateX - this.width / 2        && p.coordinateX <= this.coordinateX + this.width / 2        && p.coordinateY >= this.coordinateY - this.height / 2        && p.coordinateY <= this.coordinateY + this.height / 2;  },contains
1889,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
993,  public long <extra_id_0>() {    return amountToInvest;  },getAmountToInvest
2990,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(10000), () -> {      // Create a new inventory with a limit of 1000 items and put some load on the add method      final var inventory = new Inventory(INVENTORY_SIZE);      final var executorService = Executors.newFixedThreadPool(THREAD_COUNT);      IntStream.range(0, THREAD_COUNT).<Runnable>mapToObj(i -> () -> {        while (inventory.addItem(new Item())) ;      }).forEach(executorService::execute);      // Wait until all threads have finished      executorService.shutdown();      executorService.awaitTermination(5, TimeUnit.SECONDS);      // Check the number of items in the inventory. It should not have exceeded the allowed maximum      final var items = inventory.getItems();      assertNotNull(items);      assertEquals(INVENTORY_SIZE, items.size());      assertEquals(INVENTORY_SIZE, appender.getLogSize());      // ... and check if the inventory size is increasing continuously      IntStream.range(0, items.size())          .mapToObj(i -> appender.log.get(i).getFormattedMessage()              .contains(""items.size()="" + (i + 1)))          .forEach(Assertions::assertTrue);    });  }",testAddItem
2307,"  public String <extra_id_0>() {    return Joiner.on(',').join(numbers);  }  /**   * Generates 4 unique random numbers between 1-20 into numbers set.   */",getNumbersAsString
2554,"  static WeaponFactory <extra_id_0>(Consumer<Builder> consumer) {    var map = new HashMap<WeaponType, Supplier<Weapon>>();    consumer.accept(map::put);    return name -> map.get(name).get();  }",factory
3148,"  public boolean <extra_id_0>(final Customer customer) {    return idToCustomer.replace(customer.getId(), customer) != null;  }  @Override",update
707,  public static synchronized Db <extra_id_0>() {    if (instance == null) {      Db newInstance = new Db();      newInstance.userName2User = new HashMap<>();      newInstance.user2Account = new HashMap<>();      newInstance.itemName2Product = new HashMap<>();      instance = newInstance;    }    return instance;  }  /**   * Seed a user into Db.   *   * @param userName of the user   * @param amount of the user's account   */,getInstance
1396,"  public Collection<Object[]> <extra_id_0>() {    return List.of(        new Object[]{WeatherType.SUNNY, ""The orcs are facing Sunny weather now""},        new Object[]{WeatherType.RAINY, ""The orcs are facing Rainy weather now""},        new Object[]{WeatherType.WINDY, ""The orcs are facing Windy weather now""},        new Object[]{WeatherType.COLD, ""The orcs are facing Cold weather now""});  }  /**   * Create a new test with the given weather and expected response   */",dataProvider
1292,  private void <extra_id_0>() throws InterruptedException {    stopLatch.await();    executor.shutdownNow();  },stop
1533,  void <extra_id_0>();,makeDrunk
722,"  public void <extra_id_0>() {    LOGGER.info(""Insufficient funds: "" + amount + "" of user: "" + userName        + "" for buying item: "" + itemName);  }",show
1628,"  private void <extra_id_0>() {    LOGGER.info(""Executed successfully"");  }",methodNotThrowingAnyException
1639,"  public static void <extra_id_0>(Bank bank, CountDownLatch latch) {    try {      SecureRandom random = new SecureRandom();      Thread.sleep(random.nextInt(1000));      LOGGER.info(""Start transferring..."");      for (int i = 0; i < 1000000; i++) {        bank.transfer(random.nextInt(4), random.nextInt(4), random.nextInt(0, BASE_AMOUNT));      }      LOGGER.info(""Finished transferring."");      latch.countDown();    } catch (InterruptedException e) {      LOGGER.error(e.getMessage());      Thread.currentThread().interrupt();    }  }  /**   * Program entry point.   *   * @param args command line args   */",runner
2662,"  public Account <extra_id_0>() {    var account = new Account(accountNo, owner);    account.setMoney(money);    return account;  }  @Override",copy
3299,"  private void <extra_id_0>(StartingData data) {    started = data.getWhen();    LOGGER.info(""Receiver {} sees application started at {}"", id, started);  }",handleEvent
1123,  private int <extra_id_0>(int parentPos) {    return 2 * parentPos + 2;  }  // value,rightChildIndex
2956,      public Private <extra_id_0>(String name) {        this.name = name;        return this;      }      @Override,setName
3061,"  public static void <extra_id_0>(DataSource dataSource) throws SQLException {    TestUtils.executeSQL(App.DELETE_SCHEMA_SQL, dataSource);  }",deleteSchema
237,"  public static void <extra_id_0>(String[] args) {    try {      var world = new World();      var skeleton1 = new Skeleton(1, 10);      var skeleton2 = new Skeleton(2, 70);      var statue = new Statue(3, 20);      world.addEntity(skeleton1);      world.addEntity(skeleton2);      world.addEntity(statue);      world.run();      Thread.sleep(GAME_RUNNING_TIME);      world.stop();    } catch (InterruptedException e) {      LOGGER.error(e.getMessage());    }  }",main
2149,    public Long <extra_id_0>() throws Exception {      return ap(numberOfElements);    }    /*     * This will be called in context of the main thread where some validations can be done     * regarding the inputs. Such as it must be greater than 0. It's a small computation which can     * be performed in main thread. If we did validated the input in background thread then we pay     * the cost of context switching which is much more than validating it in main thread.     */    @Override,call
1911,"  void <extra_id_0>() {    try {      var instance1 = new RingInstance(null, 1, 1);      var instance2 = new RingInstance(null, 1, 2);      var instance3 = new RingInstance(null, 1, 3);      Map<Integer, Instance> instanceMap = Map.of(1, instance1, 2, instance2, 3, instance3);      var messageManager = new RingMessageManager(instanceMap);      messageManager.sendHeartbeatInvokeMessage(2);      var ringMessage = new Message(MessageType.HEARTBEAT_INVOKE, """");      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      var ringMessageSent = ((Queue<Message>) messageQueueField.get(instance3)).poll();      assertEquals(ringMessageSent.getType(), ringMessage.getType());      assertEquals(ringMessageSent.getContent(), ringMessage.getContent());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Error to access private field."");    }  }",testSendHeartbeatInvokeMessage
1005,"  public <T extends Customer> Optional<T> <extra_id_0>(Role role, Class<T> expectedRole) {    return Optional        .ofNullable(roles.get(role))        .filter(expectedRole::isInstance)        .map(expectedRole::cast);  }  @Override",getRole
2617,"  public void <extra_id_0>() {    LOGGER.info(""Displaying catapults"");  }",display
921,  public Lock <extra_id_0>() {    return readerLock;  }  @Override,readLock
2497,          public E <extra_id_0>() {            if (currentIndex < count && fromIterator.hasNext()) {              var candidate = fromIterator.next();              currentIndex++;              return candidate;            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the last object of this Iterable   */  @Override,computeNext
360,"  public void <extra_id_0>() {    LOGGER.info(""You shoot the dragon with the magical crossbow and it falls dead on the ground!"");  }",execute
805,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
1363,"  void <extra_id_0>() {    appender.stop();  }  /**   * During the tests, the same tree structure will be used, shown below. End points will be   * terminated with the {@link NullNode} instance.   *   * <pre>   * root   * ├── level1_a   * │   ├── level2_a   * │   │   ├── level3_a   * │   │   └── level3_b   * │   └── level2_b   * └── level1_b   * </pre>   */",tearDown
2264,  public void <extra_id_0>() {    ticketsCollection.deleteMany(new Document());  },deleteAll
2457,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3, 10, 9, 8);    final var last4 = createFluentIterable(integers)        .last(4)        .asList();    assertNotNull(last4);    assertEquals(4, last4.size());    assertEquals(Integer.valueOf(3), last4.get(0));    assertEquals(Integer.valueOf(10), last4.get(1));    assertEquals(Integer.valueOf(9), last4.get(2));    assertEquals(Integer.valueOf(8), last4.get(3));  }  @Test",testLastCount
708,"  public void <extra_id_0>(String userName, Double amount) {    User user = new User(userName);    instance.userName2User.put(userName, user);    Account account = new Account(amount);    instance.user2Account.put(user, account);  }  /**   * Seed an item into Db.   *   * @param itemName of the item   * @param price of the item   */",seedUser
985,"  void <extra_id_0>() {    var instance = Role.Borrower.instance();    assertTrue(instance.isPresent());    assertEquals(instance.get().getClass(), BorrowerRole.class);  }",instanceTest
1141,"  public void <extra_id_0>() {    isStopped = true;    try {      queue.put(Message.POISON_PILL);    } catch (InterruptedException e) {      // allow thread to exit      LOGGER.error(""Exception caught."", e);    }  }",stop
2245,"  private String <extra_id_0>(Scanner scanner) {    logger.info(""> "");    return scanner.next();  }",readString
972,  void <extra_id_0>() {    var actuals = repository.findAll();    assertTrue(actuals.containsAll(persons) && persons.containsAll(actuals));  }  @Test,testFindAll
266,"  void <extra_id_0>() {    assertEquals(0, source.accumulateMul(-1, 0, 1));  }  @Test",testAccumulateMul
395,  private void <extra_id_0>(State newState) {    this.state = newState;    this.state.onEnterState();  }  @Override,changeStateTo
1885,"  public void <extra_id_0>(Action action) {    if (party != null) {      LOGGER.info(""{} {}"", this, action);      party.act(this, action);    }  }  @Override",act
3103,  void <extra_id_0>() {    appender = new InMemoryAppender(Tobacco.class);  }  @AfterEach,setUp
1093,    public boolean <extra_id_0>() {      return result == ChapterResult.SUCCESS;    }  }  /**   * result for chapter.   */,isSuccess
2400,  public abstract String <extra_id_0>();,toString
1339,"  void <extra_id_0>() {    assertTimeout(ofMillis(6000), () -> {      final var queue = mock(ItemQueue.class);      final var producer = new Producer(""producer"", queue);      producer.produce();      verify(queue).put(any(Item.class));      verifyNoMoreInteractions(queue);    });  }",testProduce
397,  public void <extra_id_0>() {    this.state.observe();  },observe
2908,"  public static void <extra_id_0>(final String... args) {    /* Create new data mapper for type 'first' */    final var mapper = new StudentDataMapperImpl();    /* Create new student */    var student = new Student(1, ""Adam"", 'A');    /* Add student in respectibe store */    mapper.insert(student);    LOGGER.debug(STUDENT_STRING + student + "", is inserted"");    /* Find this student */    final var studentToBeFound = mapper.find(student.getStudentId());    LOGGER.debug(STUDENT_STRING + studentToBeFound + "", is searched"");    /* Update existing student object */    student = new Student(student.getStudentId(), ""AdamUpdated"", 'A');    /* Update student in respectibe db */    mapper.update(student);    LOGGER.debug(STUDENT_STRING + student + "", is updated"");    LOGGER.debug(STUDENT_STRING + student + "", is going to be deleted"");    /* Delete student in db */    mapper.delete(student);  }",main
260,"  void <extra_id_0>() {    assertEquals(0, arithmetic.mul(-1, 0, 1));  }  @Test",testMul
1148,    public String <extra_id_0>() {      throw poison();    },getBody
3114,"  private static UserDto <extra_id_0>(User user) {    return new UserDto(user.getFirstName(), user.getLastName(), user.isActive(), user.getUserId());  }",convertToDto
334,    Character <extra_id_0>();  }  /**   * Step Builder implementation.   */,build
679,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3857,"  void <extra_id_0>() {    var children = document.children(KEY, DocumentImplementation::new);    assertNotNull(children);    assertEquals(0, children.count());  }  @Test",shouldRetrieveEmptyStreamForNonExistingChildren
1232,"  public void <extra_id_0>() {    LOGGER.info(""Mixing the stew we find: {} potatoes, {} carrots, {} meat and {} peppers"",        numPotatoes, numCarrots, numMeat, numPeppers);  }  /**   * Taste the stew.   */",mix
318,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
894,"  void <extra_id_0>() throws IOException, InterruptedException {    LOGGER.info(""testAppUsingThreadPoolDispatcher start"");    var app = new App(new ThreadPoolDispatcher(2));    app.start();    assertNotNull(app);    var client = new AppClient();    client.start();    assertNotNull(client);    // allow clients to send requests. Artificial delay.    try {      Thread.sleep(2000);    } catch (InterruptedException e) {      LOGGER.error(""sleep interrupted"", e);    }    client.stop();    app.stop();    LOGGER.info(""testAppUsingThreadPoolDispatcher stop"");  }  /**   * Test the application using same thread dispatcher.   *   * @throws IOException          if any I/O error occurs.   * @throws InterruptedException if interrupted while stopping the application.   */  @Test",testAppUsingThreadPoolDispatcher
2482,  public static <E> FluentIterable<E> <extra_id_0>(Iterable<E> iterable) {    var copy = FluentIterable.copyToList(iterable);    return new SimpleFluentIterable<>(copy);  }  @Override,fromCopyOf
1698,  public boolean <extra_id_0>() {    return this.dataDisplayed;  },dataDisplayed
3283,"  void <extra_id_0>() {    //given    final var startingData = new StartingData(LocalDateTime.now());    final var collector = new MessageCollectorMember(""collector"");    //when    collector.accept(startingData);    //then    assertEquals(0, collector.getMessages().size());  }",collectIgnoresMessageFromOtherDataTypes
1505,"  public AlbumPage <extra_id_0>(String artist) {    var artistInputTextField = (HtmlTextInput) page.getElementById(""albumArtist"");    artistInputTextField.setText(artist);    return this;  }  /**   * Selects the select's option value based on the year value given.   *   * @param year the new year value to set   * @return {@link AlbumPage}   */",changeArtist
3401,  public MessageRequest <extra_id_0>(String requestId) {    return data.get(requestId);  },get
1869,"  public String <extra_id_0>() {    return ""Rogue"";  }",toString
591,"  void <extra_id_0>() {    final var entity = this.factory.apply(""name"");    assertNull(entity.getId());    final var expectedId = 1L;    entity.setId(expectedId);    assertEquals(expectedId, entity.getId());  }  @Test",testSetId
1815,"  private void <extra_id_0>(Result<?> data) {    this.master.receiveData(data, this);  }",sendToMaster
2562,"  public void <extra_id_0>(final Consumer consumer) {    var minTimeOut = 5000L;    SecureRandom secureRandom = new SecureRandom();    var randomTimeOut = secureRandom.nextInt(2000);    try {      // this will make the thread sleep from 5-7s.      Thread.sleep(minTimeOut + randomTimeOut);    } catch (InterruptedException e) {      LOGGER.error(""Exception while sleep "", e);      Thread.currentThread().interrupt();    } finally {      consumer.add(number * number);    }  }",delayedSquaring
1105,"  void <extra_id_0>() {    var stringPriorityMessageQueue = new PriorityMessageQueue<>(new String[2]);    var pushMessage = ""test"";    stringPriorityMessageQueue.add(pushMessage);    assertEquals(stringPriorityMessageQueue.remove(), pushMessage);  }  @Test",remove
846,  public int <extra_id_0>() {    // being a server socket channel it is interested in accepting connection from remote peers.    return SelectionKey.OP_ACCEPT;  }  /**   * Get server socket channel.   *   * @return the underlying {@link ServerSocketChannel}.   */  @Override,getInterestedOps
3191,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.getById(existingCustomer.getId());      });    }    @Test",retrievingACustomerByIdFailsWithExceptionAsFeedbackToClient
1643,  public synchronized int <extra_id_0>(int accountNumber) {    return accounts[accountNumber];  }  /**   * Get all accounts.   *   * @return accounts   */,getBalance
2111,    public CakeTopping <extra_id_0>() {        return topping;    },getTopping
300,"  public final void <extra_id_0>() {    var target = pickTarget();    LOGGER.info(""The target has been chosen as {}."", target);    confuseTarget(target);    stealTheItem(target);  }",steal
3013,"  public void <extra_id_0>(int x, int y) {    pixels[getIndex(x, y)] = Pixel.WHITE;  }  @Override",clear
1443,    public Builder <extra_id_0>(SortOrder sortOrder) {      this.sortOrder = sortOrder;      return this;    },sortOrder
929,    public boolean <extra_id_0>() {      throw new UnsupportedOperationException();    }    @Override,tryLock
3287,  void <extra_id_0>(DataType event);,accept
3510,  public RequestType <extra_id_0>() {    return requestType;  }  /**   * Mark the request as handled.   */,getRequestType
2445,"  void <extra_id_0>() {    final var store = mock(ContentStore.class);    when(store.getContent()).thenReturn(Content.PRODUCTS);    final var view = new ContentView();    view.storeChanged(store);    verify(store, times(1)).getContent();    verifyNoMoreInteractions(store);  }",testStoreChanged
686,  void <extra_id_0>() {    final var swimmingHeavyCreature = mock(Creature.class);    when(swimmingHeavyCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingHeavyCreature.getMass()).thenReturn(new Mass(100.0));    final var swimmingLightCreature = mock(Creature.class);    when(swimmingLightCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingLightCreature.getMass()).thenReturn(new Mass(25.0));    final var heavySelector = new MassSmallerThanOrEqSelector(50.0).not();    assertTrue(heavySelector.test(swimmingHeavyCreature));    assertFalse(heavySelector.test(swimmingLightCreature));  },testNotComposition
1899,  private synchronized Heavy <extra_id_0>() {    class HeavyFactory implements Supplier<Heavy> {      private final Heavy heavyInstance = new Heavy();      @Override      public Heavy get() {        return heavyInstance;      }    }    if (!(heavy instanceof HeavyFactory)) {      heavy = new HeavyFactory();    }    return heavy.get();  },createAndCacheHeavy
3276,"  void <extra_id_0>() {    var books = queryService.getAuthorBooks(""username1"");    assertEquals(2, books.size());    assertTrue(books.contains(new Book(""title1"", 10)));    assertTrue(books.contains(new Book(""new_title2"", 30)));  }  @Test",testGetAuthorBooks
1392,  void <extra_id_0>() {    appender.stop();  }  /**   * The observer instance factory   */,tearDown
1816,  public void <extra_id_0>() { //from Thread class    var work = executeOperation();    sendToMaster(work);  },run
3393,  protected String <extra_id_0>(Object... parameters) throws DatabaseUnavailableException {    var req = (ShippingRequest) parameters[0];    if (this.database.get(req.transactionId) == null) {      database.add(req);      return req.transactionId;    }    return null;  },updateDb
3244,"  public Author <extra_id_0>(String username) {    Author authorDto;    try (var session = sessionFactory.openSession()) {      Query<Author> sqlQuery = session.createQuery(              ""select new com.iluwatar.cqrs.dto.Author(a.name, a.email, a.username)""                      + "" from com.iluwatar.cqrs.domain.model.Author a where a.username=:username"");      sqlQuery.setParameter(AppConstants.USER_NAME, username);      authorDto = sqlQuery.uniqueResult();    }    return authorDto;  }  @Override",getAuthorByUsername
733,"  void <extra_id_0>() {    var r = new Rect(10, 10, 20, 20);    var b1 = new Bubble(2, 2, 1, 1);    var b2 = new Bubble(30, 30, 2, 1);    //r contains b1 and not b2    assertTrue(r.contains(b1));    assertFalse(r.contains(b2));  }  @Test",containsTest
3639,"  void <extra_id_0>() {    var wizardNumber = 0;    var bytecode = new int[3];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = wizardNumber;    bytecode[2] = PLAY_SOUND.getIntValue();    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(0, vm.getStack().size());    assertEquals(1, vm.getWizards()[0].getNumberOfPlayedSounds());  }  @Test",testPlaySound
732,"  void <extra_id_0>() {    var b1 = new Bubble(10, 10, 1, 3);    var b2 = new Bubble(5, 5, 2, 1);    var b3 = new Bubble(9, 9, 3, 1);    var b4 = new Bubble(8, 8, 4, 2);    var bubbles = new HashMap<Integer, Bubble>();    bubbles.put(1, b1);    bubbles.put(2, b2);    bubbles.put(3, b3);    bubbles.put(4, b4);    var r = new Rect(10, 10, 20, 20);    var qt = new QuadTree(r, 4);    qt.insert(b1);    qt.insert(b2);    qt.insert(b3);    qt.insert(b4);    var sp = new SpatialPartitionBubbles(bubbles, qt);    sp.handleCollisionsUsingQt(b1);    //b1 touches b3 and b4 but not b2 - so b1,b3,b4 get popped    assertNull(bubbles.get(1));    assertNotNull(bubbles.get(2));    assertNull(bubbles.get(3));    assertNull(bubbles.get(4));  }",handleCollisionsUsingQtTest
3038,"  public void <extra_id_0>(Product product) {    LOGGER.info(        String.format(            ""%s want to buy %s($%.2f)..."",            name, product.getName(), product.getSalePrice().getAmount()));    try {      withdraw(product.getSalePrice());    } catch (IllegalArgumentException ex) {      LOGGER.error(ex.getMessage());      return;    }    try {      customerDao.addProduct(product, this);      purchases.add(product);      LOGGER.info(String.format(""%s bought %s!"", name, product.getName()));    } catch (SQLException exception) {      receiveMoney(product.getSalePrice());      LOGGER.error(exception.getMessage());    }  }  /**   * Remove product from purchases, delete from db and return money.   *   * @param product to return.   */",buyProduct
1060,"  public ServiceDiscoveryService <extra_id_0>(OrchestrationChapter<?> orchestrationChapterService) {    services.put(orchestrationChapterService.getName(), orchestrationChapterService);    return this;  }",discover
1757,"  public boolean <extra_id_0>(@NonNull Creature creature) {    synchronized (synchronizer) {      LOGGER.info(""{} is now trying to acquire {}!"", creature.getName(), this.getName());      if (!isLocked()) {        locker = creature;        return true;      } else {        if (!locker.getName().equals(creature.getName())) {          return false;        }      }    }    return false;  }  @Override",lock
2389,"  public Stream<Arguments> <extra_id_0>() {    return prepareParameters((f, s) -> f);  }  /**   * Create a new test instance using the given test parameters and expected result   */",expressionProvider
3753,"  public static void <extra_id_0>(String[] args) {    LOGGER.info(""The knight receives an enchanted sword."");    var enchantedSword = new Sword(new SoulEatingEnchantment());    enchantedSword.wield();    enchantedSword.swing();    enchantedSword.unwield();    LOGGER.info(""The valkyrie receives an enchanted hammer."");    var hammer = new Hammer(new FlyingEnchantment());    hammer.wield();    hammer.swing();    hammer.unwield();  }",main
1056,  public boolean <extra_id_0>() {    return state == State.SUCCESS;  },isSuccess
1097,"  public ServiceDiscoveryService <extra_id_0>(ChoreographyChapter chapterService) {    services.put(chapterService.getName(), chapterService);    return this;  }",discover
3826,  public Army <extra_id_0>() {    return new ElfArmy();  },createArmy
475,  public static InitializingOnDemandHolderIdiom <extra_id_0>() {    return HelperHolder.INSTANCE;  }  /**   * Provides the lazy-loaded Singleton instance.   */,getInstance
361,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
3500,  public void <extra_id_0>(Request req) {    handlers        .stream()        .sorted(Comparator.comparing(RequestHandler::getPriority))        .filter(handler -> handler.canHandleRequest(req))        .findFirst()        .ifPresent(handler -> handler.handle(req));  },makeRequest
3139,"  public boolean <extra_id_0>(Customer customer) throws Exception {    try (var connection = getConnection();         var statement = connection.prepareStatement(""DELETE FROM CUSTOMERS WHERE ID = ?"")) {      statement.setInt(1, customer.getId());      return statement.executeUpdate() > 0;    } catch (SQLException ex) {      throw new CustomException(ex.getMessage(), ex);    }  }",delete
1750,  public String <extra_id_0>() {    return TAG;  },tag
3534,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1997,  public Filter <extra_id_0>() {    Filter last = this;    while (last.getNext() != null) {      last = last.getNext();    }    return last;  }  @Override,getLast
1478,  public AlbumListPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      e.printStackTrace();    }    return this;  }  /**   * {@inheritDoc}   */  @Override,navigateToPage
3353,  public static void <extra_id_0>(String[] args) throws Exception {    var asfc = new AppShippingFailCases();    //asfc.itemUnavailableCase();    //asfc.shippingNotPossibleCase();    //asfc.shippingDatabaseUnavailableCase();    asfc.shippingSuccessCase();  },main
2193,"  void <extra_id_0>() {    var iter = new BstIterator<>(emptyRoot);    assertThrows(NoSuchElementException.class, iter::next,        ""next() should throw an IllegalStateException if hasNext() is false."");  }  @Test",nextForEmptyTree
2967,  public List<ProductDto.Response.Private> <extra_id_0>() {    return products            .stream()            .map(p -> new ProductDto.Response.Private().setId(p.getId()).setName(p.getName())                    .setCost(p.getCost())                    .setPrice(p.getPrice()))            .toList();  }  /**   * Get all products.   *   * @return : all products in list but in the scheme of public dto.   */,getAllProductsForAdmin
1532,  public static Queen <extra_id_0>() {    return new Queen();  },createNotFlirtyQueen
467,"  private static void <extra_id_0>(DataSource dataSource) {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(CountrySchemaSql.DELETE_SCHEMA_SQL);    } catch (SQLException e) {      LOGGER.info(""Exception thrown "" + e.getMessage());    }  }",deleteSchema
2887,"  void <extra_id_0>() {    final var troll = new SimpleTroll();    assertEquals(10, troll.getAttackPower());    troll.attack();    assertEquals(""The troll tries to grab you!"", appender.getLastMessage());    troll.fleeBattle();    assertEquals(""The troll shrieks in horror and runs away!"", appender.getLastMessage());    assertEquals(2, appender.getLogSize());  }",testTrollActions
1433,  public static Builder <extra_id_0>() {    return new Builder();  },newBuilder
1622,  void <extra_id_0>() throws Exception;,run
1707,"  public void <extra_id_0>(String message) {    JOptionPane.showMessageDialog(null, message);  }  @Override",showMessage
1848,  public Worker <extra_id_0>() {    return leader;  }  /**   * Promote a leader.   */,getLeader
2443,"  void <extra_id_0>() {    final var contentStore = new ContentStore();    final var view = mock(View.class);    contentStore.registerView(view);    verifyNoMoreInteractions(view);    // Content should not react on menu action ...    contentStore.onAction(new MenuAction(MenuItem.PRODUCTS));    verifyNoMoreInteractions(view);    // ... but it should react on a content action    contentStore.onAction(new ContentAction(Content.COMPANY));    verify(view, times(1)).storeChanged(eq(contentStore));    verifyNoMoreInteractions(view);    assertEquals(Content.COMPANY, contentStore.getContent());  }",testOnAction
3756,"  public void <extra_id_0>() {    LOGGER.info(""The hammer is unwielded."");    enchantment.onDeactivate();  }  @Override",unwield
1541,  public boolean <extra_id_0>() {    return isHappy;  }  /**   * Method to flirt to a queen.   *   * @param queen Queen which should be flirted.   */,isHappy
23,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
541,  public void <extra_id_0>(String name) {    this.name = name;  },setName
848,"  public ByteBuffer <extra_id_0>(SelectionKey key) throws IOException {    var socketChannel = (SocketChannel) key.channel();    var buffer = ByteBuffer.allocate(1024);    var read = socketChannel.read(buffer);    buffer.flip();    if (read == -1) {      throw new IOException(""Socket closed"");    }    return buffer;  }  /**   * Binds TCP socket on the provided <code>port</code>.   *   * @throws IOException if any I/O error occurs.   */  @Override",read
3749,  void <extra_id_0>();,wield
1773,  public synchronized void <extra_id_0>(@NonNull Creature creature) {    creature.hit(getDamage());  }  /**   * When a creature gets hit it removed the amount of damage from the creature's life.   *   * @param damage as the damage that was taken.   */,attack
2246,"  void <extra_id_0>(LotteryService service, Scanner scanner);  /**   * Submit lottery ticket to participate in the lottery.   */",checkTicket
1688,  public void <extra_id_0>() {    this.opened = true;  }  @Override,open
819,"  private static void <extra_id_0>() throws Exception {    op = new FindCustomer(""123"");    op.perform();    LOG.info(""Sometimes the operation executes with no errors."");  }",noErrors
598,"  void <extra_id_0>() {    final var wizardDao = mock(WizardDao.class);    final var spellbookDao = mock(SpellbookDao.class);    final var spellDao = mock(SpellDao.class);    final var service = new MagicServiceImpl(wizardDao, spellbookDao, spellDao);    verifyNoInteractions(wizardDao, spellbookDao, spellDao);    service.findAllSpells();    verify(spellDao).findAll();    verifyNoMoreInteractions(wizardDao, spellbookDao, spellDao);  }  @Test",testFindAllSpells
2686,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2648,"  void <extra_id_0>() {    eventProcessor.reset();    eventProcessor.process(new AccountCreateEvent(        0, new Date().getTime(), ACCOUNT_OF_DAENERYS, ""Daenerys Targaryen""));    eventProcessor.process(new AccountCreateEvent(        1, new Date().getTime(), ACCOUNT_OF_JON, ""Jon Snow""));    eventProcessor.process(new MoneyDepositEvent(        2, new Date().getTime(), ACCOUNT_OF_DAENERYS, new BigDecimal(""100000"")));    eventProcessor.process(new MoneyDepositEvent(        3, new Date().getTime(), ACCOUNT_OF_JON, new BigDecimal(""100"")));    eventProcessor.process(new MoneyTransferEvent(        4, new Date().getTime(), new BigDecimal(""10000""), ACCOUNT_OF_DAENERYS,        ACCOUNT_OF_JON));    var accountOfDaenerysBeforeShotDown = AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS);    var accountOfJonBeforeShotDown = AccountAggregate.getAccount(ACCOUNT_OF_JON);    AccountAggregate.resetState();    eventProcessor = new DomainEventProcessor(new JsonFileJournal());    eventProcessor.recover();    var accountOfDaenerysAfterShotDown = AccountAggregate.getAccount(ACCOUNT_OF_DAENERYS);    var accountOfJonAfterShotDown = AccountAggregate.getAccount(ACCOUNT_OF_JON);    assertEquals(accountOfDaenerysBeforeShotDown.getMoney(),        accountOfDaenerysAfterShotDown.getMoney());    assertEquals(accountOfJonBeforeShotDown.getMoney(), accountOfJonAfterShotDown.getMoney());  }",testStateRecovery
2634,  public static boolean <extra_id_0>(User user) {    return paidGroup.contains(user);  },isPaid
279,"  protected void <extra_id_0>() {    move(0, 0, -20);    playSound(""GROUNDDIVE_SOUND"", 5);    spawnParticles(""GROUNDDIVE_PARTICLE"", 20);  }",activate
3755,"  public void <extra_id_0>() {    LOGGER.info(""The hammer is swung."");    enchantment.apply();  }  @Override",swing
3321,"  public static void <extra_id_0>(String[] args) {    var server = new Server(""localhost"", 8080);    var session1 = server.getSession(""Session1"");    var session2 = server.getSession(""Session2"");    var request1 = new Request(""Data1"", session1);    var request2 = new Request(""Data2"", session2);    server.process(request1);    server.process(request2);  }",main
2676,  public void <extra_id_0>() {    if (updateThread == null) {      updateThread = new Thread(() -> {        while (!Thread.currentThread().isInterrupted()) {          update();        }      });    }    startThread();  }  /**   * This is a synchronized thread starter.   */,init
3077,  void <extra_id_0>() throws SQLException {    TestUtils.deleteSchema(dataSource);  }  @Test,tearDown
1261,  void <extra_id_0>(Wizard wizard);,enter
2988,  void <extra_id_0>() {    appender = new InMemoryAppender(Inventory.class);  }  @AfterEach,setUp
3622,  private static void <extra_id_0>(String msg) {    LOGGER.info(msg);  },log
3011,"  public Buffer <extra_id_0>() {    LOGGER.info(""Get current buffer: "" + current);    return frameBuffers[current];  }",getBuffer
3259,"  public void <extra_id_0>(String title, double price, String username) {    var author = getAuthorByUsername(username);    var book = new Book(title, price, author);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.save(book);      session.getTransaction().commit();    }  }  @Override",bookAddedToAuthor
3322,"  public Session <extra_id_0>(String name) {    return new Session(UUID.randomUUID().toString(), name);  }  /**   * Processes a request based on the session.   *   * @param request Request object with data and Session   */",getSession
1256,  public boolean <extra_id_0>(String message) {    return log.stream().map(ILoggingEvent::getFormattedMessage).anyMatch(message::equals);  },logContains
3130,"  public static void <extra_id_0>(String[] args) {    //Initiate first layer and add service information into context    var layerA = new LayerA();    layerA.addAccountInfo(SERVICE);    LOGGER.info(""Context = {}"", layerA.getContext());    //Initiate second layer and preserving information retrieved in first layer through passing context object    var layerB = new LayerB(layerA);    layerB.addSessionInfo(SERVICE);    LOGGER.info(""Context = {}"", layerB.getContext());    //Initiate third layer and preserving information retrieved in first and second layer through passing context object    var layerC = new LayerC(layerB);    layerC.addSearchInfo(SERVICE);    LOGGER.info(""Context = {}"", layerC.getContext());  }",main
79,"  public void <extra_id_0>(Weapon weapon) {    LOGGER.info(""Registering {} for insert in context."", weapon.getName());    register(weapon, UnitActions.INSERT.getActionValue());  }  @Override",registerNew
565,  public void <extra_id_0>(Spellbook spellbook) {    spellbook.getWizards().add(this);    spellbooks.add(spellbook);  }  @Override,addSpellbook
748,"  abstract void <extra_id_0>(Collection<? extends Point> toCheck, Map<Integer, T> all);",handleCollision
1445,"  void <extra_id_0>() {    //Creating parameter object with default value for SortBy set    ParameterObject params = ParameterObject.newBuilder()        .withType(""sneakers"")        .sortOrder(SortOrder.DESC)        .build();    assertEquals(ParameterObject.DEFAULT_SORT_BY, params.getSortBy(),        ""Default SortBy is not set."");    LOGGER.info(""{} Default parameter value is set during object creation as no value is passed.""        , ""SortBy"");  }  @Test",testForDefaultSortBy
2859,"  void <extra_id_0>() {    testCollision(        new FlamingAsteroid(1, 1, 3, 4),        false, true,        false, false    );  }  /**   * Test what happens we collide with an meteoroid   */  @Test",testCollideFlamingAsteroid
416,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setURL(DB_URL);    return dataSource;  }  @BeforeEach,createDataSource
3474,"  void <extra_id_0>() {    var res = advancedFinder(""it was"", ""kingdom"", ""sea"").find(text());    assertEquals(1, res.size());    assertEquals( ""It was many and many a year ago,"", res.get(0));  }  @Test",advancedFinderTest
3747,  void <extra_id_0>();,apply
3654,"  public void <extra_id_0>() {    LOGGER.info(""Spawning particles"");    numberOfSpawnedParticles++;  }",spawnParticles
2244,"  public void <extra_id_0>(WireTransfers bank, Scanner scanner) {    logger.info(""What is the account number?"");    var account = readString(scanner);    logger.info(""The account {} has {} credits."", account, bank.getFunds(account));  }",queryLotteryAccountFunds
2150,"    public void <extra_id_0>() {      if (numberOfElements < 0) {        throw new IllegalArgumentException(""n is less than 0"");      }    }    @Override",onPreCall
745,"  public static void <extra_id_0>(String[] args) {    var bubbles1 = new ConcurrentHashMap<Integer, Bubble>();    var bubbles2 = new ConcurrentHashMap<Integer, Bubble>();    var rand = new SecureRandom();    for (int i = 0; i < 10000; i++) {      var b = new Bubble(rand.nextInt(300), rand.nextInt(300), i, rand.nextInt(2) + 1);      bubbles1.put(i, b);      bubbles2.put(i, b);      LOGGER.info(""Bubble {} with radius {} added at ({},{})"",          i, b.radius, b.coordinateX, b.coordinateY);    }    var start1 = System.currentTimeMillis();    App.noSpatialPartition(20, bubbles1);    var end1 = System.currentTimeMillis();    var start2 = System.currentTimeMillis();    App.withSpatialPartition(300, 300, 20, bubbles2);    var end2 = System.currentTimeMillis();    LOGGER.info(""Without spatial partition takes {} ms"", (end1 - start1));    LOGGER.info(""With spatial partition takes {} ms"", (end2 - start2));  }",main
3420,"    private Commander <extra_id_0>() {        PaymentService paymentService = new PaymentService                (new PaymentDatabase(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException());        var shippingService = new ShippingService(new ShippingDatabase());        var messagingService = new MessagingService(new MessagingDatabase());        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException(),                        new DatabaseUnavailableException(), new DatabaseUnavailableException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectVanilla
3717,"  public UserAccount <extra_id_0>(final UserAccount userAccount) {    String userId = userAccount.getUserId();    String userName = userAccount.getUserName();    String additionalInfo = userAccount.getAdditionalInfo();    db.getCollection(CachingConstants.USER_ACCOUNT).updateOne(            new Document(USER_ID, userId),            new Document(""$set"",                    new Document(USER_ID, userId)                            .append(USER_NAME, userName)                            .append(ADD_INFO, additionalInfo)            ),            new UpdateOptions().upsert(true)    );    return userAccount;  }",upsertDb
834,  public DatagramPacket <extra_id_0>(SelectionKey key) throws IOException {    var buffer = ByteBuffer.allocate(1024);    var sender = ((DatagramChannel) key.channel()).receive(buffer);    /*     * It is required to create a DatagramPacket because we need to preserve which socket address     * acts as destination for sending reply packets.     */    buffer.flip();    var packet = new DatagramPacket(buffer);    packet.setSender(sender);    return packet;  }  /**   * Get datagram channel.   *   * @return the underlying datagram channel.   */  @Override,read
1046,"  public ChapterResult<String> <extra_id_0>(String value) {    if (value.equals(""bad_order"") || value.equals(""crashed_order"")) {      LOGGER.info(""The chapter '{}' has been started. But the exception has been raised.""              + ""The rollback is about to start"",          getName(), value);      return ChapterResult.failure(value);    }    return super.process(value);  }",process
108,"  void <extra_id_0>(CellPool pool, Cell[][] cellMatrix) {    for (var y = this.positionY; y > 0; y--) {      cellMatrix[y][this.positionX] = cellMatrix[y - 1][this.positionX];      cellMatrix[y][this.positionX].positionY = y;    }    var newC = pool.getNewCell();    cellMatrix[0][this.positionX] = newC;    cellMatrix[0][this.positionX].positionX = this.positionX;    cellMatrix[0][this.positionX].positionY = 0;  }",fillThisSpace
2502,          private void <extra_id_0>() {            if (list == null) {              list = new ArrayList<>();              iterable.forEach(list::add);              totalElementsCount = list.size();              stopIndex = totalElementsCount - count;            }          }        };      }    };  }  /**   * Transforms this FluentIterable into a new one containing objects of the type T.   *   * @param function a function that transforms an instance of E into an instance of T   * @param <T>      the target type of the transformation   * @return a new FluentIterable of the new type   */  @Override,initialize
3671,"  public void <extra_id_0>(final UserAccount userAccount) {    LOGGER.info(""Save record!"");    if (cachingPolicy == CachingPolicy.THROUGH) {      cacheStore.writeThrough(userAccount);    } else if (cachingPolicy == CachingPolicy.AROUND) {      cacheStore.writeAround(userAccount);    } else if (cachingPolicy == CachingPolicy.BEHIND) {      cacheStore.writeBehind(userAccount);    } else if (cachingPolicy == CachingPolicy.ASIDE) {      saveAside(userAccount);    }  }  /**   * Returns String.   *   * @return String   */",save
1758,"  public void <extra_id_0>(@NonNull Creature creature) {    synchronized (synchronizer) {      if (locker != null && locker.getName().equals(creature.getName())) {        locker = null;        LOGGER.info(""{} is now free!"", this.getName());      }      if (locker != null) {        throw new LockingException(""You cannot unlock an object you are not the owner of."");      }    }  }  @Override",unlock
986,  void <extra_id_0>() {    assertDoesNotThrow(() -> ApplicationRoleObject.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1293,  private void <extra_id_0>() {    stopLatch.countDown();  },taskCompleted
3269,"  void <extra_id_0>(String username, String email);",authorEmailUpdated
1841,  public boolean <extra_id_0>() {    return this.finished;  },isFinished
1351,"  public String <extra_id_0>() {    return view.display();  }  /**   * Handle http POST request and access model and view.   */  @PostMapping(""/signup"")",getSignup
1972,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3522,"  void <extra_id_0>() {    var john = new Person(cars);    var modelsExpected = List.of(        new Car(""Dodge"", ""Avenger"", 2010, Category.SEDAN),        new Car(""Ford"", ""Focus"", 2012, Category.SEDAN)    );    var modelsFunctional = FunctionalProgramming.getSedanCarsOwnedSortedByDate(List.of(john));    var modelsImperative = ImperativeProgramming.getSedanCarsOwnedSortedByDate(List.of(john));    assertEquals(modelsExpected, modelsFunctional);    assertEquals(modelsExpected, modelsImperative);  }",testGetSedanCarsOwnedSortedByDate
2713,    public int <extra_id_0>() {      return log.size();    },getLogSize
793,  void <extra_id_0>() {    final var queen = new Queen();    queen.receiveCompliments();    queen.changeMood();    assertTrue(queen.getMood());  },testFlirtyComplemented
713,    public String <extra_id_0>() {      return userName;    },getUserName
1602,"  void <extra_id_0>() {    assertEquals(testBook.toString(), testBookTwo.toString());    assertNotEquals(testBook.toString(), testBookThree.toString());  }    @Test",testToString
483,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
2540,  public static void <extra_id_0>(String[] args) {    // create the alchemist shop with the potions    var alchemistShop = new AlchemistShop();    // a brave visitor enters the alchemist shop and drinks all the potions    alchemistShop.drinkPotions();  },main
1603,"  void <extra_id_0>() {    assertTrue(testBook.equals(testBookTwo) && testBookTwo.equals(testBook));    assertEquals(testBook.hashCode(), testBookTwo.hashCode());  }    @Test",testHashCode
499,  void <extra_id_0>() {    hashShardManager = new HashShardManager();    var shard1 = new Shard(1);    var shard2 = new Shard(2);    var shard3 = new Shard(3);    hashShardManager.addNewShard(shard1);    hashShardManager.addNewShard(shard2);    hashShardManager.addNewShard(shard3);  }  @Test,setup
2526,"  public String <extra_id_0>() {    return ""The elf blacksmith"";  }",toString
2796,  Order <extra_id_0>(int id) throws SQLException;  ,queryOrder
3602,"  void <extra_id_0>() {    var washingMachine = new WashingMachine();    washingMachine.wash();    assertEquals(WashingMachineState.ENABLED, washingMachine.getWashingMachineState());  }",endOfWashing
212,  public static void <extra_id_0>() {    skeleton = new Skeleton(1);  }  @AfterAll,setup
3516,  void <extra_id_0>(Request req);,handle
2092,"  void <extra_id_0>() {    final var initialToppings = cakeBakingService.getAvailableToppings();    assertNotNull(initialToppings);    assertTrue(initialToppings.isEmpty());    cakeBakingService.saveNewTopping(new CakeToppingInfo(""Topping1"", 1000));    cakeBakingService.saveNewTopping(new CakeToppingInfo(""Topping2"", 2000));    final var availableToppings = cakeBakingService.getAvailableToppings();    assertNotNull(availableToppings);    assertEquals(2, availableToppings.size());    for (final var topping : availableToppings) {      assertNotNull(topping.id);      assertNotNull(topping.name);      assertNotNull(topping.toString());      assertTrue(topping.calories > 0);    }  }  @Test",testToppings
1863,"  void <extra_id_0>(Supplier<PartyMember> memberSupplier) {    final var member = memberSupplier.get();    for (final var action : Action.values()) {      member.partyAction(action);      assertEquals(member.toString() + "" "" + action.getDescription(), appender.getLastMessage());    }    assertEquals(Action.values().length, appender.getLogSize());  }  /**   * Verify if a member action triggers the expected interactions with the party class   */  @ParameterizedTest  @MethodSource(""dataProvider"")",testPartyAction
2504,      public Iterator<T> <extra_id_0>() {        return new DecoratingIterator<>(null) {          final Iterator<E> oldTypeIterator = iterable.iterator();          @Override          public T computeNext() {            if (oldTypeIterator.hasNext()) {              E candidate = oldTypeIterator.next();              return function.apply(candidate);            } else {              return null;            }          }        };      }    };  }  /**   * Collects all remaining objects of this iteration into a list.   *   * @return a list with all remaining objects of this iteration   */  @Override,iterator
2963,    String <extra_id_0>();  }  /**   * Use this interface whenever you want to provide the product Price in your DTO.   */,getName
3608,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(5000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var result = new Object();      when(task.call()).thenAnswer(i -> {        Thread.sleep(1500);        return result;      });      final var asyncResult = executor.startProcess(task);      assertNotNull(asyncResult);      assertFalse(asyncResult.isCompleted());      try {        asyncResult.getValue();        fail(""Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task"");      } catch (IllegalStateException e) {        assertNotNull(e.getMessage());      }      // Our task should only execute once, but it can take a while ...      verify(task, timeout(3000).times(1)).call();      // Prevent timing issues, and wait until the result is available      asyncResult.await();      assertTrue(asyncResult.isCompleted());      verifyNoMoreInteractions(task);      // ... and the result should be exactly the same object      assertSame(result, asyncResult.getValue());    });  }  /**   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable,   * AsyncCallback)} when a task takes a while to execute   */  @Test",testLongRunningTaskWithoutCallback
2799,"  public boolean <extra_id_0>() {    try (Statement createschema = conn.createStatement()) {      createschema.execute(CREATE_SCHEMA);      insertIntoOrders = conn.prepareStatement(INSERT_ORDER, PreparedStatement.RETURN_GENERATED_KEYS);      getschema = conn.createStatement();      queryOrders = conn.createStatement();      removeorder = conn.prepareStatement(REMOVE_ORDER);      queyOrderById = conn.prepareStatement(QUERY_ORDER);      deleteschema = conn.createStatement();    } catch (SQLException e) {      LOGGER.error(e.getLocalizedMessage(), e.getCause());      return false;    }    return true;  }  @Override",createSchema
1317,  public String <extra_id_0>() {    return name;  },name
3010,"  public void <extra_id_0>(List<? extends Pair<Integer, Integer>> coordinateList) {    LOGGER.info(""Start drawing next frame"");    LOGGER.info(""Current buffer: "" + current + "" Next buffer: "" + next);    frameBuffers[next].clearAll();    coordinateList.forEach(coordinate -> {      var x = coordinate.getKey();      var y = coordinate.getValue();      frameBuffers[next].draw(x, y);    });    LOGGER.info(""Swap current and next buffer"");    swap();    LOGGER.info(""Finish swapping"");    LOGGER.info(""Current buffer: "" + current + "" Next buffer: "" + next);  }",draw
2493,          public E <extra_id_0>() {            while (fromIterator.hasNext()) {              var candidate = fromIterator.next();              if (predicate.test(candidate)) {                return candidate;              }            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the first object of this Iterable   */  @Override,computeNext
2693,  Class<? extends Event> <extra_id_0>();,getType
3871,"  public String <extra_id_0>() {    var request = HttpRequest.newBuilder()        .GET()        .uri(URI.create(""http://localhost:51515/information""))        .build();    var client = HttpClient.newHttpClient();    try {      var httpResponse = client.send(request, HttpResponse.BodyHandlers.ofString());      return httpResponse.body();    } catch (IOException ioe) {      LOGGER.error(""IOException Occurred"", ioe);    } catch (InterruptedException ie) {      LOGGER.error(""InterruptedException Occurred"", ie);      Thread.currentThread().interrupt();    }    return null;  }",getProductTitle
3331,  public void <extra_id_0>(int acceleration) {    this.velocity += acceleration;  }  /**   * Set the c based on the current velocity.   */,updateVelocity
2104,    public int <extra_id_0>() {        var total = cakeToppingInfo != null ? cakeToppingInfo.calories : 0;        total += cakeLayerInfos.stream().mapToInt(c -> c.calories).sum();        return total;    }    @Override,calculateTotalCalories
2682,"  public static void <extra_id_0>(String[] args) throws UnsupportedAudioFileException, IOException,      InterruptedException {    var audio = Audio.getInstance();    audio.playSound(audio.getAudioStream(""./etc/Bass-Drum-1.wav""), -10.0f);    audio.playSound(audio.getAudioStream(""./etc/Closed-Hi-Hat-1.wav""), -8.0f);    LOGGER.info(""Press Enter key to stop the program..."");    try (var br = new BufferedReader(new InputStreamReader(System.in))) {      br.read();    }    audio.stopService();  }",main
2017,"  public String <extra_id_0>(Order order) {    var result = super.execute(order);    var depositNumber = order.getDepositNumber();    if (depositNumber == null || depositNumber.isEmpty()) {      return result + ""Invalid deposit number! "";    } else {      return result;    }  }",execute
1168,"  void <extra_id_0>() throws Exception {    final var publishPoint = mock(MqPublishPoint.class);    final var producer = new Producer(""producer"", publishPoint);    verifyNoMoreInteractions(publishPoint);    producer.send(""Hello!"");    final var messageCaptor = ArgumentCaptor.forClass(Message.class);    verify(publishPoint).put(messageCaptor.capture());    final var message = messageCaptor.getValue();    assertNotNull(message);    assertEquals(""producer"", message.getHeader(Message.Headers.SENDER));    assertNotNull(message.getHeader(Message.Headers.DATE));    assertEquals(""Hello!"", message.getBody());    verifyNoMoreInteractions(publishPoint);  }  @Test",testSend
3495,  public boolean <extra_id_0>(Request req) {    return req.getRequestType() == RequestType.TORTURE_PRISONER;  }  @Override,canHandleRequest
3506,  public int <extra_id_0>() {    return 2;  }  @Override,getPriority
63,"  public void <extra_id_0>(Sergeant sergeant) {    LOGGER.info(""Hello {}"", sergeant);  }  /**   * Commander Visitor method.   * @param commander Commander to be visited   */  @Override",visit
2141,"  void <extra_id_0>();  /**   * A callback called after the result is successfully computed by {@link #call()}. In our   * implementation this method is called in context of background thread but in some variants, such   * as Android where only UI thread can change the state of UI widgets, this method is called in   * context of UI thread.   */",onPreCall
3796,  public final void <extra_id_0>() {    boat.sail();  },row
2236,"  public static void <extra_id_0>(LotteryService lotteryService, int numTickets) {    for (var i = 0; i < numTickets; i++) {      var randomPlayerDetails = getRandomPlayerDetails();      var lotteryNumbers = LotteryNumbers.createRandom();      var lotteryTicketId = new LotteryTicketId();      var ticket = new LotteryTicket(lotteryTicketId, randomPlayerDetails, lotteryNumbers);      lotteryService.submitTicket(ticket);    }  }",submitTickets
3063,"    void <extra_id_0>() throws SQLException {        // create schema        dataSource = TestUtils.createDataSource();        TestUtils.deleteSchema(dataSource);        TestUtils.createSchema(dataSource);        // setup objects        productDao = new ProductDaoImpl(dataSource);        product =                Product.builder()                        .name(""product"")                        .price(Money.of(USD, 100.0))                        .expirationDate(LocalDate.parse(""2021-06-27""))                        .productDao(productDao)                        .build();    }    @AfterEach",setUp
2318,"  boolean <extra_id_0>(int amount, String sourceBackAccount, String destinationBankAccount);",transferFunds
868,  private void <extra_id_0>(SelectionKey key) throws IOException {    if (key.isAcceptable()) {      onChannelAcceptable(key);    } else if (key.isReadable()) {      onChannelReadable(key);    } else if (key.isWritable()) {      onChannelWritable(key);    }  },processKey
2470,  FluentIterable<E> <extra_id_0>(int count);  /**   * Transforms this FluentIterable into a new one containing objects of the type T.   *   * @param function a function that transforms an instance of E into an instance of T   * @param <T>      the target type of the transformation   * @return a new FluentIterable of the new type   */,last
1810,  ArrayResult <extra_id_0>() {    //number of rows in result matrix is equal to number of columns in input matrix and vice versa    var arrayInput = (ArrayInput) this.getReceivedData();    final var rows = arrayInput.data[0].length;    final var cols = arrayInput.data.length;    var resultData = new int[rows][cols];    for (var i = 0; i < cols; i++) {      for (var j = 0; j < rows; j++) {        //flipping element positions along diagonal        resultData[j][i] = arrayInput.data[i][j];      }    }    return new ArrayResult(resultData);  },executeOperation
2675,  public synchronized boolean <extra_id_0>() {    return updateThread != null && updateThread.isAlive();  }  /**   * Starts the thread for the Update Method pattern if it was not started previously. Also when the   * thread is is ready initializes the indexes of the queue   */,isServiceRunning
3309,  void <extra_id_0>() {    Assertions.assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1393,"  public abstract Collection<Object[]> <extra_id_0>();  /**   * Verify if the weather has the expected influence on the observer   */  @ParameterizedTest  @MethodSource(""dataProvider"")",dataProvider
2133,    List<CakeInfo> <extra_id_0>();    /**     * Store new cake topping.     */,getAllCakes
394,  public void <extra_id_0>() {    if (state.getClass().equals(PeacefulState.class)) {      changeStateTo(new AngryState(this));    } else {      changeStateTo(new PeacefulState(this));    }  },timePasses
2674,  public synchronized void <extra_id_0>() throws InterruptedException {    if (updateThread != null) {      updateThread.interrupt();    }    updateThread.join();    updateThread = null;  }  /**   * This method check the Update Method's thread is started.   *   * @return boolean   */,stopService
3229,  public T[] <extra_id_0>() {    return (T[]) Arrays.stream(dependentObjects).map(DependentObject::getData).toArray();  },getData
3816,  Army <extra_id_0>();,createArmy
1517,"  public boolean <extra_id_0>() {    return ""Album List"".equals(page.getTitleText());  }  /**   * Selects an album by the given album title.   *   * @param albumTitle the title of the album to click   * @return the album page   */",isAt
1695,  public void <extra_id_0>() {    this.opened = false;  }  @Override,close
2012,  public String <extra_id_0>() {    return depositNumber;  },getDepositNumber
377,"  public String <extra_id_0>() {    return String.format(""%s %s"", this.getClass().getSimpleName(), super.toString());  }",toString
263,"  void <extra_id_0>() {    assertFalse(source.ifNonZero(-1, 0, 1));  }",testIfNonZero
4,"  void <extra_id_0>() throws Exception {    final var outputPath = Files.createFile(testFolder.resolve(""outputFile""));    RainbowFishSerializer.writeV1(V1, outputPath.toString());    final var fish = RainbowFishSerializer.readV1(outputPath.toString());    assertNotSame(V1, fish);    assertEquals(V1.getName(), fish.getName());    assertEquals(V1.getAge(), fish.getAge());    assertEquals(V1.getLengthMeters(), fish.getLengthMeters());    assertEquals(V1.getWeightTons(), fish.getWeightTons());  }  /**   * Verify if a fish, written as version 2 can be read back as version 1   */  @Test",testWriteV1ReadV1
476,  public static BillPughImplementation <extra_id_0>() {    return InstanceHolder.instance;  },getInstance
3466,"  public static Finder <extra_id_0>(String query, String orQuery, String notQuery) {    return        Finder.contains(query)            .or(Finder.contains(orQuery))            .not(Finder.contains(notQuery));  }  /**   * Filtered finder looking a query with excluded queries as well.   * @param query to find   * @param excludeQueries to exclude   * @return new finder   */",advancedFinder
3794,  void <extra_id_0>();,row
2931,  void <extra_id_0>() {    assertDoesNotThrow(() -> Application.main(new String[]{}));  },shouldExecuteGameApplicationWithoutException
459,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1181,  public T <extra_id_0>() {    return (T) super.clone();  },copy
2788,"  void <extra_id_0>(){    assertThrows(MaxNumOfEventsAllowedException.class, () -> {      final var eventManager = new EventManager();      for(int i=0;i<1100;i++){        eventManager.createAsync(i);      }    });  }",testMaxNumOfEventsAllowedException
3683,"  public String <extra_id_0>() {    return Optional.ofNullable(cache)        .map(LruCache::getCacheDataInListForm)        .orElse(List.of())        .stream()        .map(userAccount -> userAccount.toString() + """")        .collect(Collectors.joining("""", ""--CACHE CONTENT--"", ""----""));  }  /**   * Delegate to backing cache store.   * @param userId {@link String}   * @return {@link UserAccount}   */",print
1085,  int <extra_id_0>() {    this.forward = false;    return --pos;  },back
959,"  public static void <extra_id_0>(String[] args) {    var context = new ClassPathXmlApplicationContext(""applicationContext.xml"");    var repository = context.getBean(PersonRepository.class);    var peter = new Person(""Peter"", ""Sagan"", 17);    var nasta = new Person(""Nasta"", ""Kuzminova"", 25);    var john = new Person(""John"", ""lawrence"", 35);    var terry = new Person(""Terry"", ""Law"", 36);    // Add new Person records    repository.save(peter);    repository.save(nasta);    repository.save(john);    repository.save(terry);    // Count Person records    LOGGER.info(""Count Person records: {}"", repository.count());    // Print all records    var persons = (List<Person>) repository.findAll();    persons.stream().map(Person::toString).forEach(LOGGER::info);    // Update Person    nasta.setName(""Barbora"");    nasta.setSurname(""Spotakova"");    repository.save(nasta);    repository.findById(2L).ifPresent(p -> LOGGER.info(""Find by id 2: {}"", p));    // Remove record from Person    repository.deleteById(2L);    // count records    LOGGER.info(""Count Person records: {}"", repository.count());    // find by name    repository        .findOne(new PersonSpecifications.NameEqualSpec(""John""))        .ifPresent(p -> LOGGER.info(""Find by John is {}"", p));    // find by age    persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));    LOGGER.info(""Find Person with age between 20,40: "");    persons.stream().map(Person::toString).forEach(LOGGER::info);    repository.deleteAll();    context.close();  }",main
3838,"  public void <extra_id_0>(ModemVisitor modemVisitor) {    if (modemVisitor instanceof ZoomVisitor) {      ((ZoomVisitor) modemVisitor).visit(this);    } else {      LOGGER.info(""Only ZoomVisitor is allowed to visit Zoom modem"");    }  }  /**   * Zoom modem's toString method.   */  @Override",accept
1022,"    public String <extra_id_0>() {      return ""3"";    }    @Override",getName
206,  public long <extra_id_0>() {    return version;  },getVersion
409,  protected Supplier<Integer> <extra_id_0>() {    return value::get;  },getter
1050,    void <extra_id_0>() {      isForward = false;    },directionToBack
2587,  public String <extra_id_0>() {    return systemId;  }  /**   * {@inheritDoc}   */  @Override,systemId
2390,"  void <extra_id_0>(NumberExpression first) throws Exception {    final var expectedValue = first.interpret();    final var testStringValue = String.valueOf(expectedValue);    final var numberExpression = new NumberExpression(testStringValue);    assertEquals(expectedValue, numberExpression.interpret());  }",testFromString
2756,"  private void <extra_id_0>(EventManager eventManager, Scanner s) {    s.nextLine();    LOGGER.info(""Just one egg (O) OR all of them (A) ?: "");    var eggChoice = s.nextLine();    if (eggChoice.equalsIgnoreCase(""O"")) {      LOGGER.info(""Which egg?: "");      int eventId = s.nextInt();      try {        eventManager.status(eventId);      } catch (EventDoesNotExistException e) {        LOGGER.error(e.getMessage());      }    } else if (eggChoice.equalsIgnoreCase(""A"")) {      eventManager.statusOfAllEvents();    }  }",processOption3
2256,"  public void <extra_id_0>(String dbName, String ticketsCollectionName,                      String countersCollectionName) {    if (mongoClient != null) {      mongoClient.close();    }    mongoClient = new MongoClient(System.getProperty(""mongo-host""),        Integer.parseInt(System.getProperty(""mongo-port"")));    database = mongoClient.getDatabase(dbName);    ticketsCollection = database.getCollection(ticketsCollectionName);    countersCollection = database.getCollection(countersCollectionName);    if (countersCollection.countDocuments() <= 0) {      initCounters();    }  }",connect
2377,"  void <extra_id_0>(){    // DataBase initialization.    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Assertions.assertEquals(0,db.size(),""Size of null database should be 0"");    // Dummy persons.    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    Person person3 = new Person(3, ""Arthur"", 27489171);    db.insert(person1);    db.insert(person2);    db.insert(person3);    // Test size after insertion.    Assertions.assertEquals(3,db.size(),""Incorrect size for database."");    Person person4 = new Person(4, ""Finn"", 20499078);    Person person5 = new Person(5, ""Michael"", 40599078);    db.insert(person4);    db.insert(person5);    // Test size after more insertions.    Assertions.assertEquals(5,db.size(),""Incorrect size for database."");    Person person5duplicate = new Person(5,""Kevin"",89589122);    db.insert(person5duplicate);    // Test size after attempt to insert record with duplicate key.    Assertions.assertEquals(5,db.size(),""Incorrect size for data base"");  }  @Test",testInsert
2313,"  public static LotteryTicketCheckResult <extra_id_0>(      LotteryTicketRepository repository,      LotteryTicketId id,      LotteryNumbers winningNumbers  ) {    var optional = repository.findById(id);    if (optional.isPresent()) {      if (optional.get().getLotteryNumbers().equals(winningNumbers)) {        return new LotteryTicketCheckResult(CheckResult.WIN_PRIZE, 1000);      } else {        return new LotteryTicketCheckResult(CheckResult.NO_PRIZE);      }    } else {      return new LotteryTicketCheckResult(CheckResult.TICKET_NOT_SUBMITTED);    }  }",checkTicketForPrize
2776,  public void <extra_id_0>() {    if (null == thread) {      return;    }    thread.interrupt();  }  @Override,stop
1129,  private boolean <extra_id_0>(int index) {    return parentIndex(index) >= 0;  },hasParent
313,"  void <extra_id_0>() {    this.method.steal();    assertTrue(appender.logContains(this.expectedTargetResult));    assertTrue(appender.logContains(this.expectedConfuseMethod));    assertTrue(appender.logContains(this.expectedStealMethod));    assertEquals(3, appender.getLogSize());  }",testSteal
1710,  public void <extra_id_0>(String fileName) {    this.fileName = fileName;  }  /**   * Gets the path of the file to be loaded.   *   * @return fileName The path of the file to be loaded.   */,setFileName
1632,"  public static void <extra_id_0>() {    bank = new Bank(ACCOUNT_NUM, BASE_AMOUNT);  }  @AfterAll",Setup
1519,  public abstract boolean <extra_id_0>();,isAt
203,  public void <extra_id_0>(String title) {    this.title = title;  },setTitle
2122,"    public void <extra_id_0>(CakeToppingInfo toppingInfo) {        cakeToppingDao.save(new CakeTopping(toppingInfo.name, toppingInfo.calories));    }    @Override",saveNewTopping
537,"  public Spellbook <extra_id_0>(String name) {    Transaction tx = null;    Spellbook result;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();      CriteriaQuery<Spellbook> builderQuery = criteriaBuilder.createQuery(Spellbook.class);      Root<Spellbook> root = builderQuery.from(Spellbook.class);      builderQuery.select(root).where(criteriaBuilder.equal(root.get(""name""), name));      Query<Spellbook> query = session.createQuery(builderQuery);      result = query.uniqueResult();      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }    return result;  }",findByName
330,    BuildStep <extra_id_0>();  }  /**   * This step is in charge of abilities. Next Step available : BuildStep   */,noSpell
3564,  public String <extra_id_0>() {    try {      return this.quickService.attemptRequest();    } catch (RemoteServiceException e) {      return e.getMessage();    }  },quickServiceResponse
1360,"  void <extra_id_0>() {    SignupModel model = new SignupModel();    model.setPassword(""password1234"");    assertEquals(""password1234"", model.getPassword());  }",testSetPassword
1588,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1822,  List<Worker> <extra_id_0>() {    return this.workers;  },getWorkers
577,  public String <extra_id_0>() {    return name;  },toString
389,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
3628,"  public <T> T <extra_id_0>(AsyncResult<T> asyncResult) throws ExecutionException,      InterruptedException {    if (!asyncResult.isCompleted()) {      asyncResult.await();    }    return asyncResult.getValue();  }  /**   * Simple implementation of async result that allows completing it successfully with a value or   * exceptionally with an exception. A really simplified version from its real life cousins   * FutureTask and CompletableFuture.   *   * @see java.util.concurrent.FutureTask   * @see java.util.concurrent.CompletableFuture   */",endProcess
3650,  public int <extra_id_0>(int wizard) {    return wizards[wizard].getWisdom();  },getWisdom
3140,"  Stream<Customer> <extra_id_0>() throws Exception;  /**   * Get customer as Optional by id.   *   * @param id unique identifier of the customer.   * @return an optional with customer if a customer with unique identifier <code>id</code> exists,   *     empty optional otherwise.   * @throws Exception if any error occurs.   */",getAll
1568,"  void <extra_id_0>() throws IOException {    /* Get singleton instance of File Logger Module */    final var fileLoggerModule = FileLoggerModule.getSingleton();    /* Prepare the essential sub modules, to perform the sequence of jobs */    fileLoggerModule.prepare();    /* Print 'Message' in file */    fileLoggerModule.printString(MESSAGE);    /* Test if 'Message' is printed in file */    assertEquals(readFirstLine(OUTPUT_FILE), MESSAGE);    /* Unprepare to cleanup the modules */    fileLoggerModule.unprepare();  }  /**   * This test verify that nothing is printed in output file   *   * @throws IOException if program is not able to find log files (output.txt and error.txt)   */  @Test",testFileMessage
944,"  public void <extra_id_0>(Message msg) {    try {      if (null != msg) {        blkQueue.add(msg);      }    } catch (Exception e) {      LOGGER.error(e.getMessage());    }  }  /**   * All the messages will be retrieved by the ServiceExecutor by calling this method and process   * them. Retrieves and removes the head of this queue, or returns null if this queue is empty.   */",submitMsg
2786,"  void <extra_id_0>() {    var eventManager = new EventManager();    try {      var eventTime = 1;      var aEventId1 = eventManager.createAsync(eventTime);      var aEventId2 = eventManager.createAsync(eventTime);      var aEventId3 = eventManager.createAsync(eventTime);      assertEquals(3, eventManager.getEventPool().size());      eventManager.start(aEventId1);      eventManager.start(aEventId2);      eventManager.start(aEventId3);      var currentTime = System.currentTimeMillis();      // +2 to give a bit of buffer time for event to complete properly.      var endTime = currentTime + (eventTime + 2 * 1000);      while (System.currentTimeMillis() < endTime) ;      assertTrue(eventManager.getEventPool().isEmpty());    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException e) {      LOGGER.error(e.getMessage());    }  }  @Test",testFullAsynchronousEvent
333,    BuildStep <extra_id_0>();  }  /**   * This is the final step in charge of building the Character Object. Validation should be here.   */,noAbilities
849,"  public void <extra_id_0>() throws IOException {    var javaChannel = getJavaChannel();    javaChannel.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), port));    javaChannel.configureBlocking(false);    LOGGER.info(""Bound TCP socket at port: {}"", port);  }  /**   * Writes the pending {@link ByteBuffer} to the underlying channel sending data to the intended   * receiver of the packet.   */  @Override",bind
2388,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1871,  void <extra_id_0>(Action action);,partyAction
2830,"  public static void <extra_id_0>(String[] args) {    // initialize game objects and print their status    var objects = List.of(        new FlamingAsteroid(0, 0, 5, 5),        new SpaceStationMir(1, 1, 2, 2),        new Meteoroid(10, 10, 15, 15),        new SpaceStationIss(12, 12, 14, 14)    );    objects.forEach(o -> LOGGER.info(o.toString()));    LOGGER.info("""");    // collision check    objects.forEach(o1 -> objects.forEach(o2 -> {      if (o1 != o2 && o1.intersectsWith(o2)) {        o1.collision(o2);      }    }));    LOGGER.info("""");    // output eventual object statuses    objects.forEach(o -> LOGGER.info(o.toString()));    LOGGER.info("""");  }",main
2580,  public List<? extends ProbableThreat> <extra_id_0>() {    return threats;  }  /**   * {@inheritDoc}   */  @Override,threats
2118,    public void <extra_id_0>(String... args) {        //initialize sample data        initializeData();        // create view and render it        var cakeView = new CakeViewImpl(cakeBakingService);        cakeView.render();    }    /**     * Initializes the example data.     */,run
41,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
2406,"  public String <extra_id_0>() {    return ""+"";  }",toString
1420,"  public void <extra_id_0>() {    var enumValues = WeatherType.values();    currentWeather = enumValues[(currentWeather.ordinal() + 1) % enumValues.length];    LOGGER.info(""The weather changed to {}."", currentWeather);    notifyObservers(currentWeather);  }",timePasses
3540,"  void <extra_id_0>() {    var monitoringService = new MonitoringService(null,null);    var response = monitoringService.localResourceResponse();    assertEquals(response, ""Local Service is working"");  }  @Test",testLocalResponse
3425,"    private Commander <extra_id_0>() {        return buildCommanderObjectWithoutDB(false, false, new IllegalStateException());    }",buildCommanderObjectWithDB
1241,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1367,"  void <extra_id_0>() {    final var level1 = TREE_ROOT.getRight();    assertNotNull(level1);    assertEquals(""level1_b"", level1.getName());    assertEquals(1, level1.getTreeSize());    assertSame(NullNode.getInstance(), level1.getRight());    assertSame(NullNode.getInstance(), level1.getLeft());  }",testGetRight
1463,  protected Oliphaunt <extra_id_0>() {    return new Oliphaunt();  },create
1053,    int <extra_id_0>() {      return currentNumber;    }  }},current
3588,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2459,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3, 10, 9, 8);    final var evenItems = createFluentIterable(integers)        .filter(i -> i % 2 == 0)        .asList();    assertNotNull(evenItems);    assertEquals(3, evenItems.size());    assertEquals(Integer.valueOf(2), evenItems.get(0));    assertEquals(Integer.valueOf(10), evenItems.get(1));    assertEquals(Integer.valueOf(8), evenItems.get(2));  }  @Test",testFilter
1362,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3483,  public void <extra_id_0>(Runnable runnable) {    runnable.run();    undoStack.offerLast(runnable);  }  /**   * Undo last spell.   */,castSpell
1399,  public String <extra_id_0>() {    return log.get(log.size() - 1).getFormattedMessage();  },getLastMessage
3319,"  protected void <extra_id_0>() {    System.out.print("" "");  }",printThisBefore
2304,  public static LotteryNumbers <extra_id_0>() {    return new LotteryNumbers();  }  /**   * Creates lottery number from given set of numbers.   *   * @return given LotteryNumbers   */,createRandom
2336,"  void <extra_id_0>() {    // create new lottery ticket and save it    var details = new PlayerDetails(""foo@bar.com"", ""123-123"", ""07001234"");    var random = LotteryNumbers.createRandom();    var original = new LotteryTicket(new LotteryTicketId(), details, random);    var saved = repository.save(original);    assertEquals(1, repository.getTicketsCollection().countDocuments());    assertTrue(saved.isPresent());    // fetch the saved lottery ticket from database and check its contents    var found = repository.findById(saved.get());    assertTrue(found.isPresent());    var ticket = found.get();    assertEquals(""foo@bar.com"", ticket.getPlayerDetails().getEmail());    assertEquals(""123-123"", ticket.getPlayerDetails().getBankAccount());    assertEquals(""07001234"", ticket.getPlayerDetails().getPhoneNumber());    assertEquals(original.getLotteryNumbers(), ticket.getLotteryNumbers());    // clear the collection    repository.deleteAll();    assertEquals(0, repository.getTicketsCollection().countDocuments());  }",testCrudOperations
2395,"  public abstract Stream<Arguments> <extra_id_0>();  /**   * Verify if the expression calculates the correct result when calling {@link E#interpret()}   */  @ParameterizedTest  @MethodSource(""expressionProvider"")",expressionProvider
204,  public String <extra_id_0>() {    return author;  },getAuthor
1967,"  void <extra_id_0>() {    var g = new GuardedQueue();    g.put(12);    assertEquals(Integer.valueOf(12), g.get());  }",testPut
2217,"  void <extra_id_0>() {    gameLoop.update();    assertEquals(0.5f, gameLoop.controller.getBulletPosition(), 0);  }",testUpdate
3266,"  void <extra_id_0>(String title, double price, String username);",bookAddedToAuthor
1045,"  public String <extra_id_0>() {    return ""withdrawing Money"";  }  @Override",getName
3634,"  void <extra_id_0>() {    var bytecode = new int[2];    bytecode[0] = LITERAL.getIntValue();    bytecode[1] = 10;    var vm = new VirtualMachine();    vm.execute(bytecode);    assertEquals(1, vm.getStack().size());    assertEquals(Integer.valueOf(10), vm.getStack().pop());  }  @Test",testLiteral
2413,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
1604,"  void <extra_id_0>() {    assertNotNull(testBookList);    assertTrue(testBookList.get(0).toString().contains(""Head First Design Patterns""));  }  @Test",testLoadData
3370,"  private void <extra_id_0>() throws Exception {    if (queueItems != 0) {      var qt = queue.peek(); //this should probably be cloned here      //this is why we have retry for doTasksInQueue      LOG.trace(ORDER_ID + "": Started doing task of type {}"", qt.order.id, qt.getType());      if (qt.getFirstAttemptTime() == -1) {        qt.setFirstAttemptTime(System.currentTimeMillis());      }      if (System.currentTimeMillis() - qt.getFirstAttemptTime() >= queueTaskTime) {        tryDequeue();        LOG.trace(ORDER_ID + "": This queue task of type {}""            + "" does not need to be done anymore (timeout), dequeue.."", qt.order.id, qt.getType());      } else {        if (qt.taskType.equals(TaskType.PAYMENT)) {          if (!qt.order.paid.equals(PaymentStatus.TRYING)) {            tryDequeue();            LOG.trace(ORDER_ID + "": This payment task already done, dequeueing.."", qt.order.id);          } else {            sendPaymentRequest(qt.order);            LOG.debug(ORDER_ID + "": Trying to connect to payment service.."", qt.order.id);          }        } else if (qt.taskType.equals(TaskType.MESSAGING)) {          if (qt.order.messageSent.equals(MessageSent.PAYMENT_FAIL)              || qt.order.messageSent.equals(MessageSent.PAYMENT_SUCCESSFUL)) {            tryDequeue();            LOG.trace(ORDER_ID + "": This messaging task already done, dequeue.."", qt.order.id);          } else if (qt.messageType == 1 && (!qt.order.messageSent.equals(MessageSent.NONE_SENT)              || !qt.order.paid.equals(PaymentStatus.TRYING))) {            tryDequeue();            LOG.trace(ORDER_ID + "": This messaging task does not need to be done,""                + "" dequeue.."", qt.order.id);          } else if (qt.messageType == 0) {            sendPaymentFailureMessage(qt.order);            LOG.debug(ORDER_ID + TRY_CONNECTING_MSG_SVC, qt.order.id);          } else if (qt.messageType == 1) {            sendPaymentPossibleErrorMsg(qt.order);            LOG.debug(ORDER_ID + TRY_CONNECTING_MSG_SVC, qt.order.id);          } else if (qt.messageType == 2) {            sendSuccessMessage(qt.order);            LOG.debug(ORDER_ID + TRY_CONNECTING_MSG_SVC, qt.order.id);          }        } else if (qt.taskType.equals(TaskType.EMPLOYEE_DB)) {          if (qt.order.addedToEmployeeHandle) {            tryDequeue();            LOG.trace(ORDER_ID + "": This employee handle task already done,""                + "" dequeue.."", qt.order.id);          } else {            employeeHandleIssue(qt.order);            LOG.debug(ORDER_ID + "": Trying to connect to employee handle.."", qt.order.id);          }        }      }    }    if (queueItems == 0) {      LOG.trace(""Queue is empty, returning.."");    } else {      Thread.sleep(queueTaskTime / 3);      tryDoingTasksInQueue();    }  }",doTasksInQueue
2980,  public static void <extra_id_0>(String[] args) {    var app = new App();    app.run();  },main
3523,"  public static List<Car> <extra_id_0>() {    return List.of(new Car(""Jeep"", ""Wrangler"", 2011, Category.JEEP),        new Car(""Jeep"", ""Comanche"", 1990, Category.JEEP),        new Car(""Dodge"", ""Avenger"", 2010, Category.SEDAN),        new Car(""Buick"", ""Cascada"", 2016, Category.CONVERTIBLE),        new Car(""Ford"", ""Focus"", 2012, Category.SEDAN),        new Car(""Chevrolet"", ""Geo Metro"", 1992, Category.CONVERTIBLE));  }",createCars
3343,    void <extra_id_0>() {        assertDoesNotThrow(() -> App.main(new String[]{}));    },shouldExecuteComponentWithoutException
3122,  void <extra_id_0>() {    this.layerA = new LayerA();  }  @Test,initiateLayerA
1609,  public void <extra_id_0>(Book selectedBook) {    this.selectedBook = selectedBook;  },setSelectedBook
173,  private static void <extra_id_0>(DataSource dataSource) throws java.sql.SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);    }  },deleteSchema
3233,"  public String <extra_id_0>() {    return ""Book{"" + ""genre="" + genre + "", author='"" + author + '\''            + "", title='"" + title + '\'' + "", publicationDate="" + publicationDate + '}';  }  /**   * Curried book builder/creator function.   */",toString
881,"  private static void <extra_id_0>(long millis) {    try {      Thread.sleep(millis);    } catch (InterruptedException e) {      LOGGER.error(""sleep interrupted"", e);    }  }  /**   * A logging client that sends requests to Reactor on TCP socket.   */",artificialDelayOf
602,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    GiantView giantView = new GiantView();    Dispatcher dispatcher = new Dispatcher(giantView);    assertEquals(Nourishment.SATURATED, model.getNourishment());    dispatcher.addAction(action);    GiantController controller = new GiantController(dispatcher);    controller.setCommand(new Command(Fatigue.ALERT, Health.HEALTHY, Nourishment.HUNGRY), 0);    assertEquals(Fatigue.ALERT, model.getFatigue());    assertEquals(Health.HEALTHY, model.getHealth());    assertEquals(Nourishment.HUNGRY, model.getNourishment());  }  /**   * Test update view.   */  @Test",testSetCommand
1790,"  void <extra_id_0>(Creature source, Creature target) throws InterruptedException {    while (target.isAlive()) {      source.attack(target);    }  }  @Test",killCreature
2731,"  void <extra_id_0>() {    testAllDaysWithoutDefaultObserver(specialDay, event);    testAllDaysWithDefaultObserver(specialDay, event);  }  /**   * Pass each week of the day, day by day to the event emitter and verify of the given observers   * received the correct event on the special day.   *   * @param specialDay The special day on which an event is emitted   * @param event      The expected event emitted by the test object   * @param emitter    The event emitter   * @param observers  The registered observer mocks   */",testAllDays
851,"  void <extra_id_0>(AbstractNioChannel channel, Object readObject, SelectionKey key);",handleChannelRead
1906,"  void <extra_id_0>() {    try {      final var ringInstance = new RingInstance(null, 1, 1);      var ringInstanceClass = AbstractInstance.class;      var aliveField = ringInstanceClass.getDeclaredField(""alive"");      aliveField.setAccessible(true);      aliveField.set(ringInstance, false);      assertFalse(ringInstance.isAlive());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to access field alive."");    }  }  @Test",testIsAlive
3463,  default Finder <extra_id_0>(Finder andFinder) {    return        txt -> this            .find(txt)            .stream()            .flatMap(line -> andFinder.find(line).stream())            .collect(Collectors.toList());  },and
2146,"      protected void <extra_id_0>() {        super.done();        try {          /*           * called in context of background thread. There is other variant possible where result is           * posted back and sits in the queue of caller thread which then picks it up for           * processing. An example of such a system is Android OS, where the UI elements can only           * be updated using UI thread. So result must be posted back in UI thread.           */          task.onPostCall(get());        } catch (InterruptedException e) {          // should not occur        } catch (ExecutionException e) {          task.onError(e.getCause());        }      }    });  }  /**   * Stops the pool of workers. This is a blocking call to wait for all tasks to be completed.   */",done
498,"  void <extra_id_0>() {    try {      var data = new Data(1, ""test"", Data.DataType.TYPE_1);      lookupShardManager.storeData(data);      var field = LookupShardManager.class.getDeclaredField(""lookupMap"");      field.setAccessible(true);      var lookupMap = (Map<Integer, Integer>) field.get(lookupShardManager);      var shardId = lookupMap.get(1);      var shard = lookupShardManager.getShardById(shardId);      assertEquals(data, shard.getDataById(1));    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }",testStoreData
2783,"  void <extra_id_0>() {    var eventManager = new EventManager();    try {      var sEventId = eventManager.create(60);      eventManager.start(sEventId);      assertEquals(1, eventManager.getEventPool().size());      assertTrue(eventManager.getEventPool().size() < EventManager.MAX_RUNNING_EVENTS);      assertNotEquals(-1, eventManager.numOfCurrentlyRunningSyncEvent());      eventManager.cancel(sEventId);      assertTrue(eventManager.getEventPool().isEmpty());    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException        | InvalidOperationException e) {      LOGGER.error(e.getMessage());    }  }  @Test",testSynchronousEvent
1739,  void <extra_id_0>() {    viewModel.handleAction(new AdditionCalculatorAction());  }  /**   * Handle subtraction action.   */,add
2574,  List<? extends Threat> <extra_id_0>();  /**   * Returns the instance of {@link Filterer} helper interface that allows to covariantly   * specify lower bound for predicate that we want to filter by.   * @return an instance of {@link Filterer} helper interface.   */,threats
1770,"  private void <extra_id_0>(Creature reacher, @NonNull Creature holder, Lockable sword)      throws InterruptedException {    LOGGER.info(""A duel between {} and {} has been started!"", reacher.getName(), holder.getName());    boolean randBool;    while (this.target.isLocked() && reacher.isAlive() && holder.isAlive()) {      randBool = random.nextBoolean();      if (randBool) {        reacher.attack(holder);      } else {        holder.attack(reacher);      }    }    if (reacher.isAlive()) {      if (!reacher.acquire(sword)) {        fightForTheSword(reacher, sword.getLocker(), sword);      } else {        LOGGER.info(""{} has acquired the sword!"", reacher.getName());      }    }  }",fightForTheSword
371,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(10000), () -> {      final var service = Executors.newFixedThreadPool(THREAD_COUNT);      final var tasks = IntStream.range(0, TASK_COUNT)          .<Callable<Integer>>mapToObj(i -> () -> factory.apply(1).getId())          .collect(Collectors.toCollection(ArrayList::new));      final var ids = service.invokeAll(tasks)          .stream()          .map(TaskTest::get)          .filter(Objects::nonNull)          .toList();      service.shutdownNow();      final var uniqueIdCount = ids.stream()          .distinct()          .count();      assertEquals(TASK_COUNT, ids.size());      assertEquals(TASK_COUNT, uniqueIdCount);    });  }  /**   * Verify if the time per execution of a task matches the actual time required to execute the task   * a given number of times   */  @Test",testIdGeneration
2626,  String <extra_id_0>(User user);  /**   * Returns if the welcome message to be displayed will be the enhanced version.   *   * @return Boolean {@code true} if enhanced.   */,getWelcomeMessage
1485,"  public AlbumListPage <extra_id_0>() {    var loginButton = (HtmlSubmitInput) page.getElementById(""loginButton"");    try {      loginButton.click();    } catch (IOException e) {      e.printStackTrace();    }    return new AlbumListPage(webClient);  }",login
2748,  public String <extra_id_0>() {    return description;  },toString
2287,"  public void <extra_id_0>(String dbName, String eventsCollectionName) {    if (mongoClient != null) {      mongoClient.close();    }    mongoClient = new MongoClient(System.getProperty(""mongo-host""),        Integer.parseInt(System.getProperty(""mongo-port"")));    database = mongoClient.getDatabase(dbName);    eventsCollection = database.getCollection(eventsCollectionName);  }  /**   * Get mongo client.   *   * @return mongo client   */",connect
1706,  public String <extra_id_0>() {    return this.fileName;  }  @Override,getFileName
1179,  Beast <extra_id_0>();,createBeast
3733,  void <extra_id_0>() {    MongoCollection<Document> mongoCollection = mock(MongoCollection.class);    when(db.getCollection(CachingConstants.USER_ACCOUNT)).thenReturn(mongoCollection);    assertDoesNotThrow(()-> {mongoDb.writeToDb(userAccount);});  }  @Test,writeToDb
896,  public static CustomerRegistry <extra_id_0>() {    return instance;  },getInstance
3388,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb =        new QueueDatabase(new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException(),            new DatabaseUnavailableException(), new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",queueMessageTaskDatabaseUnavailableCase
3814,  Castle <extra_id_0>();,createCastle
2623,"  public void <extra_id_0>() {    LOGGER.error(""Error 500"");  }",display
2838,"  void <extra_id_0>() {    testCollision(        new SpaceStationIss(1, 1, 3, 4),        true, false,        false, false    );  }  /**   * Test what happens we collide with MIR   */  @Test",testCollideSpaceStationIss
1017,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""+1"");      return ChapterResult.success(value);    }    @Override",process
742,"  void <extra_id_0>(Bubble b) {    // finding points within area of a square drawn with centre same as    // centre of bubble and length = radius of bubble    var rect = new Rect(b.coordinateX, b.coordinateY, 2D * b.radius, 2D * b.radius);    var quadTreeQueryResult = new ArrayList<Point>();    this.bubblesQuadTree.query(rect, quadTreeQueryResult);    //handling these collisions    b.handleCollision(quadTreeQueryResult, this.bubbles);  }",handleCollisionsUsingQt
1668,  public Fatigue <extra_id_0>() {    return giant.getFatigue();  },getFatigue
2821,  public boolean <extra_id_0>() {    return onFire;  },isOnFire
411,  protected Supplier<Integer> <extra_id_0>() {    return () -> value;  },getter
1611,  public void <extra_id_0>() {    if (selectedBook != null) {      getBookList().remove(selectedBook);      selectedBook = null;    }  },deleteBook
3556,  String <extra_id_0>();  // Set the specific state manually.,getState
917,"  public void <extra_id_0>() throws InterruptedException {    LOGGER.info(""{} begin"", name);    Thread.sleep(writingTime);    LOGGER.info(""{} finished after writing {}ms"", name, writingTime);  }",write
1071,  Saga <extra_id_0>(Saga saga);  /**   * get name method.   *   * @return service name.   */,execute
2356,"  void <extra_id_0>() {    assertEquals(0, mongoBank.getFunds(""000-000""));    mongoBank.setFunds(""000-000"", 10);    assertEquals(10, mongoBank.getFunds(""000-000""));    assertEquals(0, mongoBank.getFunds(""111-111""));    mongoBank.transferFunds(9, ""000-000"", ""111-111"");    assertEquals(1, mongoBank.getFunds(""000-000""));    assertEquals(9, mongoBank.getFunds(""111-111""));  }",testFundTransfers
1231,  public String[] <extra_id_0>() {    var result = new String[data.getAlbums().size()];    for (var i = 0; i < result.length; i++) {      result[i] = data.getAlbums().get(i).getTitle();    }    return result;  },getAlbumList
3702,  public List<UserAccount> <extra_id_0>() {    var listOfCacheData = new ArrayList<UserAccount>();    var temp = head;    while (temp != null) {      listOfCacheData.add(temp.userAccount);      temp = temp.next;    }    return listOfCacheData;  }  /**   * Set cache capacity.   *   * @param newCapacity int   */,getCacheDataInListForm
3413,  public QueueTask <extra_id_0>(String taskId) {    return null;  },get
1415,  public void <extra_id_0>(WeatherObserver obs) {    observers.add(obs);  },addObserver
1422,"  public void <extra_id_0>(O observer) {    this.observers.remove(observer);  }  /**   * Notify observers.   */  @SuppressWarnings(""unchecked"")",removeObserver
3745,"  public void <extra_id_0>() {    LOGGER.info(""Bloodlust slowly disappears."");  }",onDeactivate
3289,  public void <extra_id_0>(final Member member) {    this.listeners.add(member);  }  /**   * Deregister a member to stop receiving events.   *   * @param member The member to deregister   */,subscribe
1371,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3801,"  void <extra_id_0>() {    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ELF);    final var kingdom = app.getKingdom();    final var elfCastle = kingdom.getCastle();    assertTrue(elfCastle instanceof ElfCastle);    assertEquals(ElfCastle.DESCRIPTION, elfCastle.getDescription());    app.createKingdom(Kingdom.FactoryMaker.KingdomType.ORC);    final var orcCastle = kingdom.getCastle();    assertTrue(orcCastle instanceof OrcCastle);    assertEquals(OrcCastle.DESCRIPTION, orcCastle.getDescription());  }  @Test",verifyCastleCreation
2453,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3, 10, 9, 8);    final var first4 = createFluentIterable(integers)        .first(4)        .asList();    assertNotNull(first4);    assertEquals(4, first4.size());    assertEquals(integers.get(0), first4.get(0));    assertEquals(integers.get(1), first4.get(1));    assertEquals(integers.get(2), first4.get(2));    assertEquals(integers.get(3), first4.get(3));  }  @Test",testFirstCount
3698,"  public void <extra_id_0>(final String userId) {    var toBeRemoved = cache.remove(userId);    if (toBeRemoved != null) {      LOGGER.info(""# {} has been updated! ""              + ""Removing older version from cache..."", userId);      remove(toBeRemoved);    }  }  /**   * Check if the cache is full.   * @return boolean   */",invalidate
1959,"  public void <extra_id_0>(Integer id) {    LOGGER.info(""delete user at: "" + id);    try (var session = factory.openSession()) {      var tx = session.beginTransaction();      var user = session.get(User.class, id);      session.delete(user);      tx.commit();    } catch (HibernateException e) {      LOGGER.debug(""fail to delete user"", e);    }  }  /**   * Get user.   * @param id user id   * @return deleted user   */",deleteUser
2620,  private Command <extra_id_0>(String request) {    var commandClass = getCommandClass(request);    try {      return (Command) commandClass.getDeclaredConstructor().newInstance();    } catch (Exception e) {      throw new ApplicationException(e);    }  },getCommand
2843,"  void <extra_id_0>() {    testCollision(        new FlamingAsteroid(1, 2, 3, 4),        false, true,        false, true    );  }  /**   * Test what happens we collide with an meteoroid   */  @Test",testCollideFlamingAsteroid
897,"  public Customer <extra_id_0>(Customer customer) {    return customerMap.put(customer.id(), customer);  }",addCustomer
2520,"  void <extra_id_0>() {    var blacksmith = new ElfBlacksmith();    var weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);    verifyWeapon(weapon, WeaponType.SPEAR, ElfWeapon.class);  }  /**   * This method asserts that the weapon object that is passed is an instance of the clazz and the   * weapon is of type expectedWeaponType.   *   * @param weapon             weapon object which is to be verified   * @param expectedWeaponType expected WeaponType of the weapon   * @param clazz              expected class of the weapon   */",testElfBlacksmithWithSpear
1134,  private void <extra_id_0>(Message message) {    LOGGER.info(message.toString());  },processMessage
975,"  void <extra_id_0>() {    assertEquals(4, repository.count());  }  @Test",testCount
1873,"  public void <extra_id_0>(PartyMember actor, Action action) {    for (var member : members) {      if (!member.equals(actor)) {        member.partyAction(action);      }    }  }  @Override",act
1514,"  public LoginPage <extra_id_0>(String password) {    var passwordInputPasswordField = (HtmlPasswordInput) page.getElementById(""password"");    passwordInputPasswordField.setText(password);    return this;  }  /**   * Clicking on the login button to 'login'.   *   * @return {@link AlbumListPage} - this is the page that user gets navigated to once successfully   *     logged in   */",enterPassword
230,"  private void <extra_id_0>() {    while (isRunning) {      processInput();      update();      render();    }  }  /**   * Handle any user input that has happened since the last call. In order to   * simulate the situation in real-life game, here we add a random time lag.   * The time lag ranges from 50 ms to 250 ms.   */",gameLoop
3341,"    void <extra_id_0>(){        LOGGER.info(""eventInputTest:"");        playerTest.update(KeyEvent.KEY_LOCATION_LEFT);        assertEquals(-1, playerTest.getVelocity());        assertEquals(-1, playerTest.getCoordinate());        playerTest.update(KeyEvent.KEY_LOCATION_RIGHT);        playerTest.update(KeyEvent.KEY_LOCATION_RIGHT);        assertEquals(1, playerTest.getVelocity());        assertEquals(0, playerTest.getCoordinate());        LOGGER.info(Integer.toString(playerTest.getCoordinate()));        LOGGER.info(Integer.toString(playerTest.getVelocity()));        GameObject p2 = GameObject.createPlayer();        p2.update(KeyEvent.KEY_LOCATION_LEFT);        //in the case of an unknown, object stats are set to default        p2.update(KeyEvent.KEY_LOCATION_UNKNOWN);        assertEquals(-1, p2.getVelocity());    }    /**     * Tests the demo component interface.     */    @Test",eventInputTest
956,"  private static Properties <extra_id_0>() {    var properties = new Properties();    properties.setProperty(""hibernate.dialect"", ""org.hibernate.dialect.H2Dialect"");    properties.setProperty(""hibernate.hbm2ddl.auto"", ""create-drop"");    return properties;  }  /**   * Get transaction manager.   */  @Bean",jpaProperties
808,    public boolean <extra_id_0>(String message) {      return log.stream().anyMatch(event -> event.getMessage().equals(message));    }  }},logContains
480,  public static synchronized ThreadSafeLazyLoadedIvoryTower <extra_id_0>() {    if (instance == null) {      instance = new ThreadSafeLazyLoadedIvoryTower();    }    return instance;  },getInstance
1538,  public void <extra_id_0>() {    isDrunk = false;  }  @Override,makeSober
3625,"  <T> T <extra_id_0>(AsyncResult<T> asyncResult) throws ExecutionException, InterruptedException;",endProcess
892,"  private AbstractNioChannel <extra_id_0>(int port, ChannelHandler handler) throws IOException {    var channel = new NioServerSocketChannel(port, handler);    channel.bind();    channels.add(channel);    return channel;  }",tcpChannel
1776,"  void <extra_id_0>(){    elf = new Elf(""Nagdil"");    orc = new Orc(""Ghandar"");    sword = new SwordOfAragorn();  }  @Test",init
1947,"  public static void <extra_id_0>(String[] args) {    Map<Integer, Instance> instanceMap = new HashMap<>();    var messageManager = new RingMessageManager(instanceMap);    var instance1 = new RingInstance(messageManager, 1, 1);    var instance2 = new RingInstance(messageManager, 2, 1);    var instance3 = new RingInstance(messageManager, 3, 1);    var instance4 = new RingInstance(messageManager, 4, 1);    var instance5 = new RingInstance(messageManager, 5, 1);    instanceMap.put(1, instance1);    instanceMap.put(2, instance2);    instanceMap.put(3, instance3);    instanceMap.put(4, instance4);    instanceMap.put(5, instance5);    instance2.onMessage(new Message(MessageType.HEARTBEAT_INVOKE, """"));    final var thread1 = new Thread(instance1);    final var thread2 = new Thread(instance2);    final var thread3 = new Thread(instance3);    final var thread4 = new Thread(instance4);    final var thread5 = new Thread(instance5);    thread1.start();    thread2.start();    thread3.start();    thread4.start();    thread5.start();    instance1.setAlive(false);  }",main
3247,"  public BigInteger <extra_id_0>(String username) {    BigInteger bookcount;    try (var session = sessionFactory.openSession()) {      var sqlQuery = session.createNativeQuery(              ""SELECT count(b.title)"" + "" FROM  Book b, Author a""                      + "" where b.author_id = a.id and a.username=:username"");      sqlQuery.setParameter(AppConstants.USER_NAME, username);      bookcount = (BigInteger) sqlQuery.uniqueResult();    }    return bookcount;  }  @Override",getAuthorBooksCount
1746,  public String <extra_id_0>() {    return TAG;  },tag
1049,    boolean <extra_id_0>() {      return isForward;    },isForward
3532,"      public int <extra_id_0>(Car o1, Car o2) {        return o1.getYear() - o2.getYear();      }    });",compare
1537,  public void <extra_id_0>() {    isDrunk = true;  }  @Override,makeDrunk
902,"  void <extra_id_0>() {    Customer customerWithId5 = customerRegistry.getCustomer(""5"");    assertNull(customerWithId5);  }",shouldReturnNullWhenQueriedCustomerIsNotInRegistry
1800,"  static int[] <extra_id_0>(int[][] data, int num) {    var initialDivision = data.length / num; //equally dividing    var divisions = new int[num];    Arrays.fill(divisions, initialDivision);    if (initialDivision * num != data.length) {      var extra = data.length - initialDivision * num;      var l = 0;      //equally dividing extra among all parts      while (extra > 0) {        divisions[l] = divisions[l] + 1;        extra--;        if (l == num - 1) {          l = 0;        } else {          l++;        }      }    }    return divisions;  }  @Override",makeDivisions
2341,"  void <extra_id_0>() {    var numbers1 = LotteryNumbers.create(Set.of(1, 2, 3, 4));    var numbers2 = LotteryNumbers.create(Set.of(1, 2, 3, 4));    assertEquals(numbers1, numbers2);    var numbers3 = LotteryNumbers.create(Set.of(11, 12, 13, 14));    assertNotEquals(numbers1, numbers3);  }",testEquals
1874,  public void <extra_id_0>(PartyMember member) {    members.add(member);    member.joinedParty(this);  },addMember
224,  public static void <extra_id_0>() {    statue = null;  }  @Test,tearDown
3646,"  public void <extra_id_0>(int wizard, int amount) {    wizards[wizard].setHealth(amount);  }",setHealth
2609,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
189,"  public Boolean <extra_id_0>(Room room) throws Exception {    try (var connection = getConnection();         var statement =             connection                 .prepareStatement(""UPDATE ROOMS SET ROOM_TYPE = ?, PRICE = ?, BOOKED = ?""                     + "" WHERE ID = ?"")) {      statement.setString(1, room.getRoomType());      statement.setInt(2, room.getPrice());      statement.setBoolean(3, room.isBooked());      statement.setInt(4, room.getId());      return statement.executeUpdate() > 0;    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    }  }  @Override",update
2709,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
2187,  public final void <extra_id_0>(ItemType type) {    this.type = type;  },setType
2426,"  public void <extra_id_0>() {    for (var item : MenuItem.values()) {      if (selected.equals(item)) {        LOGGER.info(""* {}"", item);      } else {        LOGGER.info(item.toString());      }    }  }",render
1338,"  void <extra_id_0>() throws Exception {    final var queue = spy(new ItemQueue());    for (var id = 0; id < ITEM_COUNT; id++) {      queue.put(new Item(""producer"", id));    }    reset(queue); // Don't count the preparation above as interactions with the queue    final var consumer = new Consumer(""consumer"", queue);    for (var id = 0; id < ITEM_COUNT; id++) {      consumer.consume();    }    verify(queue, times(ITEM_COUNT)).take();  }",testConsume
2863,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2740,  public void <extra_id_0>(Weekday day) {    if (day == Weekday.SATURDAY) {      notifyObservers(Event.TRAITOR_DETECTED);    }  }  @Override,timePasses
3236,    Book.AddTitle <extra_id_0>(String author);  }  /**   * Functional interface which adds the title to a book.   */,withAuthor
1314,      public boolean <extra_id_0>(Stats stat) {        return false;      }      @Override,has
1955,"  public static List<User> <extra_id_0>() {    final var user1 = new User(""ZhangSan"", ""zhs123"");    final var user2 = new User(""LiSi"", ""ls123"");    final var user3 = new User(""WangWu"", ""ww123"");    return List.of(user1, user2, user3);  }",generateSampleUsers
3502,  public int <extra_id_0>() {    return 1;  }  @Override,getPriority
3172,"  void <extra_id_0>() {    final var newId = 2;    final var otherCustomer = new Customer(newId, FIRSTNAME, LASTNAME);    assertNotEquals(customer, otherCustomer);    assertNotEquals(customer.hashCode(), otherCustomer.hashCode());  }  @Test",notEqualWithDifferentId
3789,"    private static void <extra_id_0>(String urlString, File destination) throws Exception {        if (System.getenv(""MVNW_USERNAME"") != null && System.getenv(""MVNW_PASSWORD"") != null) {            String username = System.getenv(""MVNW_USERNAME"");            char[] password = System.getenv(""MVNW_PASSWORD"").toCharArray();            Authenticator.setDefault(new Authenticator() {                @Override                protected PasswordAuthentication getPasswordAuthentication() {                    return new PasswordAuthentication(username, password);                }            });        }        URL website = new URL(urlString);        ReadableByteChannel rbc;        rbc = Channels.newChannel(website.openStream());        FileOutputStream fos = new FileOutputStream(destination);        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);        fos.close();        rbc.close();    }",downloadFileFromURL
589,"  void <extra_id_0>() {    final var originalEntities = this.dao.findAll();    this.dao.delete(originalEntities.get(1));    this.dao.delete(originalEntities.get(2));    final var entitiesLeft = this.dao.findAll();    assertNotNull(entitiesLeft);    assertEquals(INITIAL_COUNT - 2, entitiesLeft.size());  }  @Test",testDelete
2836,"  void <extra_id_0>() {    testCollision(        new FlamingAsteroid(1, 1, 3, 4),        false, true,        false, false    );  }  /**   * Test what happens we collide with an meteoroid   */  @Test",testCollideFlamingAsteroid
3847,"  public Void <extra_id_0>(String key, Object value) {    properties.put(key, value);    return null;  }  @Override",put
769,  public boolean <extra_id_0>(List<Royalty> tableGuests) {    return tableGuests.stream().allMatch(Royalty::getMood);  },checkIfYouWillBeHanged
1245,  public int <extra_id_0>() {    return log.size();  },getLogSize
1448,"  void <extra_id_0>() {    //Creating parameter object with default values set    parameterObject = ParameterObject.newBuilder()        .withType(""sneakers"")        .build();    searchService = new SearchService();  }  /**   *  Testing parameter object against the overloaded method to verify if the behaviour is same.   */  @Test",setUp
3362,"  private Retry.Operation <extra_id_0>(Order order) {    return (l) -> {      if (!l.isEmpty()) {        if (DatabaseUnavailableException.class.isAssignableFrom(l.get(0).getClass())) {          LOG.debug(ORDER_ID + ERROR_CONNECTING_MSG_SVC              + ""(Payment Success msg), trying again.."", order.id);        } else {          LOG.debug(ORDER_ID + "": Error in creating Payment Success""              + "" messaging request.."", order.id);        }        throw l.remove(0);      }      if (!order.messageSent.equals(MessageSent.PAYMENT_FAIL)          && !order.messageSent.equals(MessageSent.PAYMENT_SUCCESSFUL)) {        var requestId = messagingService.receiveRequest(2);        order.messageSent = MessageSent.PAYMENT_SUCCESSFUL;        LOG.info(ORDER_ID + "": Payment Success message sent,""            + REQUEST_ID, order.id, requestId);      }    };  }",handleSuccessMessageRetryOperation
3586,  void <extra_id_0>() {    netflixService = spy(new NetflixService());    youTubeService = spy(new YouTubeService());    BusinessLookup businessLookup = spy(new BusinessLookup());    businessLookup.setNetflixService(netflixService);    businessLookup.setYouTubeService(youTubeService);    businessDelegate = spy(new BusinessDelegate());    businessDelegate.setLookupService(businessLookup);  }  /**   * In this example the client ({@link MobileClient}) utilizes a business delegate (   * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate   * service and makes the service call.   */  @Test,setup
3351,"  void <extra_id_0>() throws Exception {    //rest is successful    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",shippingDatabaseUnavailableCase
1775,  public synchronized boolean <extra_id_0>() {    return getHealth() > 0;  },isAlive
477,"  public String <extra_id_0>() {    return getDeclaringClass().getCanonicalName() + ""@"" + hashCode();  }",toString
853,  public void <extra_id_0>() {    // no-op  },stop
1580,  public static void <extra_id_0>() {    /* Close all resources */    fileLoggerModule.unprepare();    consoleLoggerModule.unprepare();  }  /**   * Following method is main executor.   */,unprepare
3779,"  void <extra_id_0>() {    assertThrows(IllegalArgumentException.class, () -> new Hero.Builder(Profession.THIEF, null));  }  /**   * Test if the hero build by the builder has the correct attributes, as requested   */  @Test",testMissingName
187,"  public Optional<Room> <extra_id_0>(int id) throws Exception {    ResultSet resultSet = null;    try (var connection = getConnection();         var statement = connection.prepareStatement(""SELECT * FROM ROOMS WHERE ID = ?"")) {      statement.setInt(1, id);      resultSet = statement.executeQuery();      if (resultSet.next()) {        return Optional.of(createRoom(resultSet));      } else {        return Optional.empty();      }    } catch (Exception e) {      throw new Exception(e.getMessage(), e);    } finally {      if (resultSet != null) {        resultSet.close();      }    }  }  @Override",getById
3695,  public void <extra_id_0>(final Node node) {    node.next = head;    node.previous = null;    if (head != null) {      head.previous = node;    }    head = node;    if (end == null) {      end = head;    }  }  /**   * Set user account.   *   * @param userAccount {@link UserAccount}   * @param userId      {@link String}   */,setHead
3808,  public void <extra_id_0>(final Kingdom.FactoryMaker.KingdomType kingdomType) {    final KingdomFactory kingdomFactory = Kingdom.FactoryMaker.makeFactory(kingdomType);    kingdom.setKing(kingdomFactory.createKing());    kingdom.setCastle(kingdomFactory.createCastle());    kingdom.setArmy(kingdomFactory.createArmy());  },createKingdom
449,"  private int <extra_id_0>() {    return ThreadLocalRandom.current().nextInt(1, 10000);  }",getRandomCustomerId
572,  public void <extra_id_0>(Long id) {    this.id = id;  },setId
2479,"  public final <T> FluentIterable<T> <extra_id_0>(Function<? super E, T> function) {    var temporaryList = new ArrayList<T>();    this.forEach(e -> temporaryList.add(function.apply(e)));    return from(temporaryList);  }  /**   * Collects all remaining objects of this Iterable into a list.   *   * @return a list with all remaining objects of this Iterable   */  @Override",map
1591,  public String <extra_id_0>() {    return host;  },getHost
2367,"  public Person <extra_id_0>(int id) {    Person person = personMap.get(id);    if (person == null) {      LOGGER.info(""ID not in Map."");      return null;    }    LOGGER.info(person.toString());    return person;  }  /**   * Get the size of the map.   */",getPerson
2208,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2984,"  public boolean <extra_id_0>(Item item) {    if (items.size() < inventorySize) {      lock.lock();      try {        if (items.size() < inventorySize) {          items.add(item);          var thread = Thread.currentThread();          LOGGER.info(""{}: items.size()={}, inventorySize={}"", thread, items.size(), inventorySize);          return true;        }      } finally {        lock.unlock();      }    }    return false;  }  /**   * Get all the items in the inventory.   *   * @return All the items of the inventory, as an unmodifiable list   */",addItem
3255,  public static SessionFactory <extra_id_0>() {    return SESSIONFACTORY;  },getSessionFactory
1430,"  public String <extra_id_0>(ParameterObject parameterObject) {    return getQuerySummary(parameterObject.getType(), parameterObject.getSortBy(),        parameterObject.getSortOrder());  }",search
3616,  T <extra_id_0>() throws ExecutionException;  /**   * Blocks the current thread until the async task is completed.   *   * @throws InterruptedException if the execution is interrupted   */,getValue
3396,"  public Order <extra_id_0>(Order o) throws DatabaseUnavailableException {    return data.put(o.id, o);  }  @Override",add
2441,"  void <extra_id_0>() {    final var dispatcher = Dispatcher.getInstance();    final var store = mock(Store.class);    dispatcher.registerStore(store);    dispatcher.menuItemSelected(MenuItem.HOME);    dispatcher.menuItemSelected(MenuItem.COMPANY);    // We expect 4 events, 2 menu selections and 2 content change actions    final var actionCaptor = ArgumentCaptor.forClass(Action.class);    verify(store, times(4)).onAction(actionCaptor.capture());    verifyNoMoreInteractions(store);    final var actions = actionCaptor.getAllValues();    final var menuActions = actions.stream()        .filter(a -> a.getType().equals(ActionType.MENU_ITEM_SELECTED))        .map(a -> (MenuAction) a)        .toList();    final var contentActions = actions.stream()        .filter(a -> a.getType().equals(ActionType.CONTENT_CHANGED))        .map(a -> (ContentAction) a)        .toList();    assertEquals(2, menuActions.size());    assertEquals(1, menuActions.stream().map(MenuAction::getMenuItem).filter(MenuItem.HOME::equals)        .count());    assertEquals(1, menuActions.stream().map(MenuAction::getMenuItem)        .filter(MenuItem.COMPANY::equals).count());    assertEquals(2, contentActions.size());    assertEquals(1, contentActions.stream().map(ContentAction::getContent)        .filter(Content.PRODUCTS::equals).count());    assertEquals(1, contentActions.stream().map(ContentAction::getContent)        .filter(Content.COMPANY::equals).count());  }",testMenuItemSelected
2815,  public void <extra_id_0>(GameObject gameObject) {    gameObject.collisionResolve(this);  }  @Override,collision
3367,"  private void <extra_id_0>(Order order, Order o) {    if (o.messageSent.equals(MessageSent.NONE_SENT) && order.paid        .equals(PaymentStatus.TRYING)        && System.currentTimeMillis() - o.createdTime < messageTime) {      var qt = new QueueTask(order, TaskType.MESSAGING, 1);      updateQueue(qt);      LOG.warn(""Order {}: Error in sending Payment Error message, trying to queue task and add to employee handle.."",              order.id);      employeeHandleIssue(o);    }  }",handlePaymentPossibleErrorMsgErrorIssue
2290,  public MongoCollection<Document> <extra_id_0>() {    return eventsCollection;  }  @Override,getEventsCollection
159,"  void <extra_id_0>() {    assertThrows(Exception.class, () -> {      hotel.bookRoom(getNonExistingRoomId());    });  }  @Test()",bookingRoomWithInvalidIdShouldRaiseException
2267,"  public Optional<LotteryTicketId> <extra_id_0>(LotteryTicket ticket) {    var id = new LotteryTicketId();    tickets.put(id, ticket);    return Optional.of(id);  }  @Override",save
794,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
524,  public abstract String <extra_id_0>();  /**   * Set the name of this entity.   *   * @param name The new name   */,getName
3050,"  public void <extra_id_0>(Product product) throws SQLException {    var sql = ""update PRODUCTS set price = ?, expiration_date = ? where name = ?;"";    try (var connection = dataSource.getConnection();        var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setBigDecimal(1, product.getPrice().getAmount());      preparedStatement.setDate(2, Date.valueOf(product.getExpirationDate()));      preparedStatement.setString(3, product.getName());      preparedStatement.executeUpdate();    }  }",update
2499,  public FluentIterable<E> <extra_id_0>(int count) {    return new LazyFluentIterable<>() {      @Override      public Iterator<E> iterator() {        return new DecoratingIterator<>(iterable.iterator()) {          private int stopIndex;          private int totalElementsCount;          private List<E> list;          private int currentIndex;          @Override          public E computeNext() {            initialize();            while (currentIndex < stopIndex && fromIterator.hasNext()) {              currentIndex++;              fromIterator.next();            }            if (currentIndex >= stopIndex && fromIterator.hasNext()) {              return fromIterator.next();            }            return null;          }          private void initialize() {            if (list == null) {              list = new ArrayList<>();              iterable.forEach(list::add);              totalElementsCount = list.size();              stopIndex = totalElementsCount - count;            }          }        };      }    };  }  /**   * Transforms this FluentIterable into a new one containing objects of the type T.   *   * @param function a function that transforms an instance of E into an instance of T   * @param <T>      the target type of the transformation   * @return a new FluentIterable of the new type   */  @Override,last
1388,"  void <extra_id_0>() {    final var observer = mock(WeatherObserver.class);    final var weather = new Weather();    weather.addObserver(observer);    verifyNoMoreInteractions(observer);    weather.timePasses();    assertEquals(""The weather changed to rainy."", appender.getLastMessage());    verify(observer).update(WeatherType.RAINY);    weather.removeObserver(observer);    weather.timePasses();    assertEquals(""The weather changed to windy."", appender.getLastMessage());    verifyNoMoreInteractions(observer);    assertEquals(2, appender.getLogSize());  }  /**   * Verify if the weather passes in the order of the {@link WeatherType}s   */  @Test",testAddRemoveObserver
2180,"  public Iterator<Item> <extra_id_0>(ItemType itemType) {    return new TreasureChestItemIterator(this, itemType);  }  /**   * Get all items.   */",iterator
1233,"  public void <extra_id_0>() {    LOGGER.info(""Tasting the stew"");    if (numPotatoes > 0) {      numPotatoes--;    }    if (numCarrots > 0) {      numCarrots--;    }    if (numMeat > 0) {      numMeat--;    }    if (numPeppers > 0) {      numPeppers--;    }  }",taste
3131,"  public Stream<Customer> <extra_id_0>() throws Exception {    try {      var connection = getConnection();      var statement = connection.prepareStatement(""SELECT * FROM CUSTOMERS""); // NOSONAR      var resultSet = statement.executeQuery(); // NOSONAR      return StreamSupport.stream(new Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE,          Spliterator.ORDERED) {        @Override        public boolean tryAdvance(Consumer<? super Customer> action) {          try {            if (!resultSet.next()) {              return false;            }            action.accept(createCustomer(resultSet));            return true;          } catch (SQLException e) {            throw new RuntimeException(e); // NOSONAR          }        }      }, false).onClose(() -> mutedClose(connection, statement, resultSet));    } catch (SQLException e) {      throw new CustomException(e.getMessage(), e);    }  }",getAll
2079,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(App.class, args);  }",main
2543,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1527,  public static King <extra_id_0>() {    return new King();  }  /**   * Method of the object mother to create a drunk king.   *   * @return A drunk {@link com.iluwatar.objectmother.King}.   */,createSoberUnhappyKing
19,  public abstract void <extra_id_0>();,doDraw
3017,"  private int <extra_id_0>(int x, int y) {    return x + WIDTH * y;  }",getIndex
3667,  int <extra_id_0>() {    return amount;  },count
2726,  void <extra_id_0>() {    appender.stop();  }  /**   * Test if {@link KingJoffrey} tells us what event he received   */  @Test,tearDown
3375,    void <extra_id_0>(List<Exception> list) throws Exception;  }  /**   * HandleErrorIssue defines how to handle errors.   *   * @param <T> is the type of object to be passed into the method as parameter.   */,operation
1985,  public void <extra_id_0>(FilterManager filterManager) {    this.filterManager = filterManager;  },setFilterManager
119,  default T <extra_id_0>() {    return get();  }  /**   * Checks if complete.   *   * @return true if complete   */,result
3170,"  void <extra_id_0>() {    final var newFirstname = ""Bill"";    customer.setFirstName(newFirstname);    assertEquals(newFirstname, customer.getFirstName());  }  @Test",getAndSetFirstname
2165,"  private void <extra_id_0>(TreeNode<T> node) {    while (node != null) {      pathStack.push(node);      node = node.getLeft();    }  }  /**   * Checks if there exists next element.   *   * @return true if this iterator has a ""next"" element   */  @Override",pushPathToNextSmallest
614,  public void <extra_id_0>(GiantModel giant) {    LOGGER.info(giant.toString());  },displayGiant
3601,"  void <extra_id_0>() {    var washingMachine = new WashingMachine(fakeDelayProvider);    washingMachine.wash();    washingMachine.wash();    var machineStateGlobal = washingMachine.getWashingMachineState();    fakeDelayProvider.task.run();    // washing machine remains in washing state    assertEquals(WashingMachineState.WASHING, machineStateGlobal);    // washing machine goes back to enabled state    assertEquals(WashingMachineState.ENABLED, washingMachine.getWashingMachineState());  }  @Test",wash
1104,"  public Saga <extra_id_0>(Saga saga) {    var inValue = saga.getCurrentValue();    if (inValue.equals(""bad_order"")) {      LOGGER.info(""The chapter '{}' has been started. But the exception has been raised.""              + ""The rollback is about to start"",          getName(), inValue);      saga.setCurrentStatus(Saga.ChapterResult.ROLLBACK);      return saga;    }    return super.process(saga);  }",process
777,"  public static void <extra_id_0>(Servant servant, int compliment) {    var k = new King();    var q = new Queen();    var guests = List.of(k, q);    // feed    servant.feed(k);    servant.feed(q);    // serve drinks    servant.giveWine(k);    servant.giveWine(q);    // compliment    servant.giveCompliments(guests.get(compliment));    // outcome of the night    guests.forEach(Royalty::changeMood);    // check your luck    if (servant.checkIfYouWillBeHanged(guests)) {      LOGGER.info(""{} will live another day"", servant.name);    } else {      LOGGER.info(""Poor {}. His days are numbered"", servant.name);    }  }",scenario
1161,"  void <extra_id_0>() {    final var message = new SimpleMessage();    final var headers = message.getHeaders();    assertThrows(UnsupportedOperationException.class, () -> {      headers.put(Message.Headers.SENDER, ""test"");    });  }",testUnModifiableHeaders
164,"  void <extra_id_0>() {    assertThrows(Exception.class, () -> {      hotel.cancelRoomBooking(1);    });  }",cancelRoomBookingForUnbookedRoomShouldRaiseException
615,  public void <extra_id_0>(Command command) {    setFatigue(command.fatigue());    setHealth(command.health());    setNourishment(command.nourishment());  }  /**   * Sets health.   *   * @param health the health   */,updateModel
3848,  public Object <extra_id_0>(String key) {    return properties.get(key);  }  @Override,get
3426,"    private Commander <extra_id_0>(boolean includeException, boolean includeDBException, Exception e) {        var l = includeDBException ? new DatabaseUnavailableException() : e;        PaymentService paymentService;        ShippingService shippingService;        MessagingService messagingService;        EmployeeHandle employeeHandle;        if (includeException) {            paymentService = new PaymentService                    (new PaymentDatabase(), l);            shippingService = new ShippingService(new ShippingDatabase(), l);            messagingService = new MessagingService(new MessagingDatabase(), l);            employeeHandle = new EmployeeHandle                    (new EmployeeDatabase(), l);        } else {            paymentService = new PaymentService                    (null);            shippingService = new ShippingService(null);            messagingService = new MessagingService(null);            employeeHandle = new EmployeeHandle                    (null);        }        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, null, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectWithDB
3644,"  void <extra_id_0>() {    var instructions = ""LITERAL 35 SET_HEALTH SET_WISDOM SET_AGILITY PLAY_SOUND""        + "" SPAWN_PARTICLES GET_HEALTH ADD DIVIDE"";    var bytecode = InstructionConverterUtil.convertToByteCode(instructions);    Assertions.assertEquals(10, bytecode.length);    Assertions.assertEquals(Instruction.LITERAL.getIntValue(), bytecode[0]);    Assertions.assertEquals(35, bytecode[1]);    Assertions.assertEquals(Instruction.SET_HEALTH.getIntValue(), bytecode[2]);    Assertions.assertEquals(Instruction.SET_WISDOM.getIntValue(), bytecode[3]);    Assertions.assertEquals(Instruction.SET_AGILITY.getIntValue(), bytecode[4]);    Assertions.assertEquals(Instruction.PLAY_SOUND.getIntValue(), bytecode[5]);    Assertions.assertEquals(Instruction.SPAWN_PARTICLES.getIntValue(), bytecode[6]);    Assertions.assertEquals(Instruction.GET_HEALTH.getIntValue(), bytecode[7]);    Assertions.assertEquals(Instruction.ADD.getIntValue(), bytecode[8]);    Assertions.assertEquals(Instruction.DIVIDE.getIntValue(), bytecode[9]);  }",testInstructions
1507,"  public AlbumPage <extra_id_0>(String albumRating) {    var albumRatingInputTextField = (HtmlTextInput) page.getElementById(""albumRating"");    albumRatingInputTextField.setText(albumRating);    return this;  }  /**   * Sets the number of songs number input field.   *   * @param numberOfSongs the new number of songs value to be set   * @return {@link AlbumPage}   */",changeAlbumRating
1682,  void <extra_id_0>(FileSelectorPresenter presenter);  /**   * Gets presenter component.   *   * @return The presenter Component.   */,setPresenter
555,  public List<Spellbook> <extra_id_0>() {    return spellbookDao.findAll();  }  @Override,findAllSpellbooks
813,  public int <extra_id_0>() {    return this.attempts.intValue();  }  @Override,attempts
1481,  public LoginPage <extra_id_0>() {    try {      page = this.webClient.getPage(PAGE_URL);    } catch (IOException e) {      e.printStackTrace();    }    return this;  }  /**   * {@inheritDoc}   */  @Override,navigateToPage
3740,"  public void <extra_id_0>() {    LOGGER.info(""The sword is swung."");    enchantment.apply();  }  @Override",swing
236,  public void <extra_id_0>(Entity entity) {    entities.add(entity);  },addEntity
3174,"  void <extra_id_0>() {    assertEquals(customer, customer);    assertEquals(customer.hashCode(), customer.hashCode());  }  @Test",equalsWithSameObjects
1922,  protected Instance <extra_id_0>(int currentId) {    Instance result = null;    var candidateList = instanceMap.keySet()        .stream()        .filter((i) -> i > currentId && instanceMap.get(i).isAlive())        .sorted()        .toList();    if (candidateList.isEmpty()) {      var index = instanceMap.keySet()          .stream()          .filter((i) -> instanceMap.get(i).isAlive())          .sorted()          .toList()          .get(0);      result = instanceMap.get(index);    } else {      var index = candidateList.get(0);      result = instanceMap.get(index);    }    return result;  },findNextInstance
2857,"  final Meteoroid <extra_id_0>() {    return new Meteoroid(1, 2, 3, 4);  }  /**   * Test the constructor parameters   */  @Test",getTestedObject
2166,  public boolean <extra_id_0>() {    return !pathStack.isEmpty();  }  /**   * Gets the next element.   *   * @return TreeNode next. The next element according to our in-order traversal of the given BST   * @throws NoSuchElementException if this iterator does not have a next element   */  @Override,hasNext
1054,"  public String <extra_id_0>() {    return ""booking a Fly"";  }",getName
2759,"  public int <extra_id_0>(int eventTime)      throws MaxNumOfEventsAllowedException, InvalidOperationException, LongRunningEventException {    if (currentlyRunningSyncEvent != -1) {      throw new InvalidOperationException(""Event ["" + currentlyRunningSyncEvent + ""] is still""          + "" running. Please wait until it finishes and try again."");    }    var eventId = createEvent(eventTime, true);    currentlyRunningSyncEvent = eventId;    return eventId;  }  /**   * Create an Asynchronous event.   *   * @param eventTime Time an event should run for.   * @return eventId   * @throws MaxNumOfEventsAllowedException When too many events are running at a time.   * @throws LongRunningEventException      Long running events are not allowed in the app.   */",create
1882,"  public String <extra_id_0>() {    return ""Hunter"";  }",toString
3721,"  public UserAccount <extra_id_0>(final UserAccount userAccount) {    db.put(userAccount.getUserId(), userAccount);    return userAccount;  }  /**   * Update reecord in DB.   *   * @param userAccount {@link UserAccount}   * @return {@link UserAccount}   */  @Override",writeToDb
1270,"  public <V> Promise<V> <extra_id_0>(Function<? super T, V> func) {    Promise<V> dest = new Promise<>();    fulfillmentAction = new TransformAction<>(this, dest, func);    return dest;  }  /**   * Accesses the value from source promise and calls the consumer, then fulfills the destination   * promise.   */",thenApply
2047,"  void <extra_id_0>() {    // Arrange    double threshold = 0.8; // 80% threshold for test    healthIndicator.setMemoryUsageThreshold(threshold);    String poolName = ""CodeCache"";    when(garbageCollectorMXBean.getName()).thenReturn(""G1 Young Generation"");    when(garbageCollectorMXBean.getMemoryPoolNames()).thenReturn(new String[] {poolName});    long maxMemory = 1000L; // e.g., 1000 bytes    long usedMemory = (long) (threshold * maxMemory) + 1; // e.g., 801 bytes to exceed 80% threshold    when(memoryPoolMXBean.getUsage())        .thenReturn(new MemoryUsage(0, usedMemory, usedMemory, maxMemory));    when(memoryPoolMXBean.getName()).thenReturn(poolName);    // Act    Health health = healthIndicator.health();    // Assert    Map<String, Object> gcDetails =        (Map<String, Object>) health.getDetails().get(""G1 Young Generation"");    assertNotNull(gcDetails, ""Expected details for 'G1 Young Generation', but none were found."");    String memoryPoolsDetail = (String) gcDetails.get(""memoryPools"");    assertNotNull(        memoryPoolsDetail, ""Expected memory pool details for 'CodeCache', but none were found."");    // Extracting the actual usage reported in the details for comparison    String memoryUsageReported = memoryPoolsDetail.split("": "")[1].trim().replace(""%"", """");    double memoryUsagePercentage = Double.parseDouble(memoryUsageReported);    assertTrue(        memoryUsagePercentage > threshold,        ""Memory usage percentage should be above the threshold."");    String warning = (String) gcDetails.get(""warning"");    assertNotNull(warning, ""Expected a warning for high memory usage, but none was found."");    // Check that the warning message is as expected    String expectedWarningRegex =        String.format(""Memory pool '%s' usage is high \\(\\d+\\.\\d+%%\\)"", poolName);    assertTrue(        warning.matches(expectedWarningRegex),        ""Expected a high usage warning, but format is incorrect: "" + warning);  }  /** Test case to verify that the health status is up when there are no garbage collections. */  @Test",whenMemoryUsageIsHigh_thenHealthContainsWarning
1010,"  private static Saga <extra_id_0>() {    return Saga        .create()        .chapter(""init an order"")        .chapter(""booking a Fly"")        .chapter(""booking a Hotel"")        .chapter(""withdrawing Money"");  }",newSaga
1762,  boolean <extra_id_0>(Creature creature);  /**   * Unlocks the object.   *   * @param creature as the locker.   */,lock
954,"  public DataSource <extra_id_0>() {    var basicDataSource = new BasicDataSource();    basicDataSource.setDriverClassName(""org.h2.Driver"");    basicDataSource.setUrl(""jdbc:h2:~/databases/person"");    basicDataSource.setUsername(""sa"");    basicDataSource.setPassword(""sa"");    return basicDataSource;  }  /**   * Factory to create a especific instance of Entity Manager.   */  @Bean",dataSource
2199,  void <extra_id_0>() {    controller = null;  }  @Test,tearDown
3842,"  public void <extra_id_0>(Zoom zoom) {    LOGGER.info(zoom + "" used with Unix configurator."");  }",visit
3444,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            for (Exception e : exceptionList) {                Commander c = buildCommanderObjectWithoutDB(true, true, e);                var order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithoutDB(true, false, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithoutDB(false, false, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }                c = buildCommanderObjectWithoutDB(false, true, e);                order = new Order(new User(""K"", null), ""pen"", 1f);                for (Order.MessageSent ms : Order.MessageSent.values()) {                    c.placeOrder(order);                    assertFalse(StringUtils.isBlank(order.id));                }            }        }    }",testPlaceOrderWithoutDatabaseAndExceptions
1306,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(null));  },shouldExecuteApplicationWithoutException
1992,  public static void <extra_id_0>(String[] args) {    var filterManager = new FilterManager();    filterManager.addFilter(new NameFilter());    filterManager.addFilter(new ContactFilter());    filterManager.addFilter(new AddressFilter());    filterManager.addFilter(new DepositFilter());    filterManager.addFilter(new OrderFilter());    var client = new Client();    client.setFilterManager(filterManager);  },main
2023,"  void <extra_id_0>() {    // Make the HTTP request to the liveness endpoint    Response response = given(requestSpec).get(getEndpointBasePath() + ""/liveness"").andReturn();    // Log the response details    logResponseDetails(response);    // Check if the status is 503 (SERVICE_UNAVAILABLE)    if (response.getStatusCode() == HttpStatus.SERVICE_UNAVAILABLE.value()) {      LOGGER.warn(          ""Liveness endpoint returned 503 Service Unavailable. This may be due to CI pipeline ""              + ""configuration. Please check the CI pipeline logs."");      // If status is 503, the test passes without further checks      response          .then()          .assertThat()          .statusCode(HttpStatus.SERVICE_UNAVAILABLE.value())          .log()          .all(); // Log the entire response for visibility      return;    }    // If status is 200, proceed with additional checks    response.then().assertThat().statusCode(HttpStatus.OK.value()).body(""status"", equalTo(""UP""));    // Check for ""DOWN"" status and high CPU load    if (""DOWN"".equals(response.path(""status""))) {      LOGGER.error(""Liveness endpoint response: "" + response.getBody().asString());      LOGGER.error(""Liveness endpoint status: "" + response.path(""status""));      LOGGER.error(          ""High CPU load detected: "" + response.path(""components.cpu.details.processCpuLoad""));    }  }  /**   * Test that the custom health indicator returns the UP status and additional details.   *   * <p>The custom health indicator is used to provide more specific information about the health of   * a particular component or aspect of the application.   */  @Test",livenessEndpointShouldReturnUpStatus
654,  public boolean <extra_id_0>(Creature t) {    return t.getMass().equals(mass);  },test
2673,  public static Audio <extra_id_0>() {    return INSTANCE;  }  /**   * This method stops the Update Method's thread and waits till service stops.   */,getInstance
3373,"  void <extra_id_0>() throws Exception {    //goes to message after 2 retries maybe - rest is successful for now    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms =        new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase(new DatabaseUnavailableException());    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }  /**   * Program entry point.   *   * @param args command line args   */",paymentSuccessCase
878,  public static void <extra_id_0>(String[] args) throws IOException {    var appClient = new AppClient();    appClient.start();  }  /**   * Starts the logging clients.   *   * @throws IOException if any I/O error occurs.   */,main
3830,  void <extra_id_0>() {    var hayes = new Hayes();    var mockVisitor = mock(ConfigureForDosVisitor.class);    hayes.accept(mockVisitor);    verify((HayesVisitor) mockVisitor).visit(eq(hayes));  }  @Test,testAcceptForDos
3437,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            messageTime *= d;            employeeTime *= d;            queueTime *= d;            Commander c = buildCommanderObject(true);            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrderShortDuration
1074,  Saga <extra_id_0>(Saga saga);,rollback
3239,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },executesWithoutExceptions
3846,"  <T> Stream<T> <extra_id_0>(String key, Function<Map<String, Object>, T> constructor);",children
2124,    private List<CakeTopping> <extra_id_0>() {        List<CakeTopping> result = new ArrayList<>();        for (CakeTopping topping : cakeToppingDao.findAll()) {            if (topping.getCake() == null) {                result.add(topping);            }        }        return result;    }    @Override,getAvailableToppingEntities
338,    public AbilityStep <extra_id_0>(String weapon) {      this.weapon = weapon;      return this;    }    @Override,withWeapon
321,"  public String <extra_id_0>() {    return new StringBuilder()        .append(""This is a "")        .append(fighterClass != null ? fighterClass : wizardClass)        .append("" named "")        .append(name)        .append("" armed with a "")        .append(weapon != null ? weapon : spell != null ? spell : ""with nothing"")        .append(abilities != null ? "" and wielding "" + abilities + "" abilities"" : """")        .append('.')        .toString();  }",toString
3587,"  void <extra_id_0>() {    // setup a client object    var client = new MobileClient(businessDelegate);    // action    client.playbackMovie(""Die hard"");    // verifying that the businessDelegate was used by client during playbackMovie() method.    verify(businessDelegate).playbackMovie(anyString());    verify(netflixService).doProcessing();    // action    client.playbackMovie(""Maradona"");    // verifying that the businessDelegate was used by client during doTask() method.    verify(businessDelegate, times(2)).playbackMovie(anyString());    verify(youTubeService).doProcessing();  }",testBusinessDelegate
1715,"  public void <extra_id_0>() {    view.setPresenter(this);    view.open();  }  /**   * An ""event"" that fires when the name of the file to be loaded changes.   */",start
2257,"  private void <extra_id_0>() {    var doc = new Document(""_id"", TICKET_ID).append(""seq"", 1);    countersCollection.insertOne(doc);  }  /**   * Get next ticket id.   *   * @return next ticket id   */",initCounters
2188,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2137,    List<CakeLayerInfo> <extra_id_0>();,getAvailableLayers
381,"  public String <extra_id_0>() {    return String.format(""%s %s"", this.getClass().getSimpleName(), super.toString());  }",toString
1689,  public void <extra_id_0>(FileSelectorPresenter presenter) {    this.presenter = presenter;  }  @Override,setPresenter
2100,"  void <extra_id_0>() {    final var cake = new Cake();    assertNotNull(cake.getLayers());    assertTrue(cake.getLayers().isEmpty());    final Set<CakeLayer> initialLayers = new HashSet<>();    initialLayers.add(new CakeLayer(""layer1"", 1000));    initialLayers.add(new CakeLayer(""layer2"", 2000));    cake.setLayers(initialLayers);    assertEquals(initialLayers, cake.getLayers());    final var newLayer = new CakeLayer(""layer3"", 3000);    cake.addLayer(newLayer);    final Set<CakeLayer> expectedLayers = new HashSet<>();    expectedLayers.addAll(initialLayers);    expectedLayers.addAll(initialLayers);    expectedLayers.add(newLayer);    assertEquals(expectedLayers, cake.getLayers());  }  @Test",testAddLayer
989,  public void <extra_id_0>(String name) {    this.name = name;  },setName
2344,"  void <extra_id_0>() {    // admin resets the lottery    administration.resetLottery();    assertEquals(0, administration.getAllSubmittedTickets().size());    // players submit the lottery tickets    var ticket1 = service.submitTicket(LotteryTestUtils.createLotteryTicket(""cvt@bbb.com"",        ""123-12312"", ""+32425255"", Set.of(1, 2, 3, 4)));    assertTrue(ticket1.isPresent());    var ticket2 = service.submitTicket(LotteryTestUtils.createLotteryTicket(""ant@bac.com"",        ""123-12312"", ""+32423455"", Set.of(11, 12, 13, 14)));    assertTrue(ticket2.isPresent());    var ticket3 = service.submitTicket(LotteryTestUtils.createLotteryTicket(""arg@boo.com"",        ""123-12312"", ""+32421255"", Set.of(6, 8, 13, 19)));    assertTrue(ticket3.isPresent());    assertEquals(3, administration.getAllSubmittedTickets().size());    // perform lottery    var winningNumbers = administration.performLottery();    // cheat a bit for testing sake, use winning numbers to submit another ticket    var ticket4 = service.submitTicket(LotteryTestUtils.createLotteryTicket(""lucky@orb.com"",        ""123-12312"", ""+12421255"", winningNumbers.getNumbers()));    assertTrue(ticket4.isPresent());    assertEquals(4, administration.getAllSubmittedTickets().size());    // check winners    var tickets = administration.getAllSubmittedTickets();    for (var id : tickets.keySet()) {      var checkResult = service.checkTicketForPrize(id, winningNumbers);      assertNotEquals(CheckResult.TICKET_NOT_SUBMITTED, checkResult.getResult());      if (checkResult.getResult().equals(CheckResult.WIN_PRIZE)) {        assertTrue(checkResult.getPrizeAmount() > 0);      } else {        assertEquals(0, checkResult.getPrizeAmount());      }    }    // check another ticket that has not been submitted    var checkResult = service.checkTicketForPrize(new LotteryTicketId(), winningNumbers);    assertEquals(CheckResult.TICKET_NOT_SUBMITTED, checkResult.getResult());    assertEquals(0, checkResult.getPrizeAmount());  }",testLottery
3612,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var asyncResult = executor.startProcess(null, callback);      assertNotNull(asyncResult, ""The AsyncResult should not be 'null', even though the task was 'null'."");      asyncResult.await(); // Prevent timing issues, and wait until the result is available      assertTrue(asyncResult.isCompleted());      verify(callback, times(1)).onComplete(isNull(), optionalCaptor.capture());      final var optionalException = optionalCaptor.getValue();      assertNotNull(optionalException);      assertTrue(optionalException.isPresent());      final var exception = optionalException.get();      assertNotNull(exception);      assertEquals(NullPointerException.class, exception.getClass());      try {        asyncResult.getValue();        fail(""Expected ExecutionException with NPE as cause"");      } catch (final ExecutionException e) {        assertNotNull(e.getMessage());        assertNotNull(e.getCause());        assertEquals(NullPointerException.class, e.getCause().getClass());      }    });  }  /**   * Test used to verify the behaviour of {@link ThreadAsyncExecutor#startProcess(Callable,   * AsyncCallback)} when both the callable and the asynchronous callback are 'null'   */  @Test",testNullTaskWithCallback
3152,  private static void <extra_id_0>(DataSource dataSource) throws SQLException {    try (var connection = dataSource.getConnection();         var statement = connection.createStatement()) {      statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);    }  },createSchema
2878,"  public UnitExtension <extra_id_0>(String extensionName) {    if (extensionName.equals(""SoldierExtension"")) {      return Optional.ofNullable(unitExtension).orElseGet(() -> new Soldier(this));    }    return super.getUnitExtension(extensionName);  }",getUnitExtension
3082,"  void <extra_id_0>() throws SQLException {    TestUtils.executeSQL(INSERT_CUSTOMER_SQL, dataSource);    TestUtils.executeSQL(ProductDaoImplTest.INSERT_PRODUCT_SQL, dataSource);    TestUtils.executeSQL(INSERT_PURCHASES_SQL, dataSource);    customerDao.deleteProduct(product, customer);    try (var connection = dataSource.getConnection();        var statement = connection.createStatement();        ResultSet rs = statement.executeQuery(SELECT_PURCHASES_SQL)) {      assertFalse(rs.next());    }  }",shouldDeleteProductFromPurchases
2429,  public void <extra_id_0>(View view) {    views.add(view);  },registerView
1273,"  public static Map<Character, Long> <extra_id_0>(String fileLocation) {    try (var bufferedReader = new BufferedReader(new FileReader(fileLocation))) {      return bufferedReader.lines()          .flatMapToInt(String::chars)          .mapToObj(x -> (char) x)          .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));    } catch (IOException ex) {      ex.printStackTrace();    }    return Collections.emptyMap();  }  /**   * Return the character with the lowest frequency, if exists.   *   * @return the character, {@code Optional.empty()} otherwise.   */",characterFrequency
3200,"  public void <extra_id_0>(T opponent) {    LOGGER.info(""{} is going to fight against {}"", this, opponent);  }",fight
1606,"  void <extra_id_0>() {    bvm.setSelectedBook(testBook);    assertNotNull(bvm.getSelectedBook());    assertTrue(testBookList.get(0).toString().contains(""Head First Design Patterns""));    bvm.deleteBook();    assertNull(bvm.getSelectedBook());    assertFalse(testBookList.get(0).toString().contains(""Head First Design Patterns""));  }",testDeleteData
1744,"  public static void <extra_id_0>(final String[] args) {    // create model, view and controller    // initialize calculator view, output and variable = 0    var view = new CalculatorView(new CalculatorViewModel());    var variable1 = RANDOM_VARIABLE;    // calculator variable = RANDOM_VARIABLE -> 10.0    view.setVariable(variable1);    // add calculator variable to output -> calculator output = 10.0    view.add();    view.displayTotal();  // display output    variable1 = 2.0;    view.setVariable(variable1);  // calculator variable = 2.0    // subtract calculator variable from output -> calculator output = 8    view.subtract();    // divide calculator output by variable -> calculator output = 4.0    view.divide();    // multiply calculator output by variable -> calculator output = 8.0    view.multiply();    view.displayTotal();  }  /**   * Avoid default constructor lint error.   */",main
2636,"  void <extra_id_0>() {    final var welcomeMessage = service.getWelcomeMessage(paidUser);    final var expected = ""You're amazing Jamie Coder. Thanks for paying for this awesome software."";    assertEquals(expected, welcomeMessage);  }  @Test",testGetWelcomeMessageForPaidUser
1560,"  void <extra_id_0>() {    var tom = new User(null, 21, Sex.MALE, ""tom@foo.bar"");    assertThrows(        IllegalStateException.class,        () -> Validator.of(tom)            .validate(User::name, Objects::nonNull, ""name cannot be null"")            .get()    );  }  @Test",testForInvalidName
3104,  void <extra_id_0>() {    appender.stop();  }  /**   * Test if the {@link AdvancedWizard} smokes whatever instance of {@link Tobacco} is passed to him   * through the constructor parameter   */  @Test,tearDown
3630,"    void <extra_id_0>(Exception exception) {      this.exception = exception;      this.state = FAILED;      this.callback.ifPresent(ac -> ac.onComplete(null, Optional.of(exception)));      synchronized (lock) {        lock.notifyAll();      }    }    @Override",setException
179,  Optional<Room> <extra_id_0>(int id) throws Exception;,getById
701,"  void <extra_id_0>() {    final Logger LOGGER = (Logger) LoggerFactory.getLogger(ReceiptDto.class);    ListAppender<ILoggingEvent> listAppender = new ListAppender<>();    listAppender.start();    LOGGER.addAppender(listAppender);    receipt = applicationServices.loggedInUserPurchase(""ignite1771"", ""computer"");    receipt.show();    List<ILoggingEvent> loggingEventList = listAppender.list;    assertEquals(""Receipt: 800.0 paid""        , loggingEventList.get(0).getMessage());    assertEquals(Level.INFO, loggingEventList.get(0).getLevel());  }",testReceiptDto
2645,"  void <extra_id_0>() {    var user = new User(""Paid User"");    UserGroup.addUserToFreeGroup(user);    assertThrows(IllegalArgumentException.class, () -> {      UserGroup.addUserToPaidGroup(user);    });  }  @Test",testAddUserToPaidWhenOnFree
3185,"      void <extra_id_0>() throws          Exception {        final var newFirstname = ""Bernard"";        final var newLastname = ""Montgomery"";        final var customer = new Customer(existingCustomer.getId(), newFirstname, newLastname);        var result = dao.update(customer);        assertTrue(result);        final var cust = dao.getById(existingCustomer.getId()).get();        assertEquals(newFirstname, cust.getFirstName());        assertEquals(newLastname, cust.getLastName());      }    }  }  /**   * Represents a scenario where DB connectivity is not present due to network issue, or DB service   * unavailable.   */  @Nested",updationShouldBeSuccessAndAccessingTheSameCustomerShouldReturnUpdatedInformation
991,  public String <extra_id_0>() {    return name;  },getName
210,"  public Book <extra_id_0>(long bookId) throws BookNotFoundException {    if (!collection.containsKey(bookId)) {      throw new BookNotFoundException(""Not found book with id: "" + bookId);    }    // return copy of the book    return new Book(collection.get(bookId));  }",get
1589,"  void <extra_id_0>() {    final var firstBalancer = new LoadBalancer();    final var secondBalancer = new LoadBalancer();    firstBalancer.addServer(new Server(""localhost"", 8085, 6));    // Both should have the same number of servers.    assertEquals(firstBalancer.getNoOfServers(), secondBalancer.getNoOfServers());    // Both Should have the same LastServedId    assertEquals(firstBalancer.getLastServedId(), secondBalancer.getLastServedId());  }  @Test",testSameStateAmongstAllInstances
3829,  void <extra_id_0>() {    var zoom = new Zoom();    var mockVisitor = mock(ConfigureForUnixVisitor.class);    zoom.accept(mockVisitor);    verify((ZoomVisitor) mockVisitor).visit(eq(zoom));  },testAcceptForUnix
1530,  public static King <extra_id_0>() {    var king = new King();    king.makeHappy();    king.makeDrunk();    return king;  }  /**   * Method to create a flirty queen.   *   * @return A flirty {@link com.iluwatar.objectmother.Queen}.   */,createHappyDrunkKing
580,  public static void <extra_id_0>(String[] args) {    // populate the in-memory database    initData();    // query the data using the service    queryData();  }  /**   * Initialize data.   */,main
413,  protected abstract Consumer<Integer> <extra_id_0>();  /**   * Getter for our value.   *   * @return supplier   */,setter
154,"  void <extra_id_0>() {    final var otherRoom = new Room(ID, ROOMTYPE, PRICE, BOOKED);    assertEquals(room, otherRoom);    assertEquals(room.hashCode(), otherRoom.hashCode());  }  @Test",equalsWithSameObjectValues
29,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
1494,"  public AlbumPage <extra_id_0>() {    var saveButton = (HtmlSubmitInput) page.getElementById(""saveButton"");    try {      saveButton.click();    } catch (IOException e) {      e.printStackTrace();    }    return this;  }",saveChanges
65,  public void <extra_id_0>(UnitVisitor visitor) {    visitor.visit(this);    super.accept(visitor);  }  @Override,accept
1394,"  void <extra_id_0>(WeatherType weather, String response) {    final var observer = this.factory.get();    assertEquals(0, appender.getLogSize());    observer.update(weather);    assertEquals(response, appender.getLastMessage());    assertEquals(1, appender.getLogSize());  }",testObserver
3623,  <T> AsyncResult<T> <extra_id_0>(Callable<T> task);  /**   * Starts processing of an async task. Returns immediately with async result. Executes callback   * when the task is completed.   *   * @param task     task to be executed asynchronously   * @param callback callback to be executed on task completion   * @return async result for the task   */,startProcess
3505,  public boolean <extra_id_0>(Request req) {    return req.getRequestType() == RequestType.DEFEND_CASTLE;  }  @Override,canHandleRequest
2893,  public void <extra_id_0>() {    decorated.fleeBattle();  },fleeBattle
3785,  public String <extra_id_0>() {    return title;  },toString
811,"  public void <extra_id_0>() {    LOGGER.info(""Treasure chest closes."");  }",close
872,"  private void <extra_id_0>(SelectionKey key) throws IOException {    var serverSocketChannel = (ServerSocketChannel) key.channel();    var socketChannel = serverSocketChannel.accept();    socketChannel.configureBlocking(false);    var readKey = socketChannel.register(selector, SelectionKey.OP_READ);    readKey.attach(key.attachment());  }  /**   * Queues the change of operations request of a channel, which will change the interested   * operations of the channel sometime in future.   *   * <p>This is a non-blocking method and does not guarantee that the operations have changed when   * this method returns.   *   * @param key           the key for which operations have to be changed.   * @param interestedOps the new interest operations.   */",onChannelAcceptable
2775,  public void <extra_id_0>() {    thread = new Thread(this);    thread.start();  }  @Override,start
3632,"    public T <extra_id_0>() throws ExecutionException {      if (state == COMPLETED) {        return value;      } else if (state == FAILED) {        throw new ExecutionException(exception);      } else {        throw new IllegalStateException(""Execution not completed yet"");      }    }    @Override",getValue
2268,"  public Map<LotteryTicketId, LotteryTicket> <extra_id_0>() {    return tickets;  }  @Override",findAll
1248,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
711,  public Account <extra_id_0>(User user) {    if (!user2Account.containsKey(user)) {      return null;    }    return user2Account.get(user);  }  /**   * Find a product with the itemName.   *   * @param itemName of the item   * @return instance of Product   */,findAccountByUser
2249,"  void <extra_id_0>(WireTransfers bank, Scanner scanner);",queryLotteryAccountFunds
1451,"  public void <extra_id_0>() {    int initialVersion = 1;    long cardId = 123L;    Card card = Card.builder()        .id(cardId)        .version(initialVersion)        .sum(123f)        .build();    when(cardRepository.findById(eq(cardId))).thenReturn(card);    when(cardRepository.getEntityVersionById(Mockito.eq(cardId))).thenReturn(initialVersion + 1);    Assertions.assertThrows(ApplicationException.class,        () -> cardUpdateService.doUpdate(card, cardId));  }  @Test",shouldNotUpdateEntityOnDifferentVersion
3797,"  void <extra_id_0>() {    LOGGER.info(""The fishing boat is sailing"");  }",sail
2139,    void <extra_id_0>();,deleteAllLayers
2933,  private static void <extra_id_0>(List<CustomerDto> allCustomers) {    allCustomers.forEach(customer -> LOGGER.info(customer.getFirstName()));  },printCustomerDetails
2820,"  public String <extra_id_0>() {    return String.format(""%s at %s damaged=%b onFire=%b"", this.getClass().getSimpleName(),        super.toString(), isDamaged(), isOnFire());  }",toString
1412,  public String <extra_id_0>() {    return this.name().toLowerCase();  },toString
3583,  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);  }  /**   * Tests getting the data for a desktop client   */  @Test,setup
20,  public abstract void <extra_id_0>();,click
2158,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(null));  },shouldExecuteApplicationWithoutException
1673,"  public String <extra_id_0>() {    return String.format(""The giant looks %s, %s and %s."", health, fatigue, nourishment);  }",toString
2985,  public final List<Item> <extra_id_0>() {    return List.copyOf(items);  },getItems
1575,"  public ConsoleLoggerModule <extra_id_0>() {    LOGGER.debug(""ConsoleLoggerModule::prepare();"");    this.output = new PrintStream(System.out);    this.error = new PrintStream(System.err);    return this;  }  /**   * Following method performs the finalization.   */",prepare
2485,  public Spliterator<E> <extra_id_0>() {    return iterable.spliterator();  }  /**   * Find the count of remaining objects of current iterable.   *   * @return the count of remaining objects of the current Iterable   */,spliterator
3875,"  void <extra_id_0>() {    var infoController = new InformationController();    var title = infoController.getProductTitle();    assertEquals(""The Product Title."", title);  }",shouldGetProductTitle
2327,"  public void <extra_id_0>(String bankAccount, int amount) {    var search = new Document(""_id"", bankAccount);    var update = new Document(""_id"", bankAccount).append(""funds"", amount);    var updateOptions = new UpdateOptions().upsert(true);    accountsCollection.updateOne(search, new Document(""$set"", update), updateOptions);  }  @Override",setFunds
2380,"  void <extra_id_0>(){    PersonDbSimulatorImplementation db = new PersonDbSimulatorImplementation();    Person person1 = new Person(1, ""Thomas"", 27304159);    Person person2 = new Person(2, ""John"", 42273631);    db.insert(person1);    db.insert(person2);    Person person3 = new Person(3,""Micheal"",25671234);    // Test if IdNotFoundException is thrown when person with ID 3 is not in DB.    Assertions.assertThrows(IdNotFoundException.class,()->db.update(person3));  }  @Test",updateNotInDb
3742,  public Enchantment <extra_id_0>() {    return enchantment;  },getEnchantment
1926,  void <extra_id_0>(int currentId);,sendHeartbeatInvokeMessage
3832,  void <extra_id_0>(ModemVisitor modemVisitor);,accept
3494,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3028,"  void <extra_id_0>() {    try {      var field = FrameBuffer.class.getDeclaredField(""pixels"");      var pixels = new Pixel[FrameBuffer.HEIGHT * FrameBuffer.WIDTH];      Arrays.fill(pixels, Pixel.WHITE);      pixels[0] = Pixel.BLACK;      var frameBuffer = new FrameBuffer();      field.setAccessible(true);      field.set(frameBuffer, pixels);      assertEquals(pixels, frameBuffer.getPixels());    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }",testGetPixels
2953,      public Long <extra_id_0>() {        return id;      },getId
2781,  private void <extra_id_0>() {    if (eventListener != null) {      eventListener.completedEventHandler(eventId);    }  },completed
2525,  public Weapon <extra_id_0>(WeaponType weaponType) {    return ELFARSENAL.get(weaponType);  }  @Override,manufactureWeapon
1482,"  public boolean <extra_id_0>() {    return ""Login"".equals(page.getTitleText());  }  /**   * Enters the username into the username input text field   *   * @param username the username to enter   * @return {@link LoginPage}   */",isAt
2121,"    public void <extra_id_0>(CakeInfo cakeInfo) throws CakeBakingException {        var allToppings = getAvailableToppingEntities();        var matchingToppings =                allToppings.stream().filter(t -> t.getName().equals(cakeInfo.cakeToppingInfo.name))                        .toList();        if (matchingToppings.isEmpty()) {            throw new CakeBakingException(String.format(""Topping %s is not available"",                    cakeInfo.cakeToppingInfo.name));        }        var allLayers = getAvailableLayerEntities();        Set<CakeLayer> foundLayers = new HashSet<>();        for (var info : cakeInfo.cakeLayerInfos) {            var found = allLayers.stream().filter(layer -> layer.getName().equals(info.name)).findFirst();            if (found.isEmpty()) {                throw new CakeBakingException(String.format(""Layer %s is not available"", info.name));            } else {                foundLayers.add(found.get());            }        }        var topping = cakeToppingDao.findById(matchingToppings.iterator().next().getId());        if (topping.isPresent()) {            var cake = new Cake();            cake.setTopping(topping.get());            cake.setLayers(foundLayers);            cakeDao.save(cake);            topping.get().setCake(cake);            cakeToppingDao.save(topping.get());            Set<CakeLayer> foundLayersToUpdate = new HashSet<>(foundLayers); // copy set to avoid a ConcurrentModificationException            for (var layer : foundLayersToUpdate) {                layer.setCake(cake);                cakeLayerDao.save(layer);            }        } else {            throw new CakeBakingException(String.format(""Topping %s is not available"",                    cakeInfo.cakeToppingInfo.name));        }    }    @Override",bakeNewCake
3296,"  private void <extra_id_0>(MessageData data) {    LOGGER.info(""{} sees message {}"", name, data.getMessage());    messages.add(data.getMessage());  }",handleEvent
1548,  public void <extra_id_0>(boolean flirtiness) {    this.isFlirty = flirtiness;  }  /**   * Method which is called when the king is flirting to a queen.   *   * @param king King who initialized the flirt.   * @return A value which describes if the flirt was successful or not.   */,setFlirtiness
3430,"    void <extra_id_0>() throws Exception {        for (double d = 0.1; d < 2; d = d + 0.1) {            paymentTime *= d;            queueTaskTime *= d;            Commander c = buildCommanderObject(true);            var order = new Order(new User(""K"", ""J""), ""pen"", 1f);            for (Order.MessageSent ms : Order.MessageSent.values()) {                c.placeOrder(order);                assertFalse(StringUtils.isBlank(order.id));            }        }    }    @Test",testPlaceOrder
239,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
368,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    }  }},getLastMessage
2440,"  void <extra_id_0>() {    assertNotNull(Dispatcher.getInstance());    assertSame(Dispatcher.getInstance(), Dispatcher.getInstance());  }  @Test",testGetInstance
2090,    void <extra_id_0>() {        cakeBakingService.deleteAllCakes();        cakeBakingService.deleteAllLayers();        cakeBakingService.deleteAllToppings();    }  @Test,setUp
3658,  private static boolean <extra_id_0>(String instruction) {    try {      Instruction.valueOf(instruction);      return true;    } catch (IllegalArgumentException e) {      return false;    }  },isValidInstruction
1945,"  public boolean <extra_id_0>(int currentId, int leaderId) {    var nextInstance = this.findNextInstance(currentId);    var leaderMessage = new Message(MessageType.LEADER, String.valueOf(leaderId));    nextInstance.onMessage(leaderMessage);    return true;  }  /**   * Send heartbeat invoke message to the next instance.   *   * @param currentId Instance ID of which sends this message.   */  @Override",sendLeaderMessage
2753,  public void <extra_id_0>() {    if (interactiveMode) {      runInteractiveMode();    } else {      quickRun();    }  }  /**   * Run program in non-interactive mode.   */,run
2434,  public Content <extra_id_0>() {    return content;  },getContent
1128,  private boolean <extra_id_0>(int index) {    return rightChildIndex(index) < size;  },hasRightChild
556,  public List<Spell> <extra_id_0>() {    return spellDao.findAll();  }  @Override,findAllSpells
3446,"  public static void <extra_id_0>(String[] args) {    /*      Initialising the printer queue with jobs    */    printerQueue.addPrinterItem(new PrinterItem(PaperSizes.A4, 5, false, false));    printerQueue.addPrinterItem(new PrinterItem(PaperSizes.A3, 2, false, false));    printerQueue.addPrinterItem(new PrinterItem(PaperSizes.A2, 5, false, false));    /*      This variable is the collecting parameter, and will store the policy abiding print jobs.    */    var result = new LinkedList<PrinterItem>();    /*      Adding A4, A3, and A2 papers that obey the policy    */    addValidA4Papers(result);    addValidA3Papers(result);    addValidA2Papers(result);  }  /**   * Adds A4 document jobs to the collecting parameter according to some policy that can be whatever the client   * (the print center) wants.   *   * @param printerItemsCollection the collecting parameter   */",main
2659,"  public void <extra_id_0>() {    var account = Optional.ofNullable(AccountAggregate.getAccount(accountNo))        .orElseThrow(() -> new RuntimeException(""Account not found""));    account.handleEvent(this);  }",process
3732,"  void <extra_id_0>() {    Document document = new Document(USER_ID, ID)            .append(USER_NAME, NAME)            .append(ADD_INFO, ADDITIONAL_INFO);    MongoCollection<Document> mongoCollection = mock(MongoCollection.class);    when(db.getCollection(CachingConstants.USER_ACCOUNT)).thenReturn(mongoCollection);    FindIterable<Document> findIterable = mock(FindIterable.class);    when(mongoCollection.find(any(Document.class))).thenReturn(findIterable);    when(findIterable.first()).thenReturn(document);    assertEquals(mongoDb.readFromDb(ID),userAccount);  }  @Test",readFromDb
482,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(10000), () -> {      // Create 10000 tasks and inside each callable instantiate the singleton class      final var tasks = IntStream.range(0, 10000)          .<Callable<S>>mapToObj(i -> this.singletonInstanceMethod::get)          .collect(Collectors.toCollection(ArrayList::new));      // Use up to 8 concurrent threads to handle the tasks      final var executorService = Executors.newFixedThreadPool(8);      final var results = executorService.invokeAll(tasks);      // wait for all of the threads to complete      final var expectedInstance = this.singletonInstanceMethod.get();      for (var res : results) {        final var instance = res.get();        assertNotNull(instance);        assertSame(expectedInstance, instance);      }      // tidy up the executor      executorService.shutdown();    });  }",testMultipleCallsReturnTheSameObjectInDifferentThreads
2729,    public String <extra_id_0>() {      return log.get(log.size() - 1).getFormattedMessage();    },getLastMessage
1113,"  public String <extra_id_0>() {    return ""Message{""        + ""message='"" + message + '\''        + "", priority="" + priority        + '}';  }",toString
84,"  private void <extra_id_0>() {    var weaponsToBeInserted = context.get(UnitActions.INSERT.getActionValue());    for (var weapon : weaponsToBeInserted) {      LOGGER.info(""Inserting a new weapon {} to sales rack."", weapon.getName());      weaponDatabase.insert(weapon);    }  }",commitInsert
247,"  public int <extra_id_0>(int... nums) {    LOGGER.info(SOURCE_MODULE, VERSION);    return Arrays.stream(nums).reduce(0, Integer::sum);  }  /**   * Implement accumulate multiply with new technique.   * Replace old one in {@link OldSource}   */",accumulateSum
507,  public void <extra_id_0>(final String value) {    this.value = value;  },setValue
1660,    public String <extra_id_0>() {      return log.get(log.size() - 1).getMessage();    },getLastMessage
2007,  public void <extra_id_0>(String name) {    this.name = name;  },setName
3320,  protected void <extra_id_0>() {    System.out.print(character);  },printThisBefore
3878,"  public void <extra_id_0>() throws InterruptedException {    requests.put(() -> {      logger.info(""{} is eating!"", name());      logger.info(""{} has finished eating!"", name());    });  }  /**   * Roam the wastelands.   * @throws InterruptedException due to firing a new Runnable.   */",eat
1033,"  public ChapterResult<String> <extra_id_0>(String value) {    if (value.equals(""crashed_order"")) {      LOGGER.info(""The Rollback for a chapter '{}' has been started. ""              + ""The data {} has been failed.The saga has been crashed."",          getName(), value);      return ChapterResult.failure(value);    }    LOGGER.info(""The Rollback for a chapter '{}' has been started. ""            + ""The data {} has been rollbacked successfully"",        getName(), value);    return super.rollback(value);  }",rollback
3302,  public static DataType <extra_id_0>(final LocalDateTime when) {    return new StartingData(when);  },of
2710,"  void <extra_id_0>() {    appender.stop();  }  /**   * Test a complete day cycle in the gold mine by executing all three different steps: {@link   * DwarvenGoldmineFacade#startNewDay()}, {@link DwarvenGoldmineFacade#digOutGold()} and {@link   * DwarvenGoldmineFacade#endDay()}.   * <p>   * See if the workers are doing what's expected from them on each step.   */  @Test",tearDown
1272,    public void <extra_id_0>() {      try {        dest.fulfill(func.apply(src.get()));      } catch (Throwable throwable) {        dest.fulfillExceptionally((Exception) throwable.getCause());      }    }  }},run
2293,"  public void <extra_id_0>(PlayerDetails details) {    var document = new Document(EMAIL, details.getEmail());    document.put(PHONE, details.getPhoneNumber());    document.put(""bank"", details.getBankAccount());    document.put(MESSAGE, ""Lottery ticket was checked and unfortunately did not win this time."");    eventsCollection.insertOne(document);    stdOutEventLog.ticketDidNotWin(details);  }  @Override",ticketDidNotWin
3746,  void <extra_id_0>();,onActivate
1326,"  void <extra_id_0>(Stats stat, Integer val);",set
2031,"  void <extra_id_0>() {    MockitoAnnotations.openMocks(this);    healthIndicator =        new DatabaseTransactionHealthIndicator(            healthCheckRepository, asynchronousHealthChecker, retryTemplate);    healthIndicator.setTimeoutInSeconds(timeoutInSeconds);  }  /**   * Test case for the `health()` method when the database transaction succeeds.   *   * <p>Asserts that when the `health()` method is called and the database transaction succeeds, it   * returns a Health object with Status.UP.   */  @Test",setUp
1354,"  void <extra_id_0>() {    var controller = new SignupController();    controller.getSignup();    RedirectAttributes redirectAttributes = new RedirectAttributesModelMap();    String redirectPath = controller.create(retrieveSignupData(), redirectAttributes);    assertEquals(""redirect:/user"", redirectPath);  }",testSignup
2522,  public String <extra_id_0>() {    return title;  },toString
3866,"  void <extra_id_0>() {    var title = ""The Product Title."";    var inventories = 5;    when(informationClient.getProductTitle()).thenReturn(title);    when(inventoryClient.getProductInventories()).thenReturn(inventories);    var testProduct = aggregator.getProduct();    assertEquals(title, testProduct.getTitle());    assertEquals(inventories, testProduct.getProductInventories());  }",testGetProduct
275,"  protected abstract void <extra_id_0>();  /**   * Move to (x, y, z).   * @param x X coordinate.   * @param y Y coordinate.   * @param z Z coordinate.   */",activate
3870,  String <extra_id_0>();,getProductTitle
981,  void <extra_id_0>() {    var core = new CustomerCore();    core.addRole(Role.Borrower);    assertTrue(core.hasRole(Role.Borrower));    assertFalse(core.hasRole(Role.Investor));  }  @Test,hasRole
3465,"  private static String <extra_id_0>() {    return        ""It was many and many a year ago,""            + ""In a kingdom by the sea,""            + ""That a maiden there lived whom you may know""            + ""By the name of ANNABEL LEE;""            + ""And this maiden she lived with no other thought""            + ""Than to love and be loved by me.""            + ""I was a child and she was a child,""            + ""In this kingdom by the sea;""            + ""But we loved with a love that was more than love-""            + ""I and my Annabel Lee;""            + ""With a love that the winged seraphs of heaven""            + ""Coveted her and me."";  }",text
3086,  public void <extra_id_0>() {    tobacco.smoke(this);  },smoke
2512,  private static Predicate<? super Integer> <extra_id_0>() {    return integer -> integer < 0;  },negatives
809,"  public void <extra_id_0>() {    LOGGER.info(""Sliding door closes."");  }",close
261,"  void <extra_id_0>() {    assertTrue(arithmetic.ifHasZero(-1, 0, 1));  }",testIfHasZero
2894,"  public static void <extra_id_0>(String[] args) {    // simple troll    LOGGER.info(""A simple looking troll approaches."");    var troll = new SimpleTroll();    troll.attack();    troll.fleeBattle();    LOGGER.info(""Simple troll power: {}."", troll.getAttackPower());    // change the behavior of the simple troll by adding a decorator    LOGGER.info(""A troll with huge club surprises you."");    var clubbedTroll = new ClubbedTroll(troll);    clubbedTroll.attack();    clubbedTroll.fleeBattle();    LOGGER.info(""Clubbed troll power: {}."", clubbedTroll.getAttackPower());  }",main
890,"  public void <extra_id_0>() throws IOException {    /*     * The application can customize its event dispatching mechanism.     */    reactor = new NioReactor(dispatcher);    /*     * This represents application specific business logic that dispatcher will call on appropriate     * events. These events are read events in our example.     */    var loggingHandler = new LoggingHandler();    /*     * Our application binds to multiple channels and uses same logging handler to handle incoming     * log requests.     */    reactor        .registerChannel(tcpChannel(16666, loggingHandler))        .registerChannel(tcpChannel(16667, loggingHandler))        .registerChannel(udpChannel(16668, loggingHandler))        .registerChannel(udpChannel(16669, loggingHandler))        .start();  }  /**   * Stops the NIO reactor. This is a blocking call.   *   * @throws InterruptedException if interrupted while stopping the reactor.   * @throws IOException          if any I/O error occurs   */",start
2409,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutExceptions
587,  protected final D <extra_id_0>() {    return this.dao;  }  @Test,getDao
1099,"  private Supplier<RuntimeException> <extra_id_0>(String chServiceName) {    return () -> new RuntimeException(        String.format(""the service %s has not been found"", chServiceName));  }  @Override",serviceNotFoundException
3149,  public boolean <extra_id_0>(final Customer customer) {    return idToCustomer.remove(customer.getId()) != null;  },delete
1522,  void <extra_id_0>() {    var drunkUnhappyKing = RoyaltyObjectMother.createDrunkKing();    var notFlirtyQueen = RoyaltyObjectMother.createNotFlirtyQueen();    drunkUnhappyKing.flirt(notFlirtyQueen);    assertFalse(drunkUnhappyKing.isHappy());  }  @Test,queenIsBlockingFlirtCauseDrunkKing
2515,"  private static <E> void <extra_id_0>(      String delimiter, String prefix,      Iterable<E> iterable  ) {    var joiner = new StringJoiner(delimiter, prefix, ""."");    iterable.forEach(e -> joiner.add(e.toString()));    LOGGER.info(joiner.toString());  }",prettyPrint
1380,  public static NullNode <extra_id_0>() {    return instance;  }  @Override,getInstance
880,"  public void <extra_id_0>() {    service.shutdown();    if (!service.isTerminated()) {      service.shutdownNow();      try {        service.awaitTermination(1000, TimeUnit.SECONDS);      } catch (InterruptedException e) {        LOGGER.error(""exception awaiting termination"", e);      }    }    LOGGER.info(""Logging clients stopped"");  }",stop
3513,  public String <extra_id_0>() {    return getRequestDescription();  },toString
1454,"  T <extra_id_0>(T obj, long id);",doUpdate
308,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
3312,"  LetterComposite <extra_id_0>() {    var words = List.of(        new Word('W', 'h', 'e', 'r', 'e'),        new Word('t', 'h', 'e', 'r', 'e'),        new Word('i', 's'),        new Word('a'),        new Word('w', 'h', 'i', 'p'),        new Word('t', 'h', 'e', 'r', 'e'),        new Word('i', 's'),        new Word('a'),        new Word('w', 'a', 'y')    );    return new Sentence(words);  }",messageFromOrcs
246,"  public int <extra_id_0>(int... nums) {    LOGGER.info(""Source module {}"", VERSION);    var sum = 1;    for (final var num : nums) {      sum *= num;    }    return sum;  }",accumulateMul
3263,"  public void <extra_id_0>(String oldTitle, String newTitle) {    var book = getBookByTitle(oldTitle);    book.setTitle(newTitle);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.update(book);      session.getTransaction().commit();    }  }  @Override",bookTitleUpdated
1138,  public void <extra_id_0>(String body) {    this.body = body;  }  @Override,setBody
2950,      public Double <extra_id_0>() {        return price;      },getPrice
1309,"  void <extra_id_0>() {    final var prototype = new Character();    Arrays.stream(Stats.values()).forEach(stat -> prototype.set(stat, stat.ordinal()));    final var mage = new Character(Type.MAGE, prototype);    for (final var stat : Stats.values()) {      final var expectedValue = stat.ordinal();      assertTrue(mage.has(stat));      assertEquals(expectedValue, mage.get(stat));    }  }  @Test",testCharacterStats
488,  void <extra_id_0>() {    shardManager = new TestShardManager();  }  @Test,setup
1711,"  public String <extra_id_0>() {    return this.fileName;  }  /**   * Returns true if the given file exists.   *   * @return True, if the file given exists, false otherwise.   */",getFileName
2572,"  Filterer<? extends ProbabilisticThreatAwareSystem, ? extends ProbableThreat> <extra_id_0>();",filtered
1253,  void <extra_id_0>() {    appender.stop();  }  @Test,tearDown
535,  public void <extra_id_0>(E entity) {    Transaction tx = null;    try (var session = getSessionFactory().openSession()) {      tx = session.beginTransaction();      session.delete(entity);      tx.commit();    } catch (Exception e) {      if (tx != null) {        tx.rollback();      }      throw e;    }  }  @Override,delete
2667,"  private void <extra_id_0>(BigDecimal money, boolean realTime) {    if (this.money.compareTo(money) < 0) {      throw new RuntimeException(""Insufficient Account Balance"");    }    withdrawMoney(money);    AccountAggregate.putAccount(this);    if (realTime) {      LOGGER.info(MSG);    }  }  /**   * Handles the MoneyDepositEvent.   *   * @param moneyDepositEvent the money deposit event   */",handleWithdrawal
2248,"  void <extra_id_0>(WireTransfers bank, Scanner scanner);  /**   * Recovery funds from lottery account.   */",addFundsToLotteryAccount
2664,  private void <extra_id_0>(BigDecimal money) {    this.money = this.money.add(money);  },depositMoney
1322,"  public void <extra_id_0>(Stats stat) {    properties.put(stat, null);  }  @Override",remove
3143,"  boolean <extra_id_0>(Customer customer) throws Exception;  /**   * Delete a customer.   *   * @param customer the customer to be deleted.   * @return true if customer exists and is successfully deleted, false otherwise.   * @throws Exception if any error occurs.   */",update
345,    public Character <extra_id_0>() {      var character = new Character(name);      if (fighterClass != null) {        character.setFighterClass(fighterClass);      } else {        character.setWizardClass(wizardClass);      }      if (weapon != null) {        character.setWeapon(weapon);      } else {        character.setSpell(spell);      }      if (!abilities.isEmpty()) {        character.setAbilities(abilities);      }      return character;    }  }},build
3246,"  public List<Book> <extra_id_0>(String username) {    List<Book> bookDtos;    try (var session = sessionFactory.openSession()) {      Query<Book> sqlQuery = session.createQuery(              ""select new com.iluwatar.cqrs.dto.Book(b.title, b.price)""                      + "" from com.iluwatar.cqrs.domain.model.Author a, com.iluwatar.cqrs.domain.model.Book b ""                      + ""where b.author.id = a.id and a.username=:username"");      sqlQuery.setParameter(AppConstants.USER_NAME, username);      bookDtos = sqlQuery.list();    }    return bookDtos;  }  @Override",getAuthorBooks
1847,  public void <extra_id_0>(Worker worker) {    workers.remove(worker);  },removeWorker
2430,  protected void <extra_id_0>() {    views.forEach(view -> view.storeChanged(this));  },notifyChange
2570,  public ThreatType <extra_id_0>() {    return threatType;  },type
1520,"  public static void <extra_id_0>(String[] args) {    try {      var classLoader = App.class.getClassLoader();      var applicationFile = new File(classLoader.getResource(""sample-ui/login.html"").getPath());      // should work for unix like OS (mac, unix etc...)      if (Desktop.isDesktopSupported()) {        Desktop.getDesktop().open(applicationFile);      } else {        // java Desktop not supported - above unlikely to work for Windows so try instead...        Runtime.getRuntime().exec(""cmd.exe start "" + applicationFile);      }    } catch (IOException ex) {      LOGGER.error(""An error occurred."", ex);    }  }",main
3108,  public int <extra_id_0>() {    return log.size();  },getLogSize
2937,"  public String <extra_id_0>() {    return ""Product{""            + ""id="" + id            + "", name='"" + name + '\''            + "", price="" + price            + "", cost="" + cost            + "", supplier='"" + supplier + '\''            + '}';  }",toString
2156,"  void <extra_id_0>() throws Exception {    final var exception = new IOException();    when(task.call()).thenThrow(exception);    service.execute(task);    verify(task, timeout(2000)).onError(eq(exception));    final var inOrder = inOrder(task);    inOrder.verify(task, times(1)).onPreCall();    inOrder.verify(task, times(1)).call();    inOrder.verify(task, times(1)).onError(exception);    verifyNoMoreInteractions(task);  }  @Test",testCallException
100,"  boolean <extra_id_0>() {    for (var i = 0; i < this.cells.length; i++) {      if (this.cells[cells.length - 1][i].candy.getType().equals(Type.REWARD_FRUIT)) {        return true;      }    }    for (var i = 0; i < this.cells.length; i++) {      for (var j = 0; j < this.cells.length; j++) {        if (!this.cells[i][j].candy.getType().equals(Type.REWARD_FRUIT)) {          var adj = adjacentCells(i, j);          for (Cell cell : adj) {            if (this.cells[i][j].candy.name.equals(cell.candy.name)) {              return true;            }          }        }      }    }    return false;  }",continueRound
1650,"  void <extra_id_0>(NazgulEnum nazgulEnum) {    var instance1 = nazgulEnum;    var instance2 = nazgulEnum;    var instance3 = nazgulEnum;    assertSame(instance1, instance2);    assertSame(instance1, instance3);    assertSame(instance2, instance3);  }",testTheSameObjectIsReturnedWithMultipleCalls
2181,  public List<Item> <extra_id_0>() {    return new ArrayList<>(items);  },getItems
3780,"  void <extra_id_0>() {    final String heroName = ""Sir Lancelot"";    final var hero = new Hero.Builder(Profession.WARRIOR, heroName)        .withArmor(Armor.CHAIN_MAIL)        .withWeapon(Weapon.SWORD)        .withHairType(HairType.LONG_CURLY)        .withHairColor(HairColor.BLOND)        .build();    assertNotNull(hero);    assertNotNull(hero.toString());    assertEquals(Profession.WARRIOR, hero.profession());    assertEquals(heroName, hero.name());    assertEquals(Armor.CHAIN_MAIL, hero.armor());    assertEquals(Weapon.SWORD, hero.weapon());    assertEquals(HairType.LONG_CURLY, hero.hairType());    assertEquals(HairColor.BLOND, hero.hairColor());  }",testBuildHero
825,"  void <extra_id_0>() {    final var e = new BusinessException(""unhandled"");    final var retry = new Retry<String>(        () -> {          throw e;        },        2,        0    );    try {      retry.perform();    } catch (BusinessException ex) {      //ignore    }    assertThat(retry.attempts(), is(1));  }  /**   * Final number of attempts should be equal to the number of attempts asked because we are asking   * it to ignore the exception that will be thrown.   */  @Test",attempts
2847,"  final SpaceStationIss <extra_id_0>() {    return new SpaceStationIss(1, 2, 3, 4);  }  /**   * Test the constructor parameters   */  @Test",getTestedObject
3424,"    private Commander <extra_id_0>() {        PaymentService paymentService = new PaymentService                (new PaymentDatabase());        var shippingService = new ShippingService(new ShippingDatabase());        var messagingService = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException());        var employeeHandle = new EmployeeHandle                (new EmployeeDatabase(), new IllegalStateException());        var qdb = new QueueDatabase                (new DatabaseUnavailableException(), new IllegalStateException());        return new Commander(employeeHandle, paymentService, shippingService,                messagingService, qdb, numOfRetries, retryDuration,                queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    }",buildCommanderObjectNoPaymentException3
951,  List<Person> <extra_id_0>();,findAll
2329,"  public boolean <extra_id_0>(int amount, String sourceAccount, String destinationAccount) {    var sourceFunds = getFunds(sourceAccount);    if (sourceFunds < amount) {      return false;    } else {      var destFunds = getFunds(destinationAccount);      setFunds(sourceAccount, sourceFunds - amount);      setFunds(destinationAccount, destFunds + amount);      return true;    }  }",transferFunds
2317,  int <extra_id_0>(String bankAccount);  /**   * Transfer funds from one bank account to another.   */,getFunds
923,  private boolean <extra_id_0>() {    return globalMutex.contains(writerLock);  }  /**   * Nobody get the lock when globalMutex contains nothing.   */,doesWriterOwnThisLock
926,"    private void <extra_id_0>() {      // Try to get the globalMutex lock for the first reader      synchronized (globalMutex) {        // If the no one get the lock or the lock is locked by reader, just set the reference        // to the globalMutex to indicate that the lock is locked by Reader.        while (doesWriterOwnThisLock()) {          try {            globalMutex.wait();          } catch (InterruptedException e) {            var message = ""InterruptedException while waiting for globalMutex in acquireForReaders"";            LOGGER.info(message, e);            Thread.currentThread().interrupt();          }        }        globalMutex.add(this);      }    }    @Override",acquireForReaders
3379,"  void <extra_id_0>() throws Exception {    //rest is successful    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",messagingDatabaseUnavailableCasePaymentSuccess
2161,  private static TreeNode<Integer> <extra_id_0>() {    var root = new TreeNode<>(8);    root.insert(3);    root.insert(10);    root.insert(1);    root.insert(6);    root.insert(14);    root.insert(4);    root.insert(7);    root.insert(13);    return root;  }  /**   * Program entry point.   *   * @param args command line args   */,buildIntegerBst
3562,"  public String <extra_id_0>() {    return ""Local Service is working"";  }  /**   * Fetch response from the delayed service (with some simulated startup time).   *   * @return response string   */",localResourceResponse
3818,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
3089,  public void <extra_id_0>() {    tobacco.smoke(this);  },smoke
2247,"  void <extra_id_0>(LotteryService service, Scanner scanner);  /**   * Add funds to lottery account.   */",submitTicket
3273,"  void <extra_id_0>() {    var author = queryService.getAuthorByUsername(""username1"");    assertEquals(""username1"", author.getUsername());    assertEquals(""name1"", author.getName());    assertEquals(""email1"", author.getEmail());  }  @Test",testGetAuthorByUsername
976,"  void <extra_id_0>() {    var persons = repository.findAll(new PersonSpecifications.AgeBetweenSpec(20, 40));    assertEquals(3, persons.size());    assertTrue(persons.stream().allMatch((item) -> item.getAge() > 20 && item.getAge() < 40));  }  @Test",testFindAllByAgeBetweenSpec
132,"      void <extra_id_0>() throws Exception {        try (var allRooms = dao.getAll()) {          assumeTrue(allRooms.count() == 1);        }        final var nonExistingRoom = new Room(2, ""Double"", 80, false);        var result = dao.add(nonExistingRoom);        Assertions.assertTrue(result);        assertRoomCountIs(2);        assertEquals(nonExistingRoom, dao.getById(nonExistingRoom.getId()).get());      }      @Test",addingShouldResultInSuccess
561,  public String <extra_id_0>() {    return name;  },getName
3831,  void <extra_id_0>() {    var hayes = new Hayes();    var mockVisitor = mock(ConfigureForUnixVisitor.class);    hayes.accept(mockVisitor);    verifyNoMoreInteractions(mockVisitor);  },testAcceptForUnix
3019,"  void <extra_id_0>(int x, int y);  /**   * Clear all the pixels.   */",draw
2325,  public MongoDatabase <extra_id_0>() {    return database;  }  /**   * Get accounts collection.   *   * @return accounts collection   */,getMongoDatabase
1217,      public void <extra_id_0>(final MouseEvent e) {        saveToMod();        loadFromMod();      }    });,mouseClicked
611,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    assertEquals(Fatigue.ALERT, model.getFatigue());    var messageFormat = ""Giant giant1, The giant looks healthy, %s and saturated."";    for (final var fatigue : Fatigue.values()) {      action.setFatigue(fatigue);      assertEquals(fatigue, model.getFatigue());      assertEquals(String.format(messageFormat, fatigue), model.toString());    }  }  /**   * Verify if the nourishment level is set properly though the constructor and setter   */  @Test",testSetFatigue
916,"  public void <extra_id_0>() {    writeLock.lock();    try {      write();    } catch (InterruptedException e) {      LOGGER.info(""InterruptedException when writing"", e);      Thread.currentThread().interrupt();    } finally {      writeLock.unlock();    }  }  /**   * Simulate the write operation.   */",run
2635,  void <extra_id_0>() {    UserGroup.addUserToPaidGroup(paidUser);    UserGroup.addUserToFreeGroup(freeUser);  }  @Test,setUp
1745,  public String <extra_id_0>() {    return TAG;  },tag
1582,  public static void <extra_id_0>(final String... args) throws FileNotFoundException {    prepare();    execute();    unprepare();  },main
971,  void <extra_id_0>() {    repository.saveAll(persons);  }  @Test,setup
1447,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2105,"    public String <extra_id_0>() {        return String.format(""CakeInfo id=%d topping=%s layers=%s totalCalories=%d"", id.orElse(-1L),                cakeToppingInfo, cakeLayerInfos, calculateTotalCalories());    }",toString
3340,"    void <extra_id_0>(){        LOGGER.info(""objectTest:"");        assertEquals(""player"",playerTest.getName());        assertEquals(""npc"",npcTest.getName());    }    /**     * Tests the input component with varying key event inputs.     * Targets the player game object.     */    @Test",objectTest
2637,"  void <extra_id_0>() {    final var welcomeMessage = service.getWelcomeMessage(freeUser);    final var expected = ""I suppose you can use this software."";    assertEquals(expected, welcomeMessage);  }  @Test",testGetWelcomeMessageForFreeUser
1736,"  void <extra_id_0>() {    List<CalculatorAction> actions = List.of(        new SetVariableCalculatorAction(2.0),        new AdditionCalculatorAction(),        new AdditionCalculatorAction(),        new MultiplicationCalculatorAction()    );    CalculatorModel model = modelAfterExecutingActions(actions);    assert model.getVariable() == 2.0 && model.getOutput() == 8.0;  }  @Test",testMultiplication
74,"  void <extra_id_0>() {    var weaponRepository = new ArmsDealer(new HashMap<>(), weaponDatabase);    weaponRepository.commit();    verifyNoMoreInteractions(weaponDatabase);  }  @Test",shouldNotWriteToDbIfNothingToCommit
1464,  public int <extra_id_0>() {    return id;  }  @Override,getId
1644,  public int[] <extra_id_0>() {    return accounts;  },getAccounts
471,"  public int <extra_id_0>() throws IOException, ClassNotFoundException {    var sql = ""SELECT ID, COUNTRY FROM WORLD WHERE ID = ?"";    try (var connection = dataSource.getConnection();         var preparedStatement = connection.prepareStatement(sql)) {      preparedStatement.setInt(1, country.getCode());      try (ResultSet rs = preparedStatement.executeQuery()) {        if (rs.next()) {          Blob countryBlob = rs.getBlob(""country"");          ByteArrayInputStream baos = new ByteArrayInputStream(countryBlob.getBytes(1, (int) countryBlob.length()));          ObjectInputStream ois = new ObjectInputStream(baos);          country = (Country) ois.readObject();          LOGGER.info(""Country: "" + country);        }        return rs.getInt(""id"");      }    } catch (SQLException e) {      LOGGER.info(""Exception thrown "" + e.getMessage());    }    return -1;  }",selectCountry
145,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.getAll();      });    }  }  /**   * Delete room schema for fresh setup per test.   *   * @throws SQLException if any error occurs.   */  @AfterEach",retrievingAllRoomsFailsWithExceptionAsFeedbackToClient
2994,  void <extra_id_0>(final String message);,print
893,"  private AbstractNioChannel <extra_id_0>(int port, ChannelHandler handler) throws IOException {    var channel = new NioDatagramChannel(port, handler);    channel.bind();    channels.add(channel);    return channel;  }",udpChannel
1238,  void <extra_id_0>() {    appender.stop();  }  /**   * Verify if mixing the stew doesn't change the internal state   */  @Test,tearDown
739,"  void <extra_id_0>(Point p) {    if (this.boundary.contains(p)) {      if (this.points.size() < this.capacity) {        points.put(p.id, p);      } else {        if (!this.divided) {          this.divide();        }        if (this.northwest.boundary.contains(p)) {          this.northwest.insert(p);        } else if (this.northeast.boundary.contains(p)) {          this.northeast.insert(p);        } else if (this.southwest.boundary.contains(p)) {          this.southwest.insert(p);        } else if (this.southeast.boundary.contains(p)) {          this.southeast.insert(p);        }      }    }  }",insert
3873,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(InformationApplication.class, args);  }",main
3812,  public King <extra_id_0>() {    return new OrcKing();  }  @Override,createKing
3275,"  void <extra_id_0>() {    var book = queryService.getBook(""title1"");    assertEquals(""title1"", book.getTitle());    assertEquals(10, book.getPrice(), 0.01);  }  @Test",testGetBook
3657,"  public static int[] <extra_id_0>(String instructions) {    if (instructions == null || instructions.trim().length() == 0) {      return new int[0];    }    var splitedInstructions = instructions.trim().split("" "");    var bytecode = new int[splitedInstructions.length];    for (var i = 0; i < splitedInstructions.length; i++) {      if (isValidInstruction(splitedInstructions[i])) {        bytecode[i] = Instruction.valueOf(splitedInstructions[i]).getIntValue();      } else if (isValidInt(splitedInstructions[i])) {        bytecode[i] = Integer.parseInt(splitedInstructions[i]);      } else {        var errorMessage = ""Invalid instruction or number: "" + splitedInstructions[i];        throw new IllegalArgumentException(errorMessage);      }    }    return bytecode;  }",convertToByteCode
335,    public ClassStep <extra_id_0>(String name) {      this.name = name;      return this;    }    @Override,name
3486,"  public String <extra_id_0>() {    return ""Wizard"";  }",toString
9,"  public static RainbowFish <extra_id_0>(String filename) throws IOException, ClassNotFoundException {    Map<String, String> map;    try (var fileIn = new FileInputStream(filename);         var objIn = new ObjectInputStream(fileIn)) {      map = (Map<String, String>) objIn.readObject();    }    return new RainbowFish(        map.get(""name""),        Integer.parseInt(map.get(""age"")),        Integer.parseInt(map.get(LENGTH_METERS)),        Integer.parseInt(map.get(WEIGHT_TONS))    );  }",readV1
3815,  King <extra_id_0>();,createKing
3561,"  public String <extra_id_0>() throws RemoteServiceException {    return ""Quick Service is working"";  }",call
576,  public void <extra_id_0>(Spellbook spellbook) {    this.spellbook = spellbook;  }  @Override,setSpellbook
2921,"  public void <extra_id_0>() {    LOGGER.info(""Update physics component of game"");  }  @Override",update
3799,  void <extra_id_0>() {	  assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
129,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
82,"  private void <extra_id_0>(Weapon weapon, String operation) {    var weaponsToOperate = context.get(operation);    if (weaponsToOperate == null) {      weaponsToOperate = new ArrayList<>();    }    weaponsToOperate.add(weapon);    context.put(operation, weaponsToOperate);  }  /**   * All UnitOfWork operations are batched and executed together on commit only.   */  @Override",register
3404,"  String <extra_id_0>(MessageToSend m) {    if (m.equals(MessageToSend.PAYMENT_SUCCESSFUL)) {      return ""Msg: Your order has been placed and paid for successfully!""          + "" Thank you for shopping with us!"";    } else if (m.equals(MessageToSend.PAYMENT_TRYING)) {      return ""Msg: There was an error in your payment process,""          + "" we are working on it and will return back to you shortly.""          + "" Meanwhile, your order has been placed and will be shipped."";    } else {      return ""Msg: There was an error in your payment process.""          + "" Your order is placed and has been converted to COD.""          + "" Please reach us on CUSTOMER-CARE-NUBER in case of any queries.""          + "" Thank you for shopping with us!"";    }  }",sendMessage
3545,"  void <extra_id_0>() {    var circuitBreaker = new DefaultCircuitBreaker(null, 1, 1, 2000 * 1000 * 1000);    //Right now, failureCount<failureThreshold, so state should be closed    //Bypass it and set it to open    circuitBreaker.setState(State.OPEN);    assertEquals(circuitBreaker.getState(), ""OPEN"");  }  @Test",testSetStateForBypass
180,  Boolean <extra_id_0>(Room room) throws Exception;,add
816,  public int <extra_id_0>() {    return this.attempts.intValue();  }  @Override,attempts
385,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
2971,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2196,"  void <extra_id_0>() {    var iter = new BstIterator<>(nonEmptyRoot);    assertTrue(iter.hasNext(), ""hasNext() should return true for populated tree."");  }  @Test",hasNextForPopulatedTree
2947,      public Public <extra_id_0>(Long id) {        this.id = id;        return this;      }      @Override,setId
2011,  public void <extra_id_0>(String address) {    this.address = address;  },setAddress
130,  void <extra_id_0>() throws SQLException {    try (var connection = DriverManager.getConnection(DB_URL);         var statement = connection.createStatement()) {      statement.execute(RoomSchemaSql.DELETE_SCHEMA_SQL);      statement.execute(RoomSchemaSql.CREATE_SCHEMA_SQL);    }  }  /**   * Represents the scenario where DB connectivity is present.   */  @Nested,createSchema
2082,"  void <extra_id_0>() {    final var expectedMessage = ""message"";    final var exception = new CakeBakingException(expectedMessage);    assertEquals(expectedMessage, exception.getMessage());    assertNull(exception.getCause());  }",testConstructorWithMessage
1941,  private List<Integer> <extra_id_0>(int currentId) {    return instanceMap.keySet()        .stream()        .filter((i) -> i < currentId && instanceMap.get(i).isAlive())        .toList();  },findElectionCandidateInstanceList
421,"  void <extra_id_0>() throws SQLException {    var dataSource = createDataSource();    var userTableModule = new UserTableModule(dataSource);    var user = new User(1, ""123456"", ""123456"");    userTableModule.registerUser(user);    assertThrows(SQLException.class, () -> {      userTableModule.registerUser(user);    });  }  @Test",registerShouldFail
1332,"  public String <extra_id_0>(String input) {    var inputWithoutDigits = new StringBuilder();    var isDigit = (IntPredicate) Character::isDigit;    input.chars()        .filter(isDigit.negate())        .mapToObj(x -> (char) x)        .forEachOrdered(inputWithoutDigits::append);    var inputWithoutDigitsStr = inputWithoutDigits.toString();    LOGGER.info(        String.format(            ""Current handler: %s, input is %s of type %s, output is %s, of type %s"",            RemoveDigitsHandler.class, input, String.class, inputWithoutDigitsStr, String.class        )    );    return inputWithoutDigitsStr;  }",process
867,"  private void <extra_id_0>() {    var iterator = pendingCommands.iterator();    while (iterator.hasNext()) {      var command = iterator.next();      command.run();      iterator.remove();    }  }  /*   * Initiation dispatcher logic, it checks the type of event and notifier application specific   * event handler to handle the event.   */",processPendingCommands
2532,"  public void <extra_id_0>() {    LOGGER.info(""Urgh! This is poisonous. (Potion={})"", System.identityHashCode(this));  }",drink
3349,"  void <extra_id_0>() throws Exception {    var ps = new PaymentService(new PaymentDatabase());    var ss = new ShippingService(new ShippingDatabase(), new ItemUnavailableException());    var ms = new MessagingService(new MessagingDatabase());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }",itemUnavailableCase
684,  void <extra_id_0>() {    final var swimmingHeavyCreature = mock(Creature.class);    when(swimmingHeavyCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingHeavyCreature.getMass()).thenReturn(new Mass(100.0));    final var swimmingLightCreature = mock(Creature.class);    when(swimmingLightCreature.getMovement()).thenReturn(Movement.SWIMMING);    when(swimmingLightCreature.getMass()).thenReturn(new Mass(25.0));    final var lightAndSwimmingSelector = new MassSmallerThanOrEqSelector(50.0)        .and(new MovementSelector(Movement.SWIMMING));    assertFalse(lightAndSwimmingSelector.test(swimmingHeavyCreature));    assertTrue(lightAndSwimmingSelector.test(swimmingLightCreature));  }  /**   * Verify if the disjunction selector gives the correct results.   */  @Test,testAndComposition
3669,  public void <extra_id_0>(final CachingPolicy policy) {    cachingPolicy = policy;    if (cachingPolicy == CachingPolicy.BEHIND) {      Runtime.getRuntime().addShutdownHook(new Thread(cacheStore::flushCache));    }    cacheStore.clearCache();  }  /**   * Find user account.   *   * @param userId String   * @return {@link UserAccount}   */,initCachingPolicy
3851,  default Optional<Number> <extra_id_0>() {    return Optional.ofNullable((Number) get(Property.PRICE.toString()));  },getPrice
1861,  void <extra_id_0>() {    appender = new InMemoryAppender(PartyMemberBase.class);  }  @AfterEach,setUp
560,  public void <extra_id_0>(Long id) {    this.id = id;  },setId
593,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  }  @AfterEach,shouldExecuteWithoutException
1069,"  public String <extra_id_0>() {    return ""booking a Hotel"";  }",getName
1752,  public String <extra_id_0>() {    return title;  },toString
489,"  void <extra_id_0>() {    try {      var shard = new Shard(1);      shardManager.addNewShard(shard);      var field = ShardManager.class.getDeclaredField(""shardMap"");      field.setAccessible(true);      var map = (Map<Integer, Shard>) field.get(shardManager);      assertEquals(1, map.size());      assertEquals(shard, map.get(1));    } catch (NoSuchFieldException | IllegalAccessException e) {      fail(""Fail to modify field access."");    }  }  @Test",testAddNewShard
1267,"  public Promise<T> <extra_id_0>(final Callable<T> task, Executor executor) {    executor.execute(() -> {      try {        fulfill(task.call());      } catch (Exception ex) {        fulfillExceptionally(ex);      }    });    return this;  }  /**   * Returns a new promise that, when this promise is fulfilled normally, is fulfilled with result   * of this promise as argument to the action provided.   *   * @param action action to be executed.   * @return a new promise.   */",fulfillInAsync
668,  Movement <extra_id_0>();,getMovement
2539,"  public void <extra_id_0>() {    LOGGER.info(""You feel healed. (Potion={})"", System.identityHashCode(this));  }",drink
1127,  private boolean <extra_id_0>(int index) {    return leftChildIndex(index) < size;  },hasLeftChild
1109,"  void <extra_id_0>() {    var queueManager = new QueueManager(2);    var testMessage = new Message(""Test Message"", 1);    queueManager.publishMessage(testMessage);    var recivedMessage = queueManager.receiveMessage();    assertEquals(testMessage, recivedMessage);  }  @Test",publishMessage
1865,"  void <extra_id_0>(Supplier<PartyMember> memberSupplier) {    final var member = memberSupplier.get();    final var memberClass = member.getClass();    assertEquals(memberClass.getSimpleName(), member.toString());  }",testToString
1700,  public void <extra_id_0>() {    this.setVisible(true);  }  @Override,open
3366,"  private void <extra_id_0>(Order order) {    if (System.currentTimeMillis() - order.createdTime >= this.messageTime) {      LOG.trace(""Message time for order over, returning.."");      return;    }    var list = messagingService.exceptionsList;    var t = new Thread(() -> {      Retry.Operation op = (l) -> {        handlePaymentPossibleErrorMsgRetryOperation(order, l);      };      Retry.HandleErrorIssue<Order> handleError = (o, err) -> {        handlePaymentPossibleErrorMsgErrorIssue(order, o);      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, order);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",sendPaymentPossibleErrorMsg
3817,  public String <extra_id_0>() {    return DESCRIPTION;  },getDescription
3075,"    void <extra_id_0>() {        customer.setPurchases(new ArrayList<>(Arrays.asList(product)));        customer.returnProduct(product);        assertEquals(new ArrayList<>(), customer.getPurchases());        assertEquals(Money.of(USD, 200), customer.getMoney());        customer.returnProduct(product);        assertEquals(new ArrayList<>(), customer.getPurchases());        assertEquals(Money.of(USD, 200), customer.getMoney());    }",shouldRemoveProductFromPurchases
412,"  public void <extra_id_0>() {    long nanosToPark = RND.nextInt(RANDOM_THREAD_PARK_START, RANDOM_THREAD_PARK_END);    LockSupport.parkNanos(nanosToPark);    System.out.println(getThreadName() + "", before value changing: "" + getter().get());    setter().accept(RND.nextInt());  }  /**   * Setter for our value.   *   * @return consumer   */",run
3356,"  private void <extra_id_0>(Order order) {    if (System.currentTimeMillis() - order.createdTime >= this.paymentTime) {      if (order.paid.equals(PaymentStatus.TRYING)) {        order.paid = PaymentStatus.NOT_DONE;        sendPaymentFailureMessage(order);        LOG.error(ORDER_ID + "": Payment time for order over, failed and returning.."", order.id);      } //if succeeded or failed, would have been dequeued, no attempt to make payment           return;    }    var list = paymentService.exceptionsList;    var t = new Thread(() -> {      Retry.Operation op = (l) -> {        if (!l.isEmpty()) {          if (DatabaseUnavailableException.class.isAssignableFrom(l.get(0).getClass())) {            LOG.debug(ORDER_ID + "": Error in connecting to payment service,""                + "" trying again.."", order.id);          } else {            LOG.debug(ORDER_ID + "": Error in creating payment request.."", order.id);          }          throw l.remove(0);        }        if (order.paid.equals(PaymentStatus.TRYING)) {          var transactionId = paymentService.receiveRequest(order.price);          order.paid = PaymentStatus.DONE;          LOG.info(ORDER_ID + "": Payment successful, transaction Id: {}"",                  order.id, transactionId);          if (!finalSiteMsgShown) {            LOG.info(""Payment made successfully, thank you for shopping with us!!"");            finalSiteMsgShown = true;          }          sendSuccessMessage(order);        }      };      Retry.HandleErrorIssue<Order> handleError = (o, err) -> {        if (PaymentDetailsErrorException.class.isAssignableFrom(err.getClass())) {          if (!finalSiteMsgShown) {            LOG.info(""There was an error in payment. Your account/card details ""                + ""may have been incorrect. ""                + ""Meanwhile, your order has been converted to COD and will be shipped."");            finalSiteMsgShown = true;          }          LOG.error(ORDER_ID + "": Payment details incorrect, failed.."", order.id);          o.paid = PaymentStatus.NOT_DONE;          sendPaymentFailureMessage(o);        } else {          if (o.messageSent.equals(MessageSent.NONE_SENT)) {            if (!finalSiteMsgShown) {              LOG.info(""There was an error in payment. We are on it, and will get back to you ""                  + ""asap. Don't worry, your order has been placed and will be shipped."");              finalSiteMsgShown = true;            }            LOG.warn(ORDER_ID + "": Payment error, going to queue.."", order.id);            sendPaymentPossibleErrorMsg(o);          }          if (o.paid.equals(PaymentStatus.TRYING) && System              .currentTimeMillis() - o.createdTime < paymentTime) {            var qt = new QueueTask(o, TaskType.PAYMENT, -1);            updateQueue(qt);          }        }      };      var r = new Retry<>(op, handleError, numOfRetries, retryDuration,          e -> DatabaseUnavailableException.class.isAssignableFrom(e.getClass()));      try {        r.perform(list, order);      } catch (Exception e1) {        e1.printStackTrace();      }    });    t.start();  }",sendPaymentRequest
1247,  void <extra_id_0>() {    appender = new InMemoryAppender();  }  @AfterEach,setUp
1136,  public String <extra_id_0>(Headers header) {    return headers.get(header);  }  @Override,getHeader
705,  public Double <extra_id_0>() {    return price;  }  @Override,getPrice
1039,  public abstract String <extra_id_0>();  @Override,getName
3150,  public static void <extra_id_0>(final String[] args) throws Exception {    final var inMemoryDao = new InMemoryCustomerDao();    performOperationsUsing(inMemoryDao);    final var dataSource = createDataSource();    createSchema(dataSource);    final var dbDao = new DbCustomerDao(dataSource);    performOperationsUsing(dbDao);    deleteSchema(dataSource);  },main
1578,  public void <extra_id_0>(final String value) {    this.error.println(value);  },printErrorString
3045,  private static DataSource <extra_id_0>() {    var dataSource = new JdbcDataSource();    dataSource.setUrl(H2_DB_URL);    return dataSource;  },createDataSource
2460,"  void <extra_id_0>() {    final var integers = List.of(1, 2, 3);    final var longs = createFluentIterable(integers)        .map(Integer::longValue)        .asList();    assertNotNull(longs);    assertEquals(integers.size(), longs.size());    assertEquals(Long.valueOf(1), longs.get(0));    assertEquals(Long.valueOf(2), longs.get(1));    assertEquals(Long.valueOf(3), longs.get(2));  }  @Test",testMap
3676,"  public UserAccount <extra_id_0>(final String userId) {    if (cache.contains(userId)) {      LOGGER.info(""# Found in Cache!"");      return cache.get(userId);    }    LOGGER.info(""# Not found in cache! Go to DB!!"");    UserAccount userAccount = dbManager.readFromDb(userId);    cache.set(userId, userAccount);    return userAccount;  }  /**   * Get user account using write-through cache.   * @param userAccount {@link UserAccount}   */",readThrough
2746,  protected void <extra_id_0>(Event e) {    if (observerLists.containsKey(e)) {      observerLists          .get(e)          .forEach(observer -> observer.onEvent(e));    }  },notifyObservers
2491,  public FluentIterable<E> <extra_id_0>(Predicate<? super E> predicate) {    return new LazyFluentIterable<>() {      @Override      public Iterator<E> iterator() {        return new DecoratingIterator<>(iterable.iterator()) {          @Override          public E computeNext() {            while (fromIterator.hasNext()) {              var candidate = fromIterator.next();              if (predicate.test(candidate)) {                return candidate;              }            }            return null;          }        };      }    };  }  /**   * Can be used to collect objects from the iteration. Is a terminating operation.   *   * @return an Optional containing the first object of this Iterable   */  @Override,filter
1546,  public void <extra_id_0>() {    isHappy = false;  },makeUnhappy
3418,    private Commander <extra_id_0>() {        return buildCommanderObject(false);    },buildCommanderObject
1613,"  public static void <extra_id_0>(CheckedRunnable runnable) {    try {      runnable.run();    } catch (Exception e) {      throw new AssertionError(e);    }  }  /**   * Executes the <code>runnable</code> and logs the exception occurred on {@link System#err}. This   * method should be utilized to mute the operations about which most you can do is log. For   * instance while closing a connection to database, or cleaning up a resource, all you can do is   * log the exception occurred.   *   * @param runnable a runnable that may throw an exception on execution.   */",mute
3461,  default Finder <extra_id_0>(Finder notFinder) {    return txt -> {      List<String> res = this.find(txt);      res.removeAll(notFinder.find(txt));      return res;    };  }  /**   * combinator or.   * @param orFinder finder to combine   * @return new finder including previous finders   */,not
948,"  public void <extra_id_0>() {    var count = this.msgCount;    try {      while (count > 0) {        var statusMsg = ""Message-"" + count + "" submitted by "" + Thread.currentThread().getName();        this.submit(new Message(statusMsg));        LOGGER.info(statusMsg);        // reduce the message count.        count--;        // Make the current thread to sleep after every Message submission.        Thread.sleep(1000);      }    } catch (Exception e) {      LOGGER.error(e.getMessage());    }  }",run
2269,  public void <extra_id_0>() {    tickets.clear();  },deleteAll
3859,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(null));  },shouldExecuteAppWithoutException
1219,"  public void <extra_id_0>(final String title,                        final String artist, final boolean isClassical,                        final String composer) {    if (isClassical) {      this.albums.add(new Album(title, artist, true, composer));    } else {      this.albums.add(new Album(title, artist, false, """"));    }  }",addAlbums
452,  public long <extra_id_0>(String tenantName) {    return tenantCallsCount.get(tenantName).get();  }  /**   * Resets the count of all the tenants in the map.   */,getCount
2647,  void <extra_id_0>() {    eventProcessor = new DomainEventProcessor(new JsonFileJournal());  }  /**   * Test state recovery.   */  @Test,initialize
1077,  public Saga <extra_id_0>(String name) {    this.chapters.add(new Chapter(name));    return this;  }  /**   * set value to last chapter.   *   * @param value invalue   * @return this   */,chapter
1850,  public List<Worker> <extra_id_0>() {    return workers;  },getWorkers
440,"  void <extra_id_0>() {    var user = new User(1, ""tmp"", ""iloveyou"");    user.setUsername(""janedoe"");    assertEquals(""janedoe"", user.getUsername());  }  @Test",testSetUsername
940,"  void <extra_id_0>() {    var msgQueue = new MessageQueue();    // submit message    msgQueue.submitMsg(new Message(""MessageQueue Test""));    // retrieve message    assertEquals(""MessageQueue Test"", msgQueue.retrieveMsg().getMsg());  }",messageQueueTest
2314,  public int <extra_id_0>() {    final var prime = 31;    var result = 1;    result = prime * result + ((lotteryNumbers == null) ? 0 : lotteryNumbers.hashCode());    result = prime * result + ((playerDetails == null) ? 0 : playerDetails.hashCode());    return result;  }  @Override,hashCode
2910,"  public void <extra_id_0>(Student studentToBeUpdated) throws DataMapperException {    String name = studentToBeUpdated.getName();    Integer index = Optional.of(studentToBeUpdated)        .map(Student::getStudentId)        .flatMap(this::find)        .map(students::indexOf)        .orElseThrow(() -> new DataMapperException(""Student ["" + name + ""] is not found""));    students.set(index, studentToBeUpdated);  }  @Override",update
2728,    protected void <extra_id_0>(ILoggingEvent eventObject) {      log.add(eventObject);    },append
1389,  void <extra_id_0>() {    final var observer = mock(WeatherObserver.class);    final var weather = new Weather();    weather.addObserver(observer);    final var inOrder = inOrder(observer);    final var weatherTypes = WeatherType.values();    for (var i = 1; i < 20; i++) {      weather.timePasses();      inOrder.verify(observer).update(weatherTypes[i % weatherTypes.length]);    }    verifyNoMoreInteractions(observer);  },testTimePasses
1783,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[] {}));  }  @Test,shouldExecuteApplicationWithoutException
3213,"  public void <extra_id_0>(HttpServletRequest req, HttpServletResponse resp)          throws ServletException, IOException {    RequestDispatcher requestDispatcher = req.getRequestDispatcher(destination);    ClientPropertiesBean reqParams = new ClientPropertiesBean(req);    req.setAttribute(""properties"", reqParams);    requestDispatcher.forward(req, resp);  }  @Override",doGet
1418,  private void <extra_id_0>() {    for (var obs : observers) {      obs.update(currentWeather);    }  },notifyObservers
515,  protected abstract int <extra_id_0>(final Data data);,allocateShard
1884,"  public void <extra_id_0>(Action action) {    LOGGER.info(""{} {}"", this, action.getDescription());  }  @Override",partyAction
911,  void <extra_id_0>() {    appender = new InMemoryAppender(Writer.class);  }  @AfterEach,setUp
2478,  public final FluentIterable<E> <extra_id_0>(int count) {    var remainingElementsCount = getRemainingElementsCount();    var iterator = iterator();    var currentIndex = 0;    while (iterator.hasNext()) {      iterator.next();      if (currentIndex < remainingElementsCount - count) {        iterator.remove();      }      currentIndex++;    }    return this;  }  /**   * Transforms this FluentIterable into a new one containing objects of the type T.   *   * @param function a function that transforms an instance of E into an instance of T   * @param <T>      the target type of the transformation   * @return a new FluentIterable of the new type   */  @Override,last
753,  boolean <extra_id_0>(Bubble b) {    //distance between them is greater than sum of radii (both sides of equation squared)    return (this.coordinateX - b.coordinateX) * (this.coordinateX - b.coordinateX)        + (this.coordinateY - b.coordinateY) * (this.coordinateY - b.coordinateY)        <= (this.radius + b.radius) * (this.radius + b.radius);  },touches
3210,    void <extra_id_0>() {        ClientPropertiesBean newBean = new ClientPropertiesBean();        assertTrue(newBean.isSportsInterest());        newBean.setSportsInterest(false);        assertFalse(newBean.isSportsInterest());    }    @Test,testSportsSetterGetter
2904,  Optional<Student> <extra_id_0>(int studentId);,find
3264,"  public void <extra_id_0>(String title, double price) {    var book = getBookByTitle(title);    book.setPrice(price);    try (var session = sessionFactory.openSession()) {      session.beginTransaction();      session.update(book);      session.getTransaction().commit();    }  }",bookPriceUpdated
1864,"  void <extra_id_0>(Supplier<PartyMember> memberSupplier) {    final var member = memberSupplier.get();    member.act(Action.GOLD);    assertEquals(0, appender.getLogSize());    final var party = mock(Party.class);    member.joinedParty(party);    assertEquals(member.toString() + "" joins the party"", appender.getLastMessage());    for (final var action : Action.values()) {      member.act(action);      assertEquals(member.toString() + "" "" + action.toString(), appender.getLastMessage());      verify(party).act(member, action);    }    assertEquals(Action.values().length + 1, appender.getLogSize());  }  /**   * Verify if {@link PartyMemberBase#toString()} generate the expected output   */  @ParameterizedTest  @MethodSource(""dataProvider"")",testAct
3524,  public static void <extra_id_0>(String[] args) {    var cars = CarFactory.createCars();    var modelsImperative = ImperativeProgramming.getModelsAfter2000(cars);    LOGGER.info(modelsImperative.toString());    var modelsFunctional = FunctionalProgramming.getModelsAfter2000(cars);    LOGGER.info(modelsFunctional.toString());    var groupingByCategoryImperative = ImperativeProgramming.getGroupingOfCarsByCategory(cars);    LOGGER.info(groupingByCategoryImperative.toString());    var groupingByCategoryFunctional = FunctionalProgramming.getGroupingOfCarsByCategory(cars);    LOGGER.info(groupingByCategoryFunctional.toString());    var john = new Person(cars);    var sedansOwnedImperative = ImperativeProgramming.getSedanCarsOwnedSortedByDate(List.of(john));    LOGGER.info(sedansOwnedImperative.toString());    var sedansOwnedFunctional = FunctionalProgramming.getSedanCarsOwnedSortedByDate(List.of(john));    LOGGER.info(sedansOwnedFunctional.toString());  },main
157,  void <extra_id_0>() throws Exception {    final var dataSource = createDataSource();    deleteSchema(dataSource);    createSchema(dataSource);    dao = new HotelDaoImpl(dataSource);    addRooms(dao);    hotel = new Hotel(dao);  }  @Test,setUp
3482,  public static void <extra_id_0>(String[] args) {    var wizard = new Wizard();    var goblin = new Goblin();    goblin.printStatus();    wizard.castSpell(goblin::changeSize);    goblin.printStatus();    wizard.castSpell(goblin::changeVisibility);    goblin.printStatus();    wizard.undoLastSpell();    goblin.printStatus();    wizard.undoLastSpell();    goblin.printStatus();    wizard.redoLastSpell();    goblin.printStatus();    wizard.redoLastSpell();    goblin.printStatus();  },main
1190,"  void <extra_id_0>(P testedPrototype, String expectedToString) {    assertEquals(expectedToString, testedPrototype.toString());    final var clone = testedPrototype.copy();    assertNotNull(clone);    assertNotSame(clone, testedPrototype);    assertSame(testedPrototype.getClass(), clone.getClass());    assertEquals(clone, testedPrototype);  }",testPrototype
238,"  public void <extra_id_0>() {    if (patrollingLeft) {      position -= 1;      if (position == PATROLLING_LEFT_BOUNDING) {        patrollingLeft = false;      }    } else {      position += 1;      if (position == PATROLLING_RIGHT_BOUNDING) {        patrollingLeft = true;      }    }    logger.info(""Skeleton {} is on position {}."", id, position);  }",update
2393,"  public Stream<Arguments> <extra_id_0>() {    return prepareParameters((f, s) -> f - s);  }  /**   * Create a new test instance using the given test parameters and expected result   */",expressionProvider
2271,  protected void <extra_id_0>() {    bind(LotteryTicketRepository.class).to(MongoTicketRepository.class);    bind(LotteryEventLog.class).to(MongoEventLog.class);    bind(WireTransfers.class).to(MongoBank.class);  },configure
520,"  public int <extra_id_0>(Data data) {    var shardId = allocateShard(data);    var shard = shardMap.get(shardId);    shard.storeData(data);    LOGGER.info(data.toString() + "" is stored in Shard "" + shardId);    return shardId;  }  @Override",storeData
2132,    void <extra_id_0>(CakeInfo cakeInfo) throws CakeBakingException;    /**     * Get all cakes.     */,bakeNewCake
3382,"  void <extra_id_0>() throws Exception {    //done here    var ps = new PaymentService(new PaymentDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var ss = new ShippingService(new ShippingDatabase());    var ms = new MessagingService(new MessagingDatabase(), new DatabaseUnavailableException(),        new DatabaseUnavailableException());    var eh = new EmployeeHandle(new EmployeeDatabase());    var qdb = new QueueDatabase();    var c = new Commander(eh, ps, ss, ms, qdb, numOfRetries, retryDuration,        queueTime, queueTaskTime, paymentTime, messageTime, employeeTime);    var user = new User(""Jim"", ""ABCD"");    var order = new Order(user, ""book"", 10f);    c.placeOrder(order);  }  /**   * Program entry point.   *   * @param args command line args   */",messagingSuccessCase
396,"  public String <extra_id_0>() {    return ""The mammoth"";  }",toString
1642,  public synchronized int <extra_id_0>() {    int balance = 0;    for (int account : accounts) {      balance += account;    }    return balance;  }  /**   * Get the accountNumber balance.   *   * @param accountNumber - accountNumber number   * @return accounts[accountNumber]   */,getBalance
3179,"      void <extra_id_0>() throws Exception {        try (var allCustomers = dao.getAll()) {          assumeTrue(allCustomers.count() == 1);        }        final var nonExistingCustomer = new Customer(2, ""Robert"", ""Englund"");        var result = dao.add(nonExistingCustomer);        assertTrue(result);        assertCustomerCountIs(2);        assertEquals(nonExistingCustomer, dao.getById(nonExistingCustomer.getId()).get());      }      @Test",addingShouldResultInSuccess
2220,"  public static void <extra_id_0>(String[] args) {    try {      LOGGER.info(""Start frame-based game loop:"");      var frameBasedGameLoop = new FrameBasedGameLoop();      frameBasedGameLoop.run();      Thread.sleep(GAME_LOOP_DURATION_TIME);      frameBasedGameLoop.stop();      LOGGER.info(""Stop frame-based game loop."");      LOGGER.info(""Start variable-step game loop:"");      var variableStepGameLoop = new VariableStepGameLoop();      variableStepGameLoop.run();      Thread.sleep(GAME_LOOP_DURATION_TIME);      variableStepGameLoop.stop();      LOGGER.info(""Stop variable-step game loop."");      LOGGER.info(""Start fixed-step game loop:"");      var fixedStepGameLoop = new FixedStepGameLoop();      fixedStepGameLoop.run();      Thread.sleep(GAME_LOOP_DURATION_TIME);      fixedStepGameLoop.stop();      LOGGER.info(""Stop variable-step game loop."");    } catch (InterruptedException e) {      LOGGER.error(e.getMessage());    }  }",main
2511,"  private static Function<Integer, String> <extra_id_0>() {    return integer -> ""String["" + integer + ""]"";  }",transformToString
2625,"  public static void <extra_id_0>(String[] args) {    final var properties = new Properties();    properties.put(""enhancedWelcome"", true);    var service = new PropertiesFeatureToggleVersion(properties);    final var welcomeMessage = service.getWelcomeMessage(new User(""Jamie No Code""));    LOGGER.info(welcomeMessage);    // ---------------------------------------------    final var turnedOff = new Properties();    turnedOff.put(""enhancedWelcome"", false);    var turnedOffService = new PropertiesFeatureToggleVersion(turnedOff);    final var welcomeMessageturnedOff =        turnedOffService.getWelcomeMessage(new User(""Jamie No Code""));    LOGGER.info(welcomeMessageturnedOff);    // --------------------------------------------    var service2 = new TieredFeatureToggleVersion();    final var paidUser = new User(""Jamie Coder"");    final var freeUser = new User(""Alan Defect"");    UserGroup.addUserToPaidGroup(paidUser);    UserGroup.addUserToFreeGroup(freeUser);    final var welcomeMessagePaidUser = service2.getWelcomeMessage(paidUser);    final var welcomeMessageFreeUser = service2.getWelcomeMessage(freeUser);    LOGGER.info(welcomeMessageFreeUser);    LOGGER.info(welcomeMessagePaidUser);  }",main
2362,"  public void <extra_id_0>(Person person) throws IdNotFoundException {    Optional<Person> elem = personList.stream().filter(p -> p.getPersonNationalId() == person.getPersonNationalId()).findFirst();    if (elem.isPresent()) {      elem.get().setName(person.getName());      elem.get().setPhoneNum(person.getPhoneNum());      LOGGER.info(""Record updated successfully"");      return;    }    throw new IdNotFoundException(ID_STR + person.getPersonNationalId() + NOT_IN_DATA_BASE);  }  /**   * Delete the record corresponding to given ID from the DB.   *   * @param id : personNationalId for person whose record is to be deleted.   */",update
3607,"  void <extra_id_0>() throws Exception {    assertTimeout(ofMillis(3000), () -> {      // Instantiate a new executor and start a new 'null' task ...      final var executor = new ThreadAsyncExecutor();      final var result = new Object();      when(task.call()).thenReturn(result);      final var asyncResult = executor.startProcess(task, callback);      assertNotNull(asyncResult);      asyncResult.await(); // Prevent timing issues, and wait until the result is available      assertTrue(asyncResult.isCompleted());      // Our task should only execute once ...      verify(task, times(1)).call();      // ... same for the callback, we expect our object      verify(callback, times(1)).onComplete(eq(result), optionalCaptor.capture());      final var optionalException = optionalCaptor.getValue();      assertNotNull(optionalException);      assertFalse(optionalException.isPresent());      // ... and the result should be exactly the same object      assertSame(result, asyncResult.getValue());    });  }  /**   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)} when a   * task takes a while to execute   */  @Test",testSuccessfulTaskWithCallback
3677,"  public void <extra_id_0>(final UserAccount userAccount) {    if (cache.contains(userAccount.getUserId())) {      dbManager.updateDb(userAccount);    } else {      dbManager.writeToDb(userAccount);    }    cache.set(userAccount.getUserId(), userAccount);  }  /**   * Get user account using write-around cache.   * @param userAccount {@link UserAccount}   */",writeThrough
3069,"    void <extra_id_0>() throws SQLException {        when(productDao.findByName(""product"")).thenReturn(Optional.empty());        product.save();        verify(productDao, times(1)).save(product);        when(productDao.findByName(""product"")).thenReturn(Optional.of(product));        product.save();        verify(productDao, times(1)).update(product);    }    @Test",shouldSaveProduct
1274,"  public static Character <extra_id_0>(Map<Character, Long> charFrequency) {    return charFrequency        .entrySet()        .stream()        .min(Comparator.comparingLong(Entry::getValue))        .map(Entry::getKey)        .orElseThrow();  }  /**   * Count the number of lines in a file.   *   * @return number of lines, 0 if file does not exist.   */",lowestFrequencyChar
1423,"  public void <extra_id_0>(A argument) {    for (var observer : observers) {      observer.update((S) this, argument);    }  }",notifyObservers
2687,"  void <extra_id_0>() {    var user = new User(""iluwatar"");    var userCreatedEvent = new UserCreatedEvent(user);    assertEquals(UserCreatedEvent.class, userCreatedEvent.getType());  }",testGetEventType
3656,"  public static Instruction <extra_id_0>(int value) {    for (var i = 0; i < Instruction.values().length; i++) {      if (Instruction.values()[i].getIntValue() == value) {        return Instruction.values()[i];      }    }    throw new IllegalArgumentException(""Invalid instruction value"");  }",getInstruction
2737,  void <extra_id_0>(Event e);,onEvent
195,"  void <extra_id_0>() throws BookNotFoundException {    var book = bookRepository.get(bookId);    assertEquals(0, book.getVersion());  }  @Test",testDefaultVersionRemainsZeroAfterAdd
1230,"  public void <extra_id_0>(final String value) {    if (selectedAlbum.isClassical()) {      LOGGER.info(""Change album composer from {} to {}"",              selectedAlbum.getComposer(), value);      selectedAlbum.setComposer(value);    } else {      LOGGER.info(""Composer can not be changed"");    }  }  /**   * Gets a list of albums.   *   * @return the names of all the albums.   */",setComposer
566,  public String <extra_id_0>() {    return name;  },toString
639,  public static void <extra_id_0>(String[] args) {    var service = ServiceLocator.getService(JNDI_SERVICE_A);    service.execute();    service = ServiceLocator.getService(JNDI_SERVICE_B);    service.execute();    service = ServiceLocator.getService(JNDI_SERVICE_A);    service.execute();    service = ServiceLocator.getService(JNDI_SERVICE_A);    service.execute();  },main
620,  public void <extra_id_0>(GiantModel giantModel) {    dispatcher.updateView(giantModel);  },updateView
2704,"  public void <extra_id_0>() {    LOGGER.info(""{} digs for gold."", name());  }  @Override",work
97,"  static String <extra_id_0>(int num) {    return "" "".repeat(Math.max(0, num));  }",numOfSpaces
2633,"  public static void <extra_id_0>(final User user) throws IllegalArgumentException {    if (freeGroup.contains(user)) {      throw new IllegalArgumentException(""User already member of free group."");    } else {      if (!paidGroup.contains(user)) {        paidGroup.add(user);      }    }  }  /**   * Method to take a {@link User} to determine if the user is in the {@link UserGroup#paidGroup}.   *   * @param user {@link User} to check if they are in the {@link UserGroup#paidGroup}   * @return true if the {@link User} is in {@link UserGroup#paidGroup}   */",addUserToPaidGroup
2965,    Double <extra_id_0>();  }  /**   * Use this interface whenever you want to provide the product Supplier in your DTO.   */,getCost
342,    public AbilityStep <extra_id_0>(String ability) {      this.abilities.add(ability);      return this;    }    @Override,withAbility
1459,  protected abstract T <extra_id_0>();  /**   * Checkout object from pool.   */,create
1608,"  public Book <extra_id_0>() {    return selectedBook;  }  @NotifyChange(""selectedBook"")",getSelectedBook
1283,"  public T <extra_id_0>(long timeout, TimeUnit unit) throws ExecutionException {    synchronized (lock) {      while (state == RUNNING) {        try {          lock.wait(unit.toMillis(timeout));        } catch (InterruptedException e) {          LOGGER.warn(""Interrupted!"", e);          Thread.currentThread().interrupt();        }      }    }    if (state == COMPLETED) {      return value;    }    throw new ExecutionException(exception);  }",get
7,"  public static void <extra_id_0>(RainbowFish rainbowFish, String filename) throws IOException {    var map = Map.of(        ""name"", rainbowFish.getName(),        ""age"", String.format(""%d"", rainbowFish.getAge()),        LENGTH_METERS, String.format(""%d"", rainbowFish.getLengthMeters()),        WEIGHT_TONS, String.format(""%d"", rainbowFish.getWeightTons())    );    try (var fileOut = new FileOutputStream(filename);         var objOut = new ObjectOutputStream(fileOut)) {      objOut.writeObject(map);    }  }  /**   * Write V2 RainbowFish to file.   */",writeV1
2817,"  public void <extra_id_0>(Meteoroid meteoroid) {    LOGGER.info(AppConstants.HITS, meteoroid.getClass().getSimpleName(), this.getClass()        .getSimpleName());  }  @Override",collisionResolve
3805,  public Kingdom <extra_id_0>() {    return kingdom;  }  /**   * Program entry point.   *   * @param args command line args   */,getKingdom
3300,"  private void <extra_id_0>(StoppingData data) {    stopped = data.getWhen();    LOGGER.info(""Receiver {} sees application stopping at {}"", id, stopped);    LOGGER.info(""Receiver {} sending goodbye message"", id);    data.getDataBus().publish(MessageData.of(String.format(""Goodbye cruel world from #%d!"", id)));  }",handleEvent
285,"  void <extra_id_0>() throws Exception {    var skyLaunch = new SkyLaunch();    var logs = tapSystemOutNormalized(skyLaunch::activate)        .split("""");    final var expectedSize = 3;    final var log1 = getLogContent(logs[0]);    final var expectedLog1 = ""Move to ( 0.0, 0.0, 20.0 )"";    final var log2 = getLogContent(logs[1]);    final var expectedLog2 = ""Play SKYLAUNCH_SOUND with volume 1"";    final var log3 = getLogContent(logs[2]);    final var expectedLog3 = ""Spawn 100 particle with type SKYLAUNCH_PARTICLE"";    assertEquals(logs.length, expectedSize);    assertEquals(log1, expectedLog1);    assertEquals(log2, expectedLog2);    assertEquals(log3, expectedLog3);  }",testActivate
3884,  public void <extra_id_0>() {    List<ActiveCreature> creatures = new ArrayList<>();    try {      for (int i = 0; i < NUM_CREATURES; i++) {        creatures.add(new Orc(Orc.class.getSimpleName() + i));        creatures.get(i).eat();        creatures.get(i).roam();      }      Thread.sleep(1000);    } catch (InterruptedException e) {      logger.error(e.getMessage());      Thread.currentThread().interrupt();    } finally {      for (int i = 0; i < NUM_CREATURES; i++) {        creatures.get(i).kill(0);      }    }  },run
3569,"  public static void <extra_id_0>(String[] args) {    SpringApplication.run(ImageApplication.class, args);  }",main
3027,"  void <extra_id_0>() {    var frameBuffer = new FrameBuffer();    frameBuffer.draw(0, 0);    assertEquals(Pixel.BLACK, frameBuffer.getPixels()[0]);  }  @Test",testDraw
1088,  boolean <extra_id_0>() {    return chapters.get(pos).isSuccess();  }  /**   * Class presents a chapter status and incoming parameters(incoming parameter transforms to   * outcoming parameter).   */,isCurrentSuccess
1528,  public static King <extra_id_0>() {    var king = new King();    king.makeDrunk();    return king;  }  /**   * Method to create a happy king.   *   * @return A happy {@link com.iluwatar.objectmother.King}.   */,createDrunkKing
870,"  private void <extra_id_0>(SelectionKey key) {    try {      // reads the incoming data in context of reactor main loop. Can this be improved?      var readObject = ((AbstractNioChannel) key.attachment()).read(key);      dispatchReadEvent(key, readObject);    } catch (IOException e) {      try {        key.channel().close();      } catch (IOException e1) {        LOGGER.error(""error closing channel"", e1);      }    }  }  /*   * Uses the application provided dispatcher to dispatch events to application handler.   */",onChannelReadable
244,"  public boolean <extra_id_0>(int... nums) {    LOGGER.info(""Source module {}"", VERSION);    return Arrays.stream(nums).allMatch(num -> num != 0);  }",ifNonZero
1734,"  void <extra_id_0>() {    List<CalculatorAction> actions = List.of(        new SetVariableCalculatorAction(2.0),        new AdditionCalculatorAction(),        new AdditionCalculatorAction(),        new SetVariableCalculatorAction(7.0),        new AdditionCalculatorAction()    );    CalculatorModel model = modelAfterExecutingActions(actions);    assert model.getVariable() == 7.0 && model.getOutput() == 11.0;  }  @Test",testAddition
2758,"  private void <extra_id_0>(EventManager eventManager, Scanner s) {    s.nextLine();    LOGGER.info(""Boil multiple eggs at once (A) or boil them one-by-one (S)?: "");    var eventType = s.nextLine();    LOGGER.info(""How long should this egg be boiled for (in seconds)?: "");    var eventTime = s.nextInt();    if (eventType.equalsIgnoreCase(""A"")) {      try {        var eventId = eventManager.createAsync(eventTime);        eventManager.start(eventId);        LOGGER.info(""Egg [{}] is being boiled."", eventId);      } catch (MaxNumOfEventsAllowedException | LongRunningEventException          | EventDoesNotExistException e) {        LOGGER.error(e.getMessage());      }    } else if (eventType.equalsIgnoreCase(""S"")) {      try {        var eventId = eventManager.create(eventTime);        eventManager.start(eventId);        LOGGER.info(""Egg [{}] is being boiled."", eventId);      } catch (MaxNumOfEventsAllowedException | InvalidOperationException          | LongRunningEventException | EventDoesNotExistException e) {        LOGGER.error(e.getMessage());      }    } else {      LOGGER.info(""Unknown event type."");    }  }",processOption1
2192,  void <extra_id_0>() {    nonEmptyRoot = new TreeNode<>(5);    nonEmptyRoot.insert(3);    nonEmptyRoot.insert(7);    nonEmptyRoot.insert(1);    nonEmptyRoot.insert(4);    nonEmptyRoot.insert(6);    emptyRoot = null;  }  @Test,createTrees
1395,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
613,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    assertEquals(Nourishment.SATURATED, model.getNourishment());    for (final var nourishment : Nourishment.values()) {      for (final var fatigue : Fatigue.values()) {        for (final var health : Health.values()) {          Command cmd = new Command(fatigue, health, nourishment);          action.updateModel(cmd);          assertEquals(nourishment, model.getNourishment());          assertEquals(fatigue, model.getFatigue());          assertEquals(health, model.getHealth());        }      }    }  }",testUpdateModel
2432,  public MenuItem <extra_id_0>() {    return selected;  },getSelected
1206,"  void <extra_id_0>(){    DisplayedAlbums displayedAlbums = new DisplayedAlbums();    displayedAlbums.addAlbums(""title"", ""artist"", true, ""composer"");    assertEquals(""composer"", displayedAlbums.getAlbums().get(0).getComposer());  }  @Test",testAdd_true
223,"  public static void <extra_id_0>() {    statue = new Statue(1, 20);  }  @AfterAll",setup
3256,"  private Author <extra_id_0>(String username) {    Author author;    try (var session = sessionFactory.openSession()) {      var query = session.createQuery(""from Author where username=:username"");      query.setParameter(""username"", username);      author = (Author) query.uniqueResult();    }    if (author == null) {      HibernateUtil.getSessionFactory().close();      throw new NullPointerException(""Author "" + username + "" doesn't exist!"");    }    return author;  }",getAuthorByUsername
3145,  public Stream<Customer> <extra_id_0>() {    return idToCustomer.values().stream();  }  @Override,getAll
839,    public SocketAddress <extra_id_0>() {      return sender;    }    /**     * Sets the sender address of this packet.     *     * @param sender the sender address.     */,getSender
2018,"  void <extra_id_0>() {    AtomicInteger attempts = new AtomicInteger();    Runnable retryableOperation =        () -> {          attempts.incrementAndGet();          throw new RuntimeException(""Test exception for retry"");        };    long startTime = System.currentTimeMillis();    try {      retryTemplate.execute(          context -> {            retryableOperation.run();            return null;          });    } catch (Exception e) {      // Expected exception    }    long endTime = System.currentTimeMillis();    assertEquals(3, attempts.get(), ""Should have retried three times"");    assertTrue(        (endTime - startTime) >= 4000,        ""Should have waited at least 4 seconds in total for backoff"");  }",shouldRetryThreeTimesWithTwoSecondDelay
1938,"  public boolean <extra_id_0>(int currentId, String content) {    var candidateList = findElectionCandidateInstanceList(currentId);    if (candidateList.isEmpty()) {      return true;    } else {      var electionMessage = new Message(MessageType.ELECTION_INVOKE, """");      candidateList.stream().forEach((i) -> instanceMap.get(i).onMessage(electionMessage));      return false;    }  }  /**   * Send leader message to all the instances to notify the new leader.   *   * @param currentId Instance ID of which sends this message.   * @param leaderId  Leader message content.   * @return {@code true} if the message is accepted.   */  @Override",sendElectionMessage
458,      public void <extra_id_0>() {        callsCount.reset();      },run
2986,"  public static void <extra_id_0>(String[] args) {    final var inventory = new Inventory(1000);    var executorService = Executors.newFixedThreadPool(3);    IntStream.range(0, 3).<Runnable>mapToObj(i -> () -> {      while (inventory.addItem(new Item())) {        LOGGER.info(""Adding another item"");      }    }).forEach(executorService::execute);    executorService.shutdown();    try {      executorService.awaitTermination(5, TimeUnit.SECONDS);    } catch (InterruptedException e) {      LOGGER.error(""Error waiting for ExecutorService shutdown"");      Thread.currentThread().interrupt();    }  }",main
2861,"  void <extra_id_0>() {    testCollision(        new SpaceStationIss(1, 1, 3, 4),        true, false,        false, false    );  }  /**   * Test what happens we collide with MIR   */  @Test",testCollideSpaceStationIss
2877,  public UnitExtension <extra_id_0>(String extensionName) {    return null;  },getUnitExtension
1329,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
1121,  private int <extra_id_0>(int pos) {    return (pos - 1) / 2;  },parentIndex
1937,"  public boolean <extra_id_0>(int leaderId) {    var leaderInstance = instanceMap.get(leaderId);    var alive = leaderInstance.isAlive();    return alive;  }  /**   * Send election message to all the instances with smaller ID.   *   * @param currentId Instance ID of which sends this message.   * @param content   Election message content.   * @return {@code true} if no alive instance has smaller ID, so that the election is accepted.   */  @Override",sendHeartbeatMessage
1597,  public int <extra_id_0>() {    return lastServedId;  }  /**   * Handle request.   */,getLastServedId
1021,"    public ChapterResult<Integer> <extra_id_0>(Integer value) {      records.add(""-2"");      return ChapterResult.success(value);    }  }  class Service3 extends Service<Integer> {    @Override    public String getName() {      return ""3"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+3"");      return ChapterResult.success(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-3"");      return ChapterResult.success(value);    }  }  class Service4 extends Service<Integer> {    @Override    public String getName() {      return ""4"";    }    @Override    public ChapterResult<Integer> process(Integer value) {      records.add(""+4"");      return ChapterResult.failure(value);    }    @Override    public ChapterResult<Integer> rollback(Integer value) {      records.add(""-4"");      return ChapterResult.success(value);    }  }}",rollback
996,  public abstract boolean <extra_id_0>(Role role);  /**   * Check specific role @see {@link Role}.   *   * @param role to check   * @return true if the role exists otherwise false   */,addRole
2477,  public final Optional<E> <extra_id_0>() {    var list = last(1).asList();    if (list.isEmpty()) {      return Optional.empty();    }    return Optional.of(list.get(0));  }  /**   * Can be used to collect objects from the Iterable. Is a terminating operation.   *   * @param count defines the number of objects to return   * @return the same FluentIterable with a collection decimated to a maximum of 'count' last   *     objects   */  @Override,last
2768,  public void <extra_id_0>(int eventId) {    eventPool.get(eventId).status();    if (eventPool.get(eventId).isSynchronous()) {      currentlyRunningSyncEvent = -1;    }    eventPool.remove(eventId);  }  /**   * Getter method for event pool.   */,completedEventHandler
643,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
1012,  void <extra_id_0>() {    assertDoesNotThrow(() -> SagaApplication.main(new String[]{}));  },shouldExecuteApplicationWithoutException
2754,"  public void <extra_id_0>() {    var eventManager = new EventManager();    try {      // Create an Asynchronous event.      var asyncEventId = eventManager.createAsync(60);      LOGGER.info(""Async Event [{}] has been created."", asyncEventId);      eventManager.start(asyncEventId);      LOGGER.info(""Async Event [{}] has been started."", asyncEventId);      // Create a Synchronous event.      var syncEventId = eventManager.create(60);      LOGGER.info(""Sync Event [{}] has been created."", syncEventId);      eventManager.start(syncEventId);      LOGGER.info(""Sync Event [{}] has been started."", syncEventId);      eventManager.status(asyncEventId);      eventManager.status(syncEventId);      eventManager.cancel(asyncEventId);      LOGGER.info(""Async Event [{}] has been stopped."", asyncEventId);      eventManager.cancel(syncEventId);      LOGGER.info(""Sync Event [{}] has been stopped."", syncEventId);    } catch (MaxNumOfEventsAllowedException | LongRunningEventException | EventDoesNotExistException        | InvalidOperationException e) {      LOGGER.error(e.getMessage());    }  }  /**   * Run program in interactive mode.   */",quickRun
3596,"  void <extra_id_0>(long interval, TimeUnit timeUnit, Runnable task);",executeAfterDelay
3641,"  void <extra_id_0>() {    var bytecode = new int[1];    bytecode[0] = 999;    var vm = new VirtualMachine();    assertThrows(IllegalArgumentException.class, () -> vm.execute(bytecode));  }",testInvalidInstruction
3820,  String <extra_id_0>();,getDescription
194,  void <extra_id_0>() throws BookDuplicateException {    var book = new Book();    book.setId(bookId);    bookRepository.add(book);  }  @Test,setUp
1918,"  void <extra_id_0>() {    try {      final var bullyInstance = new BullyInstance(null, 1, 1);      var bullyMessage = new Message(MessageType.HEARTBEAT, """");      bullyInstance.onMessage(bullyMessage);      var instanceClass = AbstractInstance.class;      var messageQueueField = instanceClass.getDeclaredField(""messageQueue"");      messageQueueField.setAccessible(true);      assertEquals(bullyMessage, ((Queue<Message>) messageQueueField.get(bullyInstance)).poll());    } catch (IllegalAccessException | NoSuchFieldException e) {      fail(""fail to access messasge queue."");    }  }  @Test",testOnMessage
141,"    void <extra_id_0>() {      assertThrows(Exception.class, () -> {        dao.add(new Room(2, ""Double"", 80, false));      });    }    @Test",addingARoomFailsWithExceptionAsFeedbackToClient
3539,"  public static void <extra_id_0>(final String[] args) {    var task = new SimpleTask();    task.executeWith(() -> LOGGER.info(""I'm done now.""));  }",main
1981,"  void <extra_id_0>(Filter filter, Order order, String expectedResult) {    final var result = filter.execute(order);    assertNotNull(result);    assertEquals(expectedResult, result.trim());  }  @ParameterizedTest  @MethodSource(""getTestData"")",testExecute
970,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteWithoutException
372,"  void <extra_id_0>() {    for (var i = 0; i < 10; i++) {      assertEquals(this.expectedExecutionTime * i, this.factory.apply(i).getTimeMs());    }  }  /**   * Verify if the task has some sort of {@link T#toString()}, different from 'null'   */  @Test",testTimeMs
218,  public static void <extra_id_0>() {    world = new World();  }  @AfterAll,setup
861,"  protected abstract void <extra_id_0>(Object pendingWrite, SelectionKey key) throws IOException;  /**   * Queues the data for writing. The data is not guaranteed to be written on underlying channel   * when this method returns. It will be written when the channel is flushed.   *   * <p>This method is used by the {@link ChannelHandler} to send reply back to the client. <br>   * Example:   *   * <pre>   * <code>   * {@literal @}Override   * public void handleChannelRead(AbstractNioChannel channel, Object readObj, SelectionKey key) {   *   byte[] data = ((ByteBuffer)readObj).array();   *   ByteBuffer buffer = ByteBuffer.wrap(""Server reply"".getBytes());   *   channel.write(buffer, key);   * }   * </code>   * </pre>   *   * @param data the data to be written on underlying channel.   * @param key  the key which is writable.   */",doWrite
1308,"  void <extra_id_0>() throws Exception {    final var prototype = new Character();    for (final var stat : Stats.values()) {      assertFalse(prototype.has(stat));      assertNull(prototype.get(stat));      final var expectedValue = stat.ordinal();      prototype.set(stat, expectedValue);      assertTrue(prototype.has(stat));      assertEquals(expectedValue, prototype.get(stat));      prototype.remove(stat);      assertFalse(prototype.has(stat));      assertNull(prototype.get(stat));    }  }  @Test",testPrototypeStats
590,"  void <extra_id_0>() {    final var all = this.dao.findAll();    assertNotNull(all);    assertEquals(INITIAL_COUNT, all.size());  }  @Test",testFindAll
767,  public void <extra_id_0>(Royalty r) {    r.getDrink();  },giveWine
3783,  public String <extra_id_0>() {    return name().toLowerCase();  },toString
1192,"  void <extra_id_0>(){    View view = new View();    view.createView();    String testTitle = ""testTitle"";    String testArtist = ""testArtist"";    view.getTxtArtist().setText(testArtist);    view.getTxtTitle().setText(testTitle);    view.saveToMod();    view.loadFromMod();    assertEquals(testTitle, view.getModel().getTitle());    assertEquals(testArtist, view.getModel().getArtist());  }  @Test",testSave_setArtistAndTitle
2004,"  public void <extra_id_0>(String[] request) {    dtm.addRow(new Object[]{request[0], request[1], request[2], request[3], request[4]});  }",execute
139,    void <extra_id_0>() throws SQLException {      dao = new HotelDaoImpl(mockedDatasource());    },setUp
3793,  void <extra_id_0>() {    assertDoesNotThrow(() -> App.main(new String[]{}));  },shouldExecuteApplicationWithoutException
3874,"  public String <extra_id_0>() {    return ""The Product Title."";  }",getProductTitle
622,  void <extra_id_0>(Health health) {    model.setHealth(health);  }  /**   * Gets fatigue.   *   * @return the fatigue   */,setHealth
1704,  public FileSelectorPresenter <extra_id_0>() {    return this.presenter;  }  @Override,getPresenter
52,  void <extra_id_0>(Sergeant sergeant);,visit
2202,  void <extra_id_0>() {    gameLoop = new FixedStepGameLoop();  }  @AfterEach,setup
26,"  void <extra_id_0>() {    final var ballThread = mock(BallThread.class);    final var ballItem = new BallItem();    ballItem.setTwin(ballThread);    final var inOrder = inOrder(ballThread);    IntStream.range(0, 10).forEach(i -> {      ballItem.click();      inOrder.verify(ballThread).suspendMe();      ballItem.click();      inOrder.verify(ballThread).resumeMe();    });    inOrder.verifyNoMoreInteractions();  }  @Test",testClick
3449,"  public static void <extra_id_0>(Queue<PrinterItem> printerItemsCollection) {    for (PrinterItem nextItem : printerQueue.getPrinterQueue()) {      if (nextItem.paperSize.equals(PaperSizes.A2)) {        // Encoding the policy into a Boolean: the A2 paper must be single page, single-sided, and non-coloured.        var isNotColouredSingleSidedAndOnePage = nextItem.pageCount == 1 && !nextItem.isDoubleSided                && !nextItem.isColour;        if (isNotColouredSingleSidedAndOnePage) {          printerItemsCollection.add(nextItem);        }      }    }  }",addValidA2Papers
3006,    public int <extra_id_0>() {      return log.size();    }  }},getLogSize
937,    public Condition <extra_id_0>() {      throw new UnsupportedOperationException();    }  }},newCondition
2171,  public TreeNode<T> <extra_id_0>() {    return right;  },getRight
2145,"  public <T> void <extra_id_0>(final AsyncTask<T> task) {    try {      // some small tasks such as validation can be performed here.      task.onPreCall();    } catch (Exception e) {      task.onError(e);      return;    }    service.submit(new FutureTask<T>(task) {      @Override      protected void done() {        super.done();        try {          /*           * called in context of background thread. There is other variant possible where result is           * posted back and sits in the queue of caller thread which then picks it up for           * processing. An example of such a system is Android OS, where the UI elements can only           * be updated using UI thread. So result must be posted back in UI thread.           */          task.onPostCall(get());        } catch (InterruptedException e) {          // should not occur        } catch (ExecutionException e) {          task.onError(e.getCause());        }      }    });  }  /**   * Stops the pool of workers. This is a blocking call to wait for all tasks to be completed.   */",execute
3509,"  public String <extra_id_0>() {    return requestDescription;  }  /**   * Get the type of this request, used by each person in the chain of command to see if they should   * or can handle this particular request.   *   * @return The request type   */",getRequestDescription
554,  public List<Wizard> <extra_id_0>() {    return wizardDao.findAll();  }  @Override,findAllWizards
1859,"  void <extra_id_0>() {    final var partyMember1 = mock(PartyMember.class);    final var partyMember2 = mock(PartyMember.class);    final var party = new PartyImpl();    party.addMember(partyMember1);    party.addMember(partyMember2);    verify(partyMember1).joinedParty(party);    verify(partyMember2).joinedParty(party);    party.act(partyMember1, Action.GOLD);    verifyNoMoreInteractions(partyMember1);    verify(partyMember2).partyAction(Action.GOLD);    verifyNoMoreInteractions(partyMember1, partyMember2);  }",testPartyAction
657,  public boolean <extra_id_0>(T t) {    return !(component.test(t));  },test
1641,"  public synchronized void <extra_id_0>(int accountA, int accountB, int amount) {    if (accounts[accountA] >= amount && accountA != accountB) {      accounts[accountB] += amount;      accounts[accountA] -= amount;      if (LOGGER.isDebugEnabled()) {        LOGGER.debug(            ""Transferred from account: {} to account: {} , amount: {} , bank balance at: {}, source account balance: {}, destination account balance: {}"",            accountA,            accountB,            amount,            getBalance(),            getBalance(accountA),            getBalance(accountB));      }    }  }  /**   * Calculates the total balance.   *   * @return balance   */",transfer
663,  public boolean <extra_id_0>(Creature t) {    return t.getMass().greaterThan(mass);  },test
2418,  public void <extra_id_0>(MenuItem menuItem) {    dispatchAction(new MenuAction(menuItem));    if (menuItem == MenuItem.COMPANY) {      dispatchAction(new ContentAction(Content.COMPANY));    } else {      dispatchAction(new ContentAction(Content.PRODUCTS));    }  },menuItemSelected
463,"  void <extra_id_0>() {      Country China = new Country(              86,              ""China"",              ""Asia"",              ""Chinese""      );      assertEquals(86, China.getCode());      assertEquals(""China"", China.getName());      assertEquals(""Asia"", China.getContinents());      assertEquals(""Chinese"", China.getLanguage());  }  @Test",testGetMethod
2642,"  void <extra_id_0>() {    final var properties = new Properties();    properties.put(""enhancedWelcome"", false);    var service = new PropertiesFeatureToggleVersion(properties);    assertFalse(service.isEnhanced());    final var welcomeMessage = service.getWelcomeMessage(new User(""Jamie No Code""));    assertEquals(""Welcome to the application."", welcomeMessage);  }",testFeatureTurnedOff
1143,  Message <extra_id_0>() throws InterruptedException;,take
2201,"  void <extra_id_0>() {    assertEquals(controller.bullet.getPosition(), controller.getBulletPosition(), 0);  }",testGetBulletPosition
2997,"  public void <extra_id_0>(String message) {    LOGGER.info(""Epson Printer : {}"", message);  }",print
1117,  public void <extra_id_0>(T t) {    ensureCapacity();    queue[size] = t;    size++;    maxHeapifyUp();  }  /**   * Check queue size.   */,add
3310,"  protected void <extra_id_0>() {    System.out.print(""."");  }",printThisAfter
2144,  O <extra_id_0>() throws Exception;,call
1920,"  void <extra_id_0>() {    final var bullyInstance = new BullyInstance(null, 1, 1);    bullyInstance.setAlive(false);    assertFalse(bullyInstance.isAlive());  }",testSetAlive
2407,  public int <extra_id_0>() {    return leftExpression.interpret() * rightExpression.interpret();  }  @Override,interpret
2742,"  public static void <extra_id_0>(String[] args) {    var kingJoffrey = new KingJoffrey();    var kingsHand = new KingsHand();    kingsHand.registerObserver(kingJoffrey, Event.TRAITOR_DETECTED);    kingsHand.registerObserver(kingJoffrey, Event.STARK_SIGHTED);    kingsHand.registerObserver(kingJoffrey, Event.WARSHIPS_APPROACHING);    kingsHand.registerObserver(kingJoffrey, Event.WHITE_WALKERS_SIGHTED);    var varys = new LordVarys();    varys.registerObserver(kingsHand, Event.TRAITOR_DETECTED);    varys.registerObserver(kingsHand, Event.WHITE_WALKERS_SIGHTED);    var scout = new Scout();    scout.registerObserver(kingsHand, Event.WARSHIPS_APPROACHING);    scout.registerObserver(varys, Event.WHITE_WALKERS_SIGHTED);    var baelish = new LordBaelish(kingsHand, Event.STARK_SIGHTED);    var emitters = List.of(        kingsHand,        baelish,        varys,        scout    );    Arrays.stream(Weekday.values())        .<Consumer<? super EventEmitter>>map(day -> emitter -> emitter.timePasses(day))        .forEachOrdered(emitters::forEach);  }",main
638,"  public static Service <extra_id_0>(String serviceJndiName) {    var serviceObj = serviceCache.getService(serviceJndiName);    if (serviceObj != null) {      return serviceObj;    } else {      /*       * If we are unable to retrieve anything from cache, then lookup the service and add it in the       * cache map       */      var ctx = new InitContext();      serviceObj = (Service) ctx.lookup(serviceJndiName);      if (serviceObj != null) { // Only cache a service if it actually exists        serviceCache.addService(serviceObj);      }      return serviceObj;    }  }",getService
3519,"  void <extra_id_0>() {    var models = ImperativeProgramming.getModelsAfter2000(cars);    assertEquals(List.of(""Avenger"", ""Wrangler"", ""Focus"", ""Cascada""), models);  }  @Test",testGetModelsAfter2000UsingFor
356,  public void <extra_id_0>(DragonSlayingStrategy strategy) {    this.strategy = strategy;  },changeStrategy
2358,"  private static MongoClient <extra_id_0>() {    return MongoClients.create(            MongoClientSettings.builder()                .applyToClusterSettings(builder -> builder.hosts(List.of(new ServerAddress(TEST_HOST, TEST_PORT))))                .build()    );  }",buildMongoClient
289,"  void <extra_id_0>() throws Exception {    var groundDive = new GroundDive();    var outputLog = getLogContent(() -> groundDive.playSound(""SOUND_NAME"", 1));    var expectedLog = ""Play SOUND_NAME with volume 1"";    assertEquals(outputLog, expectedLog);  }  @Test",testPlaySound
3282,"  void <extra_id_0>() {    //given    final var message = ""message"";    final var messageData = new MessageData(message);    final var collector = new MessageCollectorMember(""collector"");    //when    collector.accept(messageData);    //then    assertTrue(collector.getMessages().contains(message));  }  @Test",collectMessageFromMessageData
296,  public void <extra_id_0>(StealingMethod method) {    this.method = method;  },changeMethod
1239,"  void <extra_id_0>() {    var stew = new Stew(1, 2, 3, 4);    var expectedMessage = ""Mixing the stew we find: 1 potatoes, 2 carrots, 3 meat and 4 peppers"";    for (var i = 0; i < 20; i++) {      stew.mix();      assertEquals(expectedMessage, appender.getLastMessage());    }    assertEquals(20, appender.getLogSize());  }  /**   * Verify if tasting the stew actually removes one of each ingredient   */  @Test",testMix
2854,"  void <extra_id_0>(final GameObject other, final boolean otherDamaged, final boolean otherOnFire,                     final boolean thisDamaged, final boolean thisOnFire) {    Objects.requireNonNull(other);    Objects.requireNonNull(getTestedObject());    final var tested = getTestedObject();    tested.collision(other);    testOnFire(other, tested, otherOnFire);    testDamaged(other, tested, otherDamaged);    testOnFire(tested, other, thisOnFire);    testDamaged(tested, other, thisDamaged);  }  /**   * Test if the fire state of the target matches the expected state after colliding with the given   * object   *   * @param target             The target object   * @param other              The other object   * @param expectTargetOnFire The expected state of fire on the target object   */",testCollision
2973,"  void <extra_id_0>() {    var customer = new CustomerDto(""1"", ""Rita"", ""Reynolds"");    var customerResource = new CustomerResource(new ArrayList<>());    customerResource.save(customer);    var allCustomers = customerResource.getAllCustomers();    assertEquals(""1"", allCustomers.get(0).getId());    assertEquals(""Rita"", allCustomers.get(0).getFirstName());    assertEquals(""Reynolds"", allCustomers.get(0).getLastName());  }  @Test",shouldSaveCustomer
605,"  void <extra_id_0>() {    final var model = new GiantModel(""giant1"", Health.HEALTHY, Fatigue.ALERT,        Nourishment.SATURATED);    Action action = new Action(model);    GiantView giantView = new GiantView();    Dispatcher dispatcher = new Dispatcher(giantView);    assertEquals(Nourishment.SATURATED, model.getNourishment());    dispatcher.addAction(action);    for (final var nourishment : Nourishment.values()) {      for (final var fatigue : Fatigue.values()) {        for (final var health : Health.values()) {          Command cmd = new Command(fatigue, health, nourishment);          dispatcher.performAction(cmd, 0);          assertEquals(nourishment, model.getNourishment());          assertEquals(fatigue, model.getFatigue());          assertEquals(health, model.getHealth());        }      }    }  }  @Test",testPerformAction
1804,"  public static boolean <extra_id_0>(int[][] m1, int[][] m2) {    if (m1.length != m2.length) {      return false;    } else {      var answer = false;      for (var i = 0; i < m1.length; i++) {        if (arraysSame(m1[i], m2[i])) {          answer = true;        } else {          answer = false;          break;        }      }      return answer;    }  }  /**   * Method createRandomIntMatrix creates a random matrix of size @param rows and @param columns.   *   * @return it (int[][]).   */",matricesSame
2169,  public TreeNode<T> <extra_id_0>() {    return left;  },getLeft
2076,  public RetryTemplate <extra_id_0>() {    RetryTemplate retryTemplate = new RetryTemplate();    FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();    fixedBackOffPolicy.setBackOffPeriod(backOffPeriod); // wait 2 seconds between retries    retryTemplate.setBackOffPolicy(fixedBackOffPolicy);    SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();    retryPolicy.setMaxAttempts(maxAttempts); // retry a max of 3 attempts    retryTemplate.setRetryPolicy(retryPolicy);    return retryTemplate;  },retryTemplate
2720,"  void <extra_id_0>() throws Exception {    final var nonExistingFile = new File(this.testFolder.getRoot(), ""non-existing-file"");    assertFalse(nonExistingFile.exists());    new SimpleFileWriter(nonExistingFile.getPath(), Assertions::assertNotNull);    assertTrue(nonExistingFile.exists());  }  @Test",testCreatesNonExistentFile
666,  String <extra_id_0>();,getName
852,"  public void <extra_id_0>(AbstractNioChannel channel, Object readObject, SelectionKey key) {    /*     * Calls the associated handler to notify the read event where application specific code     * resides.     */    channel.getHandler().handleChannelRead(channel, readObject, key);  }  /**   * No resources to free.   */  @Override",onChannelReadEvent
302,"  protected void <extra_id_0>(String target) {    LOGGER.info(""Approach the {} with tears running and hug him!"", target);  }  @Override",confuseTarget
